
doan1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d970  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  0800da7c  0800da7c  0001da7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e268  0800e268  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800e268  0800e268  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e268  0800e268  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e268  0800e268  0001e268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e26c  0800e26c  0001e26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce4  200001f0  0800e45c  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ed4  0800e45c  00020ed4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c85  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049ff  00000000  00000000  00038e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  0003d8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001418  00000000  00000000  0003ef20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dabf  00000000  00000000  00040338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f336  00000000  00000000  0005ddf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a1d  00000000  00000000  0007d12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010db4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d80  00000000  00000000  0010db9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800da64 	.word	0x0800da64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	0800da64 	.word	0x0800da64

0800014c <Flash_Erase>:
 */


#include <flash.h>

void Flash_Erase(uint32_t address){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000154:	f004 fe58 	bl	8004e08 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef	EraseInit;
	EraseInit.Banks  = 1;
 8000158:	2301      	movs	r3, #1
 800015a:	617b      	str	r3, [r7, #20]
	EraseInit.NbPages = 1;
 800015c:	2301      	movs	r3, #1
 800015e:	61fb      	str	r3, [r7, #28]
	EraseInit.PageAddress = address;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	61bb      	str	r3, [r7, #24]
	EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000164:	2300      	movs	r3, #0
 8000166:	613b      	str	r3, [r7, #16]
	uint32_t pageerr;
	HAL_FLASHEx_Erase(&EraseInit ,&pageerr );
 8000168:	f107 020c 	add.w	r2, r7, #12
 800016c:	f107 0310 	add.w	r3, r7, #16
 8000170:	4611      	mov	r1, r2
 8000172:	4618      	mov	r0, r3
 8000174:	f004 ff30 	bl	8004fd8 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8000178:	f004 fe6c 	bl	8004e54 <HAL_FLASH_Lock>
}
 800017c:	bf00      	nop
 800017e:	3720      	adds	r7, #32
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <Flash_Write_2Byte>:
void Flash_Write_2Byte(uint32_t address , uint16_t data){
 8000184:	b5b0      	push	{r4, r5, r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	460b      	mov	r3, r1
 800018e:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8000190:	f004 fe3a 	bl	8004e08 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000194:	887b      	ldrh	r3, [r7, #2]
 8000196:	2200      	movs	r2, #0
 8000198:	461c      	mov	r4, r3
 800019a:	4615      	mov	r5, r2
 800019c:	4622      	mov	r2, r4
 800019e:	462b      	mov	r3, r5
 80001a0:	6879      	ldr	r1, [r7, #4]
 80001a2:	2001      	movs	r0, #1
 80001a4:	f004 fdc0 	bl	8004d28 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80001a8:	f004 fe54 	bl	8004e54 <HAL_FLASH_Lock>
}
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bdb0      	pop	{r4, r5, r7, pc}

080001b4 <Flash_Write_Array>:
void Flash_Write_4Byte(uint32_t address , uint32_t data){
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data);
	HAL_FLASH_Lock();
}
void Flash_Write_Array(uint32_t address , uint8_t *data , uint16_t length){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	4613      	mov	r3, r2
 80001c0:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 80001c2:	f004 fe21 	bl	8004e08 <HAL_FLASH_Unlock>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 80001c6:	2300      	movs	r3, #0
 80001c8:	82fb      	strh	r3, [r7, #22]
 80001ca:	e00c      	b.n	80001e6 <Flash_Write_Array+0x32>
		Flash_Write_2Byte(address +i,*(uint16_t *)(data +i) );
 80001cc:	8afa      	ldrh	r2, [r7, #22]
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	18d0      	adds	r0, r2, r3
 80001d2:	8afb      	ldrh	r3, [r7, #22]
 80001d4:	68ba      	ldr	r2, [r7, #8]
 80001d6:	4413      	add	r3, r2
 80001d8:	881b      	ldrh	r3, [r3, #0]
 80001da:	4619      	mov	r1, r3
 80001dc:	f7ff ffd2 	bl	8000184 <Flash_Write_2Byte>
	for( uint16_t i = 0 ; i< length ; i = i+2){
 80001e0:	8afb      	ldrh	r3, [r7, #22]
 80001e2:	3302      	adds	r3, #2
 80001e4:	82fb      	strh	r3, [r7, #22]
 80001e6:	8afa      	ldrh	r2, [r7, #22]
 80001e8:	88fb      	ldrh	r3, [r7, #6]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d3ee      	bcc.n	80001cc <Flash_Write_Array+0x18>
	}
	HAL_FLASH_Lock();
 80001ee:	f004 fe31 	bl	8004e54 <HAL_FLASH_Lock>
}
 80001f2:	bf00      	nop
 80001f4:	3718      	adds	r7, #24
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}

080001fa <Flash_Read_Byte>:

uint8_t  Flash_Read_Byte(uint32_t address){
 80001fa:	b480      	push	{r7}
 80001fc:	b083      	sub	sp, #12
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
	return *(__IO uint8_t *)(address);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	b2db      	uxtb	r3, r3
}
 8000208:	4618      	mov	r0, r3
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr

08000212 <Flash_Read_2Byte>:
uint16_t Flash_Read_2Byte(uint32_t address){
 8000212:	b480      	push	{r7}
 8000214:	b083      	sub	sp, #12
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)(address);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	881b      	ldrh	r3, [r3, #0]
 800021e:	b29b      	uxth	r3, r3
}
 8000220:	4618      	mov	r0, r3
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr

0800022a <Flash_Read_8Byte>:
uint32_t Flash_Read_4Byte(uint32_t address){
	return *(__IO uint32_t *)(address);
}
uint64_t Flash_Read_8Byte(uint32_t address){
 800022a:	b480      	push	{r7}
 800022c:	b083      	sub	sp, #12
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
	return *(__IO uint64_t *)(address);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8000238:	4610      	mov	r0, r2
 800023a:	4619      	mov	r1, r3
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <Flash_Read_Array>:
void  Flash_Read_Array(uint32_t address, uint8_t *data , uint16_t length){
 8000244:	b480      	push	{r7}
 8000246:	b087      	sub	sp, #28
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	4613      	mov	r3, r2
 8000250:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i< length ; i++){
 8000252:	2300      	movs	r3, #0
 8000254:	82fb      	strh	r3, [r7, #22]
 8000256:	e00c      	b.n	8000272 <Flash_Read_Array+0x2e>
		*(data +i) = *(__IO uint8_t *)(address+i);
 8000258:	8afa      	ldrh	r2, [r7, #22]
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	4413      	add	r3, r2
 800025e:	4619      	mov	r1, r3
 8000260:	8afb      	ldrh	r3, [r7, #22]
 8000262:	68ba      	ldr	r2, [r7, #8]
 8000264:	4413      	add	r3, r2
 8000266:	780a      	ldrb	r2, [r1, #0]
 8000268:	b2d2      	uxtb	r2, r2
 800026a:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i< length ; i++){
 800026c:	8afb      	ldrh	r3, [r7, #22]
 800026e:	3301      	adds	r3, #1
 8000270:	82fb      	strh	r3, [r7, #22]
 8000272:	8afa      	ldrh	r2, [r7, #22]
 8000274:	88fb      	ldrh	r3, [r7, #6]
 8000276:	429a      	cmp	r2, r3
 8000278:	d3ee      	bcc.n	8000258 <Flash_Read_Array+0x14>
	}
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	371c      	adds	r7, #28
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr

08000286 <CLCD_Delay>:
#include "lcd.h"


//************************ Low Level Function *****************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	b082      	sub	sp, #8
 800028a:	af00      	add	r7, sp, #0
 800028c:	4603      	mov	r3, r0
 800028e:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8000290:	88fb      	ldrh	r3, [r7, #6]
 8000292:	4618      	mov	r0, r3
 8000294:	f004 fbe4 	bl	8004a60 <HAL_Delay>

}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <CLCD_Write8>:
static void CLCD_Write8(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	70fb      	strb	r3, [r7, #3]
 80002ac:	4613      	mov	r3, r2
 80002ae:	70bb      	strb	r3, [r7, #2]
	if(Mode == CLCD_COMMAND)
 80002b0:	78bb      	ldrb	r3, [r7, #2]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d108      	bne.n	80002c8 <CLCD_Write8+0x28>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6858      	ldr	r0, [r3, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	891b      	ldrh	r3, [r3, #8]
 80002be:	2200      	movs	r2, #0
 80002c0:	4619      	mov	r1, r3
 80002c2:	f005 f8cc 	bl	800545e <HAL_GPIO_WritePin>
 80002c6:	e00a      	b.n	80002de <CLCD_Write8+0x3e>
	}
	else if(Mode == CLCD_DATA)
 80002c8:	78bb      	ldrb	r3, [r7, #2]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d107      	bne.n	80002de <CLCD_Write8+0x3e>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	6858      	ldr	r0, [r3, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	891b      	ldrh	r3, [r3, #8]
 80002d6:	2201      	movs	r2, #1
 80002d8:	4619      	mov	r1, r3
 80002da:	f005 f8c0 	bl	800545e <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D0_PORT, LCD->D0_PIN, Data&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6958      	ldr	r0, [r3, #20]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	8b19      	ldrh	r1, [r3, #24]
 80002e6:	78fb      	ldrb	r3, [r7, #3]
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	461a      	mov	r2, r3
 80002f0:	f005 f8b5 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D1_PORT, LCD->D1_PIN, Data>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	69d8      	ldr	r0, [r3, #28]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	8c19      	ldrh	r1, [r3, #32]
 80002fc:	78fb      	ldrb	r3, [r7, #3]
 80002fe:	085b      	lsrs	r3, r3, #1
 8000300:	b2db      	uxtb	r3, r3
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	b2db      	uxtb	r3, r3
 8000308:	461a      	mov	r2, r3
 800030a:	f005 f8a8 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D2_PORT, LCD->D2_PIN, Data>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8000316:	78fb      	ldrb	r3, [r7, #3]
 8000318:	089b      	lsrs	r3, r3, #2
 800031a:	b2db      	uxtb	r3, r3
 800031c:	f003 0301 	and.w	r3, r3, #1
 8000320:	b2db      	uxtb	r3, r3
 8000322:	461a      	mov	r2, r3
 8000324:	f005 f89b 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D3_PORT, LCD->D3_PIN, Data>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	08db      	lsrs	r3, r3, #3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	b2db      	uxtb	r3, r3
 800033c:	461a      	mov	r2, r3
 800033e:	f005 f88e 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data>>4&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 800034a:	78fb      	ldrb	r3, [r7, #3]
 800034c:	091b      	lsrs	r3, r3, #4
 800034e:	b2db      	uxtb	r3, r3
 8000350:	f003 0301 	and.w	r3, r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	461a      	mov	r2, r3
 8000358:	f005 f881 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data>>5&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8000366:	78fb      	ldrb	r3, [r7, #3]
 8000368:	095b      	lsrs	r3, r3, #5
 800036a:	b2db      	uxtb	r3, r3
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	f005 f873 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data>>6&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8000382:	78fb      	ldrb	r3, [r7, #3]
 8000384:	099b      	lsrs	r3, r3, #6
 8000386:	b2db      	uxtb	r3, r3
 8000388:	f003 0301 	and.w	r3, r3, #1
 800038c:	b2db      	uxtb	r3, r3
 800038e:	461a      	mov	r2, r3
 8000390:	f005 f865 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data>>7&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800039e:	78fb      	ldrb	r3, [r7, #3]
 80003a0:	09db      	lsrs	r3, r3, #7
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	461a      	mov	r2, r3
 80003a6:	f005 f85a 	bl	800545e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	68d8      	ldr	r0, [r3, #12]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	8a1b      	ldrh	r3, [r3, #16]
 80003b2:	2200      	movs	r2, #0
 80003b4:	4619      	mov	r1, r3
 80003b6:	f005 f852 	bl	800545e <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80003ba:	2001      	movs	r0, #1
 80003bc:	f7ff ff63 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	68d8      	ldr	r0, [r3, #12]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	8a1b      	ldrh	r3, [r3, #16]
 80003c8:	2201      	movs	r2, #1
 80003ca:	4619      	mov	r1, r3
 80003cc:	f005 f847 	bl	800545e <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff58 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	68d8      	ldr	r0, [r3, #12]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	8a1b      	ldrh	r3, [r3, #16]
 80003de:	2200      	movs	r2, #0
 80003e0:	4619      	mov	r1, r3
 80003e2:	f005 f83c 	bl	800545e <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f7ff ff4d 	bl	8000286 <CLCD_Delay>
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <CLCD_Write4>:
static void CLCD_Write4(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	460b      	mov	r3, r1
 80003fe:	70fb      	strb	r3, [r7, #3]
 8000400:	4613      	mov	r3, r2
 8000402:	70bb      	strb	r3, [r7, #2]
	uint8_t Data_H = Data >>4;
 8000404:	78fb      	ldrb	r3, [r7, #3]
 8000406:	091b      	lsrs	r3, r3, #4
 8000408:	73fb      	strb	r3, [r7, #15]
	uint8_t Data_L = Data;
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	73bb      	strb	r3, [r7, #14]
	if(Mode == CLCD_COMMAND)
 800040e:	78bb      	ldrb	r3, [r7, #2]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d108      	bne.n	8000426 <CLCD_Write4+0x32>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6858      	ldr	r0, [r3, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	891b      	ldrh	r3, [r3, #8]
 800041c:	2200      	movs	r2, #0
 800041e:	4619      	mov	r1, r3
 8000420:	f005 f81d 	bl	800545e <HAL_GPIO_WritePin>
 8000424:	e00a      	b.n	800043c <CLCD_Write4+0x48>
	}
	else if(Mode == CLCD_DATA)
 8000426:	78bb      	ldrb	r3, [r7, #2]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d107      	bne.n	800043c <CLCD_Write4+0x48>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6858      	ldr	r0, [r3, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	891b      	ldrh	r3, [r3, #8]
 8000434:	2201      	movs	r2, #1
 8000436:	4619      	mov	r1, r3
 8000438:	f005 f811 	bl	800545e <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_H&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	f005 f806 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_H>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800045c:	7bfb      	ldrb	r3, [r7, #15]
 800045e:	085b      	lsrs	r3, r3, #1
 8000460:	b2db      	uxtb	r3, r3
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	b2db      	uxtb	r3, r3
 8000468:	461a      	mov	r2, r3
 800046a:	f004 fff8 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_H>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	089b      	lsrs	r3, r3, #2
 800047c:	b2db      	uxtb	r3, r3
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	b2db      	uxtb	r3, r3
 8000484:	461a      	mov	r2, r3
 8000486:	f004 ffea 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_H>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	08db      	lsrs	r3, r3, #3
 8000498:	b2db      	uxtb	r3, r3
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	461a      	mov	r2, r3
 80004a2:	f004 ffdc 	bl	800545e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	68d8      	ldr	r0, [r3, #12]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	8a1b      	ldrh	r3, [r3, #16]
 80004ae:	2200      	movs	r2, #0
 80004b0:	4619      	mov	r1, r3
 80004b2:	f004 ffd4 	bl	800545e <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80004b6:	2001      	movs	r0, #1
 80004b8:	f7ff fee5 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	68d8      	ldr	r0, [r3, #12]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	8a1b      	ldrh	r3, [r3, #16]
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	f004 ffc9 	bl	800545e <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80004cc:	2001      	movs	r0, #1
 80004ce:	f7ff feda 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	68d8      	ldr	r0, [r3, #12]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	8a1b      	ldrh	r3, [r3, #16]
 80004da:	2200      	movs	r2, #0
 80004dc:	4619      	mov	r1, r3
 80004de:	f004 ffbe 	bl	800545e <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 80004e2:	2001      	movs	r0, #1
 80004e4:	f7ff fecf 	bl	8000286 <CLCD_Delay>

	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_L&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 80004f0:	7bbb      	ldrb	r3, [r7, #14]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	461a      	mov	r2, r3
 80004fa:	f004 ffb0 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_L>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8000508:	7bbb      	ldrb	r3, [r7, #14]
 800050a:	085b      	lsrs	r3, r3, #1
 800050c:	b2db      	uxtb	r3, r3
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	b2db      	uxtb	r3, r3
 8000514:	461a      	mov	r2, r3
 8000516:	f004 ffa2 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_L>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8000524:	7bbb      	ldrb	r3, [r7, #14]
 8000526:	089b      	lsrs	r3, r3, #2
 8000528:	b2db      	uxtb	r3, r3
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	b2db      	uxtb	r3, r3
 8000530:	461a      	mov	r2, r3
 8000532:	f004 ff94 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_L>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	08db      	lsrs	r3, r3, #3
 8000544:	b2db      	uxtb	r3, r3
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	461a      	mov	r2, r3
 800054e:	f004 ff86 	bl	800545e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	68d8      	ldr	r0, [r3, #12]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	8a1b      	ldrh	r3, [r3, #16]
 800055a:	2200      	movs	r2, #0
 800055c:	4619      	mov	r1, r3
 800055e:	f004 ff7e 	bl	800545e <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000562:	2001      	movs	r0, #1
 8000564:	f7ff fe8f 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	68d8      	ldr	r0, [r3, #12]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	8a1b      	ldrh	r3, [r3, #16]
 8000570:	2201      	movs	r2, #1
 8000572:	4619      	mov	r1, r3
 8000574:	f004 ff73 	bl	800545e <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f7ff fe84 	bl	8000286 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	68d8      	ldr	r0, [r3, #12]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	8a1b      	ldrh	r3, [r3, #16]
 8000586:	2200      	movs	r2, #0
 8000588:	4619      	mov	r1, r3
 800058a:	f004 ff68 	bl	800545e <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f7ff fe79 	bl	8000286 <CLCD_Delay>
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <CLCD_4BIT_Init>:

void CLCD_4BIT_Init(CLCD_Name* LCD, uint8_t Colum, uint8_t Row,
									GPIO_TypeDef* RS_PORT, uint16_t RS_PIN, GPIO_TypeDef* EN_PORT, uint16_t EN_PIN,
									GPIO_TypeDef* D4_PORT, uint16_t D4_PIN, GPIO_TypeDef* D5_PORT, uint16_t D5_PIN,
									GPIO_TypeDef* D6_PORT, uint16_t D6_PIN, GPIO_TypeDef* D7_PORT, uint16_t D7_PIN)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	460b      	mov	r3, r1
 80005a8:	72fb      	strb	r3, [r7, #11]
 80005aa:	4613      	mov	r3, r2
 80005ac:	72bb      	strb	r3, [r7, #10]
	LCD->MODE = LCD_4BITMODE;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
	LCD->COLUMS = Colum;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	7afa      	ldrb	r2, [r7, #11]
 80005b8:	705a      	strb	r2, [r3, #1]
	LCD->ROWS = Row;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	7aba      	ldrb	r2, [r7, #10]
 80005be:	709a      	strb	r2, [r3, #2]
	LCD->RS_PORT = RS_PORT;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	605a      	str	r2, [r3, #4]
	LCD->RS_PIN = RS_PIN;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	8b3a      	ldrh	r2, [r7, #24]
 80005ca:	811a      	strh	r2, [r3, #8]
	LCD->EN_PORT = EN_PORT;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	69fa      	ldr	r2, [r7, #28]
 80005d0:	60da      	str	r2, [r3, #12]
	LCD->EN_PIN = EN_PIN;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	8c3a      	ldrh	r2, [r7, #32]
 80005d6:	821a      	strh	r2, [r3, #16]
	LCD->D4_PORT = D4_PORT;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
	LCD->D4_PIN = D4_PIN;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80005e2:	871a      	strh	r2, [r3, #56]	; 0x38
	LCD->D5_PORT = D5_PORT;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005e8:	63da      	str	r2, [r3, #60]	; 0x3c
	LCD->D5_PIN = D5_PIN;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80005ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	LCD->D6_PORT = D6_PORT;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005f6:	645a      	str	r2, [r3, #68]	; 0x44
	LCD->D6_PIN = D6_PIN;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80005fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	LCD->D7_PORT = D7_PORT;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000604:	64da      	str	r2, [r3, #76]	; 0x4c
	LCD->D7_PIN = D7_PIN;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800060c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2228      	movs	r2, #40	; 0x28
 8000614:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2206      	movs	r2, #6
 800061c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	220c      	movs	r2, #12
 8000624:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2214      	movs	r2, #20
 800062c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	CLCD_Delay(50);
 8000630:	2032      	movs	r0, #50	; 0x32
 8000632:	f7ff fe28 	bl	8000286 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8000636:	2200      	movs	r2, #0
 8000638:	2133      	movs	r1, #51	; 0x33
 800063a:	68f8      	ldr	r0, [r7, #12]
 800063c:	f7ff feda 	bl	80003f4 <CLCD_Write4>
	CLCD_Delay(5);
 8000640:	2005      	movs	r0, #5
 8000642:	f7ff fe20 	bl	8000286 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8000646:	2200      	movs	r2, #0
 8000648:	2133      	movs	r1, #51	; 0x33
 800064a:	68f8      	ldr	r0, [r7, #12]
 800064c:	f7ff fed2 	bl	80003f4 <CLCD_Write4>
	CLCD_Delay(5);
 8000650:	2005      	movs	r0, #5
 8000652:	f7ff fe18 	bl	8000286 <CLCD_Delay>
	CLCD_Write4(LCD, 0x32, CLCD_COMMAND);
 8000656:	2200      	movs	r2, #0
 8000658:	2132      	movs	r1, #50	; 0x32
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f7ff feca 	bl	80003f4 <CLCD_Write4>
	CLCD_Delay(5);
 8000660:	2005      	movs	r0, #5
 8000662:	f7ff fe10 	bl	8000286 <CLCD_Delay>

	CLCD_Write4(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800066c:	2200      	movs	r2, #0
 800066e:	4619      	mov	r1, r3
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff febf 	bl	80003f4 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800067c:	2200      	movs	r2, #0
 800067e:	4619      	mov	r1, r3
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f7ff feb7 	bl	80003f4 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800068c:	2200      	movs	r2, #0
 800068e:	4619      	mov	r1, r3
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f7ff feaf 	bl	80003f4 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800069c:	2200      	movs	r2, #0
 800069e:	4619      	mov	r1, r3
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f7ff fea7 	bl	80003f4 <CLCD_Write4>

	CLCD_Write4(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2101      	movs	r1, #1
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f7ff fea2 	bl	80003f4 <CLCD_Write4>
	CLCD_Write4(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2102      	movs	r1, #2
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff fe9d 	bl	80003f4 <CLCD_Write4>
}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <CLCD_SetCursor>:
void CLCD_SetCursor(CLCD_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	70fb      	strb	r3, [r7, #3]
 80006d0:	4613      	mov	r3, r2
 80006d2:	70bb      	strb	r3, [r7, #2]

	uint8_t DRAM_ADDRESS = 0x00;
 80006d4:	2300      	movs	r3, #0
 80006d6:	73fb      	strb	r3, [r7, #15]
	uint8_t DRAM_OFFSET[4] = {0x00, 0x40, 0x14, 0x54};
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <CLCD_SetCursor+0x8c>)
 80006da:	60bb      	str	r3, [r7, #8]
	if(Xpos >= LCD->COLUMS)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	785b      	ldrb	r3, [r3, #1]
 80006e0:	78fa      	ldrb	r2, [r7, #3]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d303      	bcc.n	80006ee <CLCD_SetCursor+0x2a>
	{
		Xpos = LCD->COLUMS - 1;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	785b      	ldrb	r3, [r3, #1]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	78ba      	ldrb	r2, [r7, #2]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d303      	bcc.n	8000700 <CLCD_SetCursor+0x3c>
	{
		Ypos = LCD->ROWS -1;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	789b      	ldrb	r3, [r3, #2]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	70bb      	strb	r3, [r7, #2]
	}
	DRAM_ADDRESS = DRAM_OFFSET[Ypos] + Xpos;
 8000700:	78bb      	ldrb	r3, [r7, #2]
 8000702:	3310      	adds	r3, #16
 8000704:	443b      	add	r3, r7
 8000706:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800070a:	78fb      	ldrb	r3, [r7, #3]
 800070c:	4413      	add	r3, r2
 800070e:	73fb      	strb	r3, [r7, #15]
	if(LCD->MODE == LCD_8BITMODE)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b10      	cmp	r3, #16
 8000716:	d109      	bne.n	800072c <CLCD_SetCursor+0x68>
	{
		CLCD_Write8(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff fdbb 	bl	80002a0 <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
	}
}
 800072a:	e00c      	b.n	8000746 <CLCD_SetCursor+0x82>
	else if(LCD->MODE == LCD_4BITMODE)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d108      	bne.n	8000746 <CLCD_SetCursor+0x82>
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff fe57 	bl	80003f4 <CLCD_Write4>
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	54144000 	.word	0x54144000

08000754 <CLCD_WriteChar>:
void CLCD_WriteChar(CLCD_Name* LCD, char character)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
	if(LCD->MODE == LCD_8BITMODE)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b10      	cmp	r3, #16
 8000766:	d106      	bne.n	8000776 <CLCD_WriteChar+0x22>
	{
		CLCD_Write8(LCD, character, CLCD_DATA);
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	2201      	movs	r2, #1
 800076c:	4619      	mov	r1, r3
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff fd96 	bl	80002a0 <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, character, CLCD_DATA);
	}
}
 8000774:	e009      	b.n	800078a <CLCD_WriteChar+0x36>
	else if(LCD->MODE == LCD_4BITMODE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d105      	bne.n	800078a <CLCD_WriteChar+0x36>
		CLCD_Write4(LCD, character, CLCD_DATA);
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	2201      	movs	r2, #1
 8000782:	4619      	mov	r1, r3
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fe35 	bl	80003f4 <CLCD_Write4>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <CLCD_WriteString>:
void CLCD_WriteString(CLCD_Name* LCD, char *String)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	6039      	str	r1, [r7, #0]
	while(*String){
 800079c:	e007      	b.n	80007ae <CLCD_WriteString+0x1c>
		CLCD_WriteChar(LCD, *String++);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	603a      	str	r2, [r7, #0]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ffd3 	bl	8000754 <CLCD_WriteChar>
	while(*String){
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f3      	bne.n	800079e <CLCD_WriteString+0xc>
//		HAL_Delay(100);
	}
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <CLCD_Clear>:
void CLCD_Clear(CLCD_Name* LCD)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	if(LCD->MODE == LCD_8BITMODE)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b10      	cmp	r3, #16
 80007ce:	d105      	bne.n	80007dc <CLCD_Clear+0x1c>
	{
		CLCD_Write8(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2101      	movs	r1, #1
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff fd63 	bl	80002a0 <CLCD_Write8>
 80007da:	e008      	b.n	80007ee <CLCD_Clear+0x2e>
	}
	else if(LCD->MODE == LCD_4BITMODE)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d104      	bne.n	80007ee <CLCD_Clear+0x2e>
	{
		CLCD_Write4(LCD, LCD_CLEARDISPLAY, CLCD_COMMAND);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2101      	movs	r1, #1
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fe03 	bl	80003f4 <CLCD_Write4>
	}
	CLCD_Delay(5);
 80007ee:	2005      	movs	r0, #5
 80007f0:	f7ff fd49 	bl	8000286 <CLCD_Delay>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <CLCD_Display>:
		CLCD_Write4(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
	}

}
void CLCD_Display(CLCD_Name* LCD,char *String1, char *String2)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
	CLCD_Clear(LCD);
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f7ff ffd9 	bl	80007c0 <CLCD_Clear>
	CLCD_SetCursor(LCD, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f7ff ff56 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(LCD, String1);
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f7ff ffb9 	bl	8000792 <CLCD_WriteString>
	CLCD_SetCursor(LCD, 0, 1);
 8000820:	2201      	movs	r2, #1
 8000822:	2100      	movs	r1, #0
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	f7ff ff4d 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(LCD, String2);
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f7ff ffb0 	bl	8000792 <CLCD_WriteString>
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <selectmenu>:
extern uint8_t PassWord[8];
char str1[8];
extern char Tx_Buffer[6];

void selectmenu(void)
{
 800083c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083e:	b089      	sub	sp, #36	; 0x24
 8000840:	af06      	add	r7, sp, #24
	exitmenu = Delaymenu;
 8000842:	4b55      	ldr	r3, [pc, #340]	; (8000998 <selectmenu+0x15c>)
 8000844:	221e      	movs	r2, #30
 8000846:	701a      	strb	r2, [r3, #0]
	uint8_t statusmenu = -1;
 8000848:	23ff      	movs	r3, #255	; 0xff
 800084a:	71fb      	strb	r3, [r7, #7]
	CLCD_Display(&LCD1, "  SELECT MENU  ", "    CARDID      ");
 800084c:	4a53      	ldr	r2, [pc, #332]	; (800099c <selectmenu+0x160>)
 800084e:	4954      	ldr	r1, [pc, #336]	; (80009a0 <selectmenu+0x164>)
 8000850:	4854      	ldr	r0, [pc, #336]	; (80009a4 <selectmenu+0x168>)
 8000852:	f7ff ffd3 	bl	80007fc <CLCD_Display>
	while(exitmenu){
 8000856:	e095      	b.n	8000984 <selectmenu+0x148>
		if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8000858:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800085c:	4852      	ldr	r0, [pc, #328]	; (80009a8 <selectmenu+0x16c>)
 800085e:	f003 ffed 	bl	800483c <checkbuton>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d02e      	beq.n	80008c6 <selectmenu+0x8a>
		{
			exitmenu = Delaymenu;
 8000868:	4b4b      	ldr	r3, [pc, #300]	; (8000998 <selectmenu+0x15c>)
 800086a:	221e      	movs	r2, #30
 800086c:	701a      	strb	r2, [r3, #0]
			statusmenu++;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	3301      	adds	r3, #1
 8000872:	71fb      	strb	r3, [r7, #7]
			statusmenu = (statusmenu > 3) ? 0 : statusmenu;
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b03      	cmp	r3, #3
 8000878:	d801      	bhi.n	800087e <selectmenu+0x42>
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	e000      	b.n	8000880 <selectmenu+0x44>
 800087e:	2300      	movs	r3, #0
 8000880:	71fb      	strb	r3, [r7, #7]
			switch (statusmenu)
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b02      	cmp	r3, #2
 8000886:	d012      	beq.n	80008ae <selectmenu+0x72>
 8000888:	2b02      	cmp	r3, #2
 800088a:	dc16      	bgt.n	80008ba <selectmenu+0x7e>
 800088c:	2b00      	cmp	r3, #0
 800088e:	d002      	beq.n	8000896 <selectmenu+0x5a>
 8000890:	2b01      	cmp	r3, #1
 8000892:	d006      	beq.n	80008a2 <selectmenu+0x66>
 8000894:	e011      	b.n	80008ba <selectmenu+0x7e>
			{
			case 0:
				CLCD_Display(&LCD1, "  SELECT MENU  ", "=>  CARDID      ");
 8000896:	4a45      	ldr	r2, [pc, #276]	; (80009ac <selectmenu+0x170>)
 8000898:	4941      	ldr	r1, [pc, #260]	; (80009a0 <selectmenu+0x164>)
 800089a:	4842      	ldr	r0, [pc, #264]	; (80009a4 <selectmenu+0x168>)
 800089c:	f7ff ffae 	bl	80007fc <CLCD_Display>
				break;
 80008a0:	e012      	b.n	80008c8 <selectmenu+0x8c>
			case 1:
				CLCD_Display(&LCD1, "  SELECT MENU  ", "=>  FACEID      ");
 80008a2:	4a43      	ldr	r2, [pc, #268]	; (80009b0 <selectmenu+0x174>)
 80008a4:	493e      	ldr	r1, [pc, #248]	; (80009a0 <selectmenu+0x164>)
 80008a6:	483f      	ldr	r0, [pc, #252]	; (80009a4 <selectmenu+0x168>)
 80008a8:	f7ff ffa8 	bl	80007fc <CLCD_Display>
				break;
 80008ac:	e00c      	b.n	80008c8 <selectmenu+0x8c>
			case 2:
				CLCD_Display(&LCD1, "  SELECT MENU  ", "=>  PASSWORD    ");
 80008ae:	4a41      	ldr	r2, [pc, #260]	; (80009b4 <selectmenu+0x178>)
 80008b0:	493b      	ldr	r1, [pc, #236]	; (80009a0 <selectmenu+0x164>)
 80008b2:	483c      	ldr	r0, [pc, #240]	; (80009a4 <selectmenu+0x168>)
 80008b4:	f7ff ffa2 	bl	80007fc <CLCD_Display>
				break;
 80008b8:	e006      	b.n	80008c8 <selectmenu+0x8c>
			default:
				CLCD_Display(&LCD1, "  SELECT MENU  ", "=>  EXIT        ");
 80008ba:	4a3f      	ldr	r2, [pc, #252]	; (80009b8 <selectmenu+0x17c>)
 80008bc:	4938      	ldr	r1, [pc, #224]	; (80009a0 <selectmenu+0x164>)
 80008be:	4839      	ldr	r0, [pc, #228]	; (80009a4 <selectmenu+0x168>)
 80008c0:	f7ff ff9c 	bl	80007fc <CLCD_Display>
				break;
 80008c4:	e000      	b.n	80008c8 <selectmenu+0x8c>
			}
		}
 80008c6:	bf00      	nop
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 80008c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008cc:	483b      	ldr	r0, [pc, #236]	; (80009bc <selectmenu+0x180>)
 80008ce:	f003 ffb5 	bl	800483c <checkbuton>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d054      	beq.n	8000982 <selectmenu+0x146>
		{
			exitmenu = Delaymenu;
 80008d8:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <selectmenu+0x15c>)
 80008da:	221e      	movs	r2, #30
 80008dc:	701a      	strb	r2, [r3, #0]
			switch (statusmenu)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d01c      	beq.n	800091e <selectmenu+0xe2>
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	dc45      	bgt.n	8000974 <selectmenu+0x138>
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <selectmenu+0xb6>
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d00b      	beq.n	8000908 <selectmenu+0xcc>
 80008f0:	e040      	b.n	8000974 <selectmenu+0x138>
			{
			case 0:
				menucard();
 80008f2:	f000 f86d 	bl	80009d0 <menucard>
				exitmenu = Delaymenu;
 80008f6:	4b28      	ldr	r3, [pc, #160]	; (8000998 <selectmenu+0x15c>)
 80008f8:	221e      	movs	r2, #30
 80008fa:	701a      	strb	r2, [r3, #0]
				CLCD_Display(&LCD1, "  SELECT MENU  ", "=>  CARDID      ");
 80008fc:	4a2b      	ldr	r2, [pc, #172]	; (80009ac <selectmenu+0x170>)
 80008fe:	4928      	ldr	r1, [pc, #160]	; (80009a0 <selectmenu+0x164>)
 8000900:	4828      	ldr	r0, [pc, #160]	; (80009a4 <selectmenu+0x168>)
 8000902:	f7ff ff7b 	bl	80007fc <CLCD_Display>
				break;
 8000906:	e03d      	b.n	8000984 <selectmenu+0x148>
			case 1:
				menuface();
 8000908:	f001 f8be 	bl	8001a88 <menuface>
				exitmenu = Delaymenu;
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <selectmenu+0x15c>)
 800090e:	221e      	movs	r2, #30
 8000910:	701a      	strb	r2, [r3, #0]
				CLCD_Display(&LCD1, "  SELECT MENU  ", "=>  FACEID      ");
 8000912:	4a27      	ldr	r2, [pc, #156]	; (80009b0 <selectmenu+0x174>)
 8000914:	4922      	ldr	r1, [pc, #136]	; (80009a0 <selectmenu+0x164>)
 8000916:	4823      	ldr	r0, [pc, #140]	; (80009a4 <selectmenu+0x168>)
 8000918:	f7ff ff70 	bl	80007fc <CLCD_Display>
				break;
 800091c:	e032      	b.n	8000984 <selectmenu+0x148>
			case 2:
				readpassword();
 800091e:	f003 f91f 	bl	8003b60 <readpassword>
				sprintf(str1, "%d%d%d%d%d%d%d%d",PassWord[0],PassWord[1],PassWord[2],PassWord[3],PassWord[4],PassWord[5],PassWord[6],PassWord[7]);
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <selectmenu+0x184>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461e      	mov	r6, r3
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <selectmenu+0x184>)
 800092a:	785b      	ldrb	r3, [r3, #1]
 800092c:	469c      	mov	ip, r3
 800092e:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <selectmenu+0x184>)
 8000930:	789b      	ldrb	r3, [r3, #2]
 8000932:	461a      	mov	r2, r3
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <selectmenu+0x184>)
 8000936:	78db      	ldrb	r3, [r3, #3]
 8000938:	4619      	mov	r1, r3
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <selectmenu+0x184>)
 800093c:	791b      	ldrb	r3, [r3, #4]
 800093e:	4618      	mov	r0, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <selectmenu+0x184>)
 8000942:	795b      	ldrb	r3, [r3, #5]
 8000944:	461c      	mov	r4, r3
 8000946:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <selectmenu+0x184>)
 8000948:	799b      	ldrb	r3, [r3, #6]
 800094a:	461d      	mov	r5, r3
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <selectmenu+0x184>)
 800094e:	79db      	ldrb	r3, [r3, #7]
 8000950:	9305      	str	r3, [sp, #20]
 8000952:	9504      	str	r5, [sp, #16]
 8000954:	9403      	str	r4, [sp, #12]
 8000956:	9002      	str	r0, [sp, #8]
 8000958:	9101      	str	r1, [sp, #4]
 800095a:	9200      	str	r2, [sp, #0]
 800095c:	4663      	mov	r3, ip
 800095e:	4632      	mov	r2, r6
 8000960:	4918      	ldr	r1, [pc, #96]	; (80009c4 <selectmenu+0x188>)
 8000962:	4819      	ldr	r0, [pc, #100]	; (80009c8 <selectmenu+0x18c>)
 8000964:	f00c fc12 	bl	800d18c <siprintf>
				CLCD_Display(&LCD1, "  PASSWORD:", str1);
 8000968:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <selectmenu+0x18c>)
 800096a:	4918      	ldr	r1, [pc, #96]	; (80009cc <selectmenu+0x190>)
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <selectmenu+0x168>)
 800096e:	f7ff ff45 	bl	80007fc <CLCD_Display>
				break;
 8000972:	e007      	b.n	8000984 <selectmenu+0x148>
			default:
				CLCD_Clear(&LCD1);
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <selectmenu+0x168>)
 8000976:	f7ff ff23 	bl	80007c0 <CLCD_Clear>
				exitmenu = 0;
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <selectmenu+0x15c>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
				break;
 8000980:	e000      	b.n	8000984 <selectmenu+0x148>
			}
		}
 8000982:	bf00      	nop
	while(exitmenu){
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <selectmenu+0x15c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	f47f af65 	bne.w	8000858 <selectmenu+0x1c>
	}
}
 800098e:	bf00      	nop
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000998:	20000000 	.word	0x20000000
 800099c:	0800da7c 	.word	0x0800da7c
 80009a0:	0800da90 	.word	0x0800da90
 80009a4:	20000348 	.word	0x20000348
 80009a8:	40010c00 	.word	0x40010c00
 80009ac:	0800daa0 	.word	0x0800daa0
 80009b0:	0800dab4 	.word	0x0800dab4
 80009b4:	0800dac8 	.word	0x0800dac8
 80009b8:	0800dadc 	.word	0x0800dadc
 80009bc:	40010800 	.word	0x40010800
 80009c0:	200003a0 	.word	0x200003a0
 80009c4:	0800daf0 	.word	0x0800daf0
 80009c8:	2000020c 	.word	0x2000020c
 80009cc:	0800db04 	.word	0x0800db04

080009d0 <menucard>:

void menucard(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
	exitmenu = Delaymenu;
 80009d6:	4ba9      	ldr	r3, [pc, #676]	; (8000c7c <menucard+0x2ac>)
 80009d8:	221e      	movs	r2, #30
 80009da:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 80009dc:	23ff      	movs	r3, #255	; 0xff
 80009de:	75fb      	strb	r3, [r7, #23]
	CLCD_Display(&LCD1, "     CARDID     ", "    THEM THE    ");
 80009e0:	4aa7      	ldr	r2, [pc, #668]	; (8000c80 <menucard+0x2b0>)
 80009e2:	49a8      	ldr	r1, [pc, #672]	; (8000c84 <menucard+0x2b4>)
 80009e4:	48a8      	ldr	r0, [pc, #672]	; (8000c88 <menucard+0x2b8>)
 80009e6:	f7ff ff09 	bl	80007fc <CLCD_Display>
	while (exitmenu )
 80009ea:	f001 b820 	b.w	8001a2e <menucard+0x105e>
	{
		if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 80009ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f2:	48a6      	ldr	r0, [pc, #664]	; (8000c8c <menucard+0x2bc>)
 80009f4:	f003 ff22 	bl	800483c <checkbuton>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d02e      	beq.n	8000a5c <menucard+0x8c>
		{
			exitmenu = Delaymenu;
 80009fe:	4b9f      	ldr	r3, [pc, #636]	; (8000c7c <menucard+0x2ac>)
 8000a00:	221e      	movs	r2, #30
 8000a02:	701a      	strb	r2, [r3, #0]
			status++;
 8000a04:	7dfb      	ldrb	r3, [r7, #23]
 8000a06:	3301      	adds	r3, #1
 8000a08:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 8000a0a:	7dfb      	ldrb	r3, [r7, #23]
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d801      	bhi.n	8000a14 <menucard+0x44>
 8000a10:	7dfb      	ldrb	r3, [r7, #23]
 8000a12:	e000      	b.n	8000a16 <menucard+0x46>
 8000a14:	2300      	movs	r3, #0
 8000a16:	75fb      	strb	r3, [r7, #23]
			switch (status)
 8000a18:	7dfb      	ldrb	r3, [r7, #23]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d012      	beq.n	8000a44 <menucard+0x74>
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	dc16      	bgt.n	8000a50 <menucard+0x80>
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <menucard+0x5c>
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d006      	beq.n	8000a38 <menucard+0x68>
 8000a2a:	e011      	b.n	8000a50 <menucard+0x80>
			{
			case 0:
				CLCD_Display(&LCD1, "=>  THEM THE", "    XOA THE");
 8000a2c:	4a98      	ldr	r2, [pc, #608]	; (8000c90 <menucard+0x2c0>)
 8000a2e:	4999      	ldr	r1, [pc, #612]	; (8000c94 <menucard+0x2c4>)
 8000a30:	4895      	ldr	r0, [pc, #596]	; (8000c88 <menucard+0x2b8>)
 8000a32:	f7ff fee3 	bl	80007fc <CLCD_Display>
				break;
 8000a36:	e012      	b.n	8000a5e <menucard+0x8e>
			case 1:
				CLCD_Display(&LCD1, "    THEM THE", "=>  XOA THE");
 8000a38:	4a97      	ldr	r2, [pc, #604]	; (8000c98 <menucard+0x2c8>)
 8000a3a:	4998      	ldr	r1, [pc, #608]	; (8000c9c <menucard+0x2cc>)
 8000a3c:	4892      	ldr	r0, [pc, #584]	; (8000c88 <menucard+0x2b8>)
 8000a3e:	f7ff fedd 	bl	80007fc <CLCD_Display>
				break;
 8000a42:	e00c      	b.n	8000a5e <menucard+0x8e>
			case 2:
				CLCD_Display(&LCD1, "    XOA THE", "=>  TRA THE");
 8000a44:	4a96      	ldr	r2, [pc, #600]	; (8000ca0 <menucard+0x2d0>)
 8000a46:	4992      	ldr	r1, [pc, #584]	; (8000c90 <menucard+0x2c0>)
 8000a48:	488f      	ldr	r0, [pc, #572]	; (8000c88 <menucard+0x2b8>)
 8000a4a:	f7ff fed7 	bl	80007fc <CLCD_Display>
				break;
 8000a4e:	e006      	b.n	8000a5e <menucard+0x8e>
			default:
				CLCD_Display(&LCD1, "    TRA THE", "=>  BACK");
 8000a50:	4a94      	ldr	r2, [pc, #592]	; (8000ca4 <menucard+0x2d4>)
 8000a52:	4995      	ldr	r1, [pc, #596]	; (8000ca8 <menucard+0x2d8>)
 8000a54:	488c      	ldr	r0, [pc, #560]	; (8000c88 <menucard+0x2b8>)
 8000a56:	f7ff fed1 	bl	80007fc <CLCD_Display>
				break;
 8000a5a:	e000      	b.n	8000a5e <menucard+0x8e>
			}
		}
 8000a5c:	bf00      	nop
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8000a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a62:	4892      	ldr	r0, [pc, #584]	; (8000cac <menucard+0x2dc>)
 8000a64:	f003 feea 	bl	800483c <checkbuton>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 87de 	beq.w	8001a2c <menucard+0x105c>
		{
			exitmenu = Delaymenu;
 8000a70:	4b82      	ldr	r3, [pc, #520]	; (8000c7c <menucard+0x2ac>)
 8000a72:	221e      	movs	r2, #30
 8000a74:	701a      	strb	r2, [r3, #0]
			switch (status)
 8000a76:	7dfb      	ldrb	r3, [r7, #23]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	f000 87cb 	beq.w	8001a14 <menucard+0x1044>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	f300 87d0 	bgt.w	8001a24 <menucard+0x1054>
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d004      	beq.n	8000a92 <menucard+0xc2>
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	f000 82e3 	beq.w	8001054 <menucard+0x684>
 8000a8e:	f000 bfc9 	b.w	8001a24 <menucard+0x1054>
			{
			case 0:
				CLCD_Display(&LCD1, "    SELECT ", "   THE NGUOI LON");
 8000a92:	4a87      	ldr	r2, [pc, #540]	; (8000cb0 <menucard+0x2e0>)
 8000a94:	4987      	ldr	r1, [pc, #540]	; (8000cb4 <menucard+0x2e4>)
 8000a96:	487c      	ldr	r0, [pc, #496]	; (8000c88 <menucard+0x2b8>)
 8000a98:	f7ff feb0 	bl	80007fc <CLCD_Display>
				uint8_t statusadd = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8000aa4:	e2cb      	b.n	800103e <menucard+0x66e>
				{
					if (exitmenu == 0)
 8000aa6:	4b75      	ldr	r3, [pc, #468]	; (8000c7c <menucard+0x2ac>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d108      	bne.n	8000ac0 <menucard+0xf0>
					{
						CLCD_Clear(&LCD1);
 8000aae:	4876      	ldr	r0, [pc, #472]	; (8000c88 <menucard+0x2b8>)
 8000ab0:	f7ff fe86 	bl	80007c0 <CLCD_Clear>
						HAL_Delay(1000);
 8000ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab8:	f003 ffd2 	bl	8004a60 <HAL_Delay>
						return;
 8000abc:	f000 bfbf 	b.w	8001a3e <menucard+0x106e>
					}
					if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8000ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac4:	4871      	ldr	r0, [pc, #452]	; (8000c8c <menucard+0x2bc>)
 8000ac6:	f003 feb9 	bl	800483c <checkbuton>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d024      	beq.n	8000b1a <menucard+0x14a>
					{
						exitmenu = Delaymenu;
 8000ad0:	4b6a      	ldr	r3, [pc, #424]	; (8000c7c <menucard+0x2ac>)
 8000ad2:	221e      	movs	r2, #30
 8000ad4:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8000ad6:	7dbb      	ldrb	r3, [r7, #22]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 8000adc:	7dbb      	ldrb	r3, [r7, #22]
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d801      	bhi.n	8000ae6 <menucard+0x116>
 8000ae2:	7dbb      	ldrb	r3, [r7, #22]
 8000ae4:	e000      	b.n	8000ae8 <menucard+0x118>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 8000aea:	7dbb      	ldrb	r3, [r7, #22]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d002      	beq.n	8000af6 <menucard+0x126>
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d006      	beq.n	8000b02 <menucard+0x132>
 8000af4:	e00b      	b.n	8000b0e <menucard+0x13e>
						{
						case 1:
							CLCD_Display(&LCD1, "=> THE NGUOI LON", "   THE TRE EM");
 8000af6:	4a70      	ldr	r2, [pc, #448]	; (8000cb8 <menucard+0x2e8>)
 8000af8:	4970      	ldr	r1, [pc, #448]	; (8000cbc <menucard+0x2ec>)
 8000afa:	4863      	ldr	r0, [pc, #396]	; (8000c88 <menucard+0x2b8>)
 8000afc:	f7ff fe7e 	bl	80007fc <CLCD_Display>
							break;
 8000b00:	e00c      	b.n	8000b1c <menucard+0x14c>
						case 2:
							CLCD_Display(&LCD1, "   THE NGUOI LON", "=> THE TRE EM");
 8000b02:	4a6f      	ldr	r2, [pc, #444]	; (8000cc0 <menucard+0x2f0>)
 8000b04:	496a      	ldr	r1, [pc, #424]	; (8000cb0 <menucard+0x2e0>)
 8000b06:	4860      	ldr	r0, [pc, #384]	; (8000c88 <menucard+0x2b8>)
 8000b08:	f7ff fe78 	bl	80007fc <CLCD_Display>
							break;
 8000b0c:	e006      	b.n	8000b1c <menucard+0x14c>
						default:
							CLCD_Display(&LCD1, "   THE TRE EM", "=> BACK");
 8000b0e:	4a6d      	ldr	r2, [pc, #436]	; (8000cc4 <menucard+0x2f4>)
 8000b10:	4969      	ldr	r1, [pc, #420]	; (8000cb8 <menucard+0x2e8>)
 8000b12:	485d      	ldr	r0, [pc, #372]	; (8000c88 <menucard+0x2b8>)
 8000b14:	f7ff fe72 	bl	80007fc <CLCD_Display>
							break;
 8000b18:	e000      	b.n	8000b1c <menucard+0x14c>
						}
					}
 8000b1a:	bf00      	nop
					if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8000b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b20:	4862      	ldr	r0, [pc, #392]	; (8000cac <menucard+0x2dc>)
 8000b22:	f003 fe8b 	bl	800483c <checkbuton>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f000 8287 	beq.w	800103c <menucard+0x66c>
					{
						exitmenu = Delaymenu;
 8000b2e:	4b53      	ldr	r3, [pc, #332]	; (8000c7c <menucard+0x2ac>)
 8000b30:	221e      	movs	r2, #30
 8000b32:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 8000b34:	7dbb      	ldrb	r3, [r7, #22]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d003      	beq.n	8000b42 <menucard+0x172>
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	f000 8148 	beq.w	8000dd0 <menucard+0x400>
 8000b40:	e279      	b.n	8001036 <menucard+0x666>
						{
						case 1:
							CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 8000b42:	4a61      	ldr	r2, [pc, #388]	; (8000cc8 <menucard+0x2f8>)
 8000b44:	4961      	ldr	r1, [pc, #388]	; (8000ccc <menucard+0x2fc>)
 8000b46:	4850      	ldr	r0, [pc, #320]	; (8000c88 <menucard+0x2b8>)
 8000b48:	f7ff fe58 	bl	80007fc <CLCD_Display>
							uint8_t statusadd1 = 1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 8000b54:	e132      	b.n	8000dbc <menucard+0x3ec>
							{
								if (exitmenu == 0)
 8000b56:	4b49      	ldr	r3, [pc, #292]	; (8000c7c <menucard+0x2ac>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d108      	bne.n	8000b70 <menucard+0x1a0>
								{
									CLCD_Clear(&LCD1);
 8000b5e:	484a      	ldr	r0, [pc, #296]	; (8000c88 <menucard+0x2b8>)
 8000b60:	f7ff fe2e 	bl	80007c0 <CLCD_Clear>
									HAL_Delay(1000);
 8000b64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b68:	f003 ff7a 	bl	8004a60 <HAL_Delay>
									return;
 8000b6c:	f000 bf67 	b.w	8001a3e <menucard+0x106e>
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8000b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b74:	4845      	ldr	r0, [pc, #276]	; (8000c8c <menucard+0x2bc>)
 8000b76:	f003 fe61 	bl	800483c <checkbuton>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d039      	beq.n	8000bf4 <menucard+0x224>
								{
									exitmenu = Delaymenu;
 8000b80:	4b3e      	ldr	r3, [pc, #248]	; (8000c7c <menucard+0x2ac>)
 8000b82:	221e      	movs	r2, #30
 8000b84:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 8000b86:	7d3b      	ldrb	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 8000b8c:	7d3b      	ldrb	r3, [r7, #20]
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d801      	bhi.n	8000b96 <menucard+0x1c6>
 8000b92:	7d3b      	ldrb	r3, [r7, #20]
 8000b94:	e000      	b.n	8000b98 <menucard+0x1c8>
 8000b96:	2300      	movs	r3, #0
 8000b98:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 8000b9a:	7d3b      	ldrb	r3, [r7, #20]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	2b03      	cmp	r3, #3
 8000ba0:	d822      	bhi.n	8000be8 <menucard+0x218>
 8000ba2:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <menucard+0x1d8>)
 8000ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba8:	08000bb9 	.word	0x08000bb9
 8000bac:	08000bc5 	.word	0x08000bc5
 8000bb0:	08000bd1 	.word	0x08000bd1
 8000bb4:	08000bdd 	.word	0x08000bdd
									{
									case 1:
										CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 8000bb8:	4a43      	ldr	r2, [pc, #268]	; (8000cc8 <menucard+0x2f8>)
 8000bba:	4944      	ldr	r1, [pc, #272]	; (8000ccc <menucard+0x2fc>)
 8000bbc:	4832      	ldr	r0, [pc, #200]	; (8000c88 <menucard+0x2b8>)
 8000bbe:	f7ff fe1d 	bl	80007fc <CLCD_Display>
										break;
 8000bc2:	e018      	b.n	8000bf6 <menucard+0x226>
									case 2:
										CLCD_Display(&LCD1, "=>  THE 2 ", "    THE 3 ");
 8000bc4:	4a42      	ldr	r2, [pc, #264]	; (8000cd0 <menucard+0x300>)
 8000bc6:	4943      	ldr	r1, [pc, #268]	; (8000cd4 <menucard+0x304>)
 8000bc8:	482f      	ldr	r0, [pc, #188]	; (8000c88 <menucard+0x2b8>)
 8000bca:	f7ff fe17 	bl	80007fc <CLCD_Display>
										break;
 8000bce:	e012      	b.n	8000bf6 <menucard+0x226>
									case 3:
										CLCD_Display(&LCD1, "=>  THE 3 ", "    THE 4 ");
 8000bd0:	4a41      	ldr	r2, [pc, #260]	; (8000cd8 <menucard+0x308>)
 8000bd2:	4942      	ldr	r1, [pc, #264]	; (8000cdc <menucard+0x30c>)
 8000bd4:	482c      	ldr	r0, [pc, #176]	; (8000c88 <menucard+0x2b8>)
 8000bd6:	f7ff fe11 	bl	80007fc <CLCD_Display>
										break;
 8000bda:	e00c      	b.n	8000bf6 <menucard+0x226>
									case 4:
										CLCD_Display(&LCD1, "=>  THE 4 ", "    BACK ");
 8000bdc:	4a40      	ldr	r2, [pc, #256]	; (8000ce0 <menucard+0x310>)
 8000bde:	4941      	ldr	r1, [pc, #260]	; (8000ce4 <menucard+0x314>)
 8000be0:	4829      	ldr	r0, [pc, #164]	; (8000c88 <menucard+0x2b8>)
 8000be2:	f7ff fe0b 	bl	80007fc <CLCD_Display>
										break;
 8000be6:	e006      	b.n	8000bf6 <menucard+0x226>
									default:
										CLCD_Display(&LCD1, "    THE 4 ", "=>  BACK ");
 8000be8:	4a3f      	ldr	r2, [pc, #252]	; (8000ce8 <menucard+0x318>)
 8000bea:	493b      	ldr	r1, [pc, #236]	; (8000cd8 <menucard+0x308>)
 8000bec:	4826      	ldr	r0, [pc, #152]	; (8000c88 <menucard+0x2b8>)
 8000bee:	f7ff fe05 	bl	80007fc <CLCD_Display>
										break;
 8000bf2:	e000      	b.n	8000bf6 <menucard+0x226>
									}
								}
 8000bf4:	bf00      	nop
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	482c      	ldr	r0, [pc, #176]	; (8000cac <menucard+0x2dc>)
 8000bfc:	f003 fe1e 	bl	800483c <checkbuton>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 80d9 	beq.w	8000dba <menucard+0x3ea>
								{
									exitmenu = Delaymenu;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <menucard+0x2ac>)
 8000c0a:	221e      	movs	r2, #30
 8000c0c:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8000c0e:	7dbb      	ldrb	r3, [r7, #22]
 8000c10:	011b      	lsls	r3, r3, #4
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	7d3b      	ldrb	r3, [r7, #20]
 8000c16:	4413      	add	r3, r2
 8000c18:	70bb      	strb	r3, [r7, #2]
									switch (statusadd1)
 8000c1a:	7d3b      	ldrb	r3, [r7, #20]
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	2b03      	cmp	r3, #3
 8000c20:	f200 80c8 	bhi.w	8000db4 <menucard+0x3e4>
 8000c24:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <menucard+0x25c>)
 8000c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2a:	bf00      	nop
 8000c2c:	08000c3d 	.word	0x08000c3d
 8000c30:	08000cf5 	.word	0x08000cf5
 8000c34:	08000d35 	.word	0x08000d35
 8000c38:	08000d75 	.word	0x08000d75
									{
									case 1:
										if (CheckKey(keyadd1) != 0)
 8000c3c:	78bb      	ldrb	r3, [r7, #2]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 f8b6 	bl	8002db0 <CheckKey>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00e      	beq.n	8000c68 <menucard+0x298>
										{
											CLCD_Display(&LCD1, "  DA CO THE 1 ", "");
 8000c4a:	4a28      	ldr	r2, [pc, #160]	; (8000cec <menucard+0x31c>)
 8000c4c:	4928      	ldr	r1, [pc, #160]	; (8000cf0 <menucard+0x320>)
 8000c4e:	480e      	ldr	r0, [pc, #56]	; (8000c88 <menucard+0x2b8>)
 8000c50:	f7ff fdd4 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8000c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c58:	f003 ff02 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 8000c5c:	4a1a      	ldr	r2, [pc, #104]	; (8000cc8 <menucard+0x2f8>)
 8000c5e:	491b      	ldr	r1, [pc, #108]	; (8000ccc <menucard+0x2fc>)
 8000c60:	4809      	ldr	r0, [pc, #36]	; (8000c88 <menucard+0x2b8>)
 8000c62:	f7ff fdcb 	bl	80007fc <CLCD_Display>
 8000c66:	e0a9      	b.n	8000dbc <menucard+0x3ec>
										}
										else
										{
											adduid(keyadd1);
 8000c68:	78bb      	ldrb	r3, [r7, #2]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 ff74 	bl	8002b58 <adduid>
											CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <menucard+0x2f8>)
 8000c72:	4916      	ldr	r1, [pc, #88]	; (8000ccc <menucard+0x2fc>)
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <menucard+0x2b8>)
 8000c76:	f7ff fdc1 	bl	80007fc <CLCD_Display>
										}
										break;
 8000c7a:	e09f      	b.n	8000dbc <menucard+0x3ec>
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	0800db10 	.word	0x0800db10
 8000c84:	0800db24 	.word	0x0800db24
 8000c88:	20000348 	.word	0x20000348
 8000c8c:	40010c00 	.word	0x40010c00
 8000c90:	0800db38 	.word	0x0800db38
 8000c94:	0800db44 	.word	0x0800db44
 8000c98:	0800db54 	.word	0x0800db54
 8000c9c:	0800db60 	.word	0x0800db60
 8000ca0:	0800db70 	.word	0x0800db70
 8000ca4:	0800db7c 	.word	0x0800db7c
 8000ca8:	0800db88 	.word	0x0800db88
 8000cac:	40010800 	.word	0x40010800
 8000cb0:	0800db94 	.word	0x0800db94
 8000cb4:	0800dba8 	.word	0x0800dba8
 8000cb8:	0800dbb4 	.word	0x0800dbb4
 8000cbc:	0800dbc4 	.word	0x0800dbc4
 8000cc0:	0800dbd8 	.word	0x0800dbd8
 8000cc4:	0800dbe8 	.word	0x0800dbe8
 8000cc8:	0800dbf0 	.word	0x0800dbf0
 8000ccc:	0800dbfc 	.word	0x0800dbfc
 8000cd0:	0800dc08 	.word	0x0800dc08
 8000cd4:	0800dc14 	.word	0x0800dc14
 8000cd8:	0800dc20 	.word	0x0800dc20
 8000cdc:	0800dc2c 	.word	0x0800dc2c
 8000ce0:	0800dc38 	.word	0x0800dc38
 8000ce4:	0800dc44 	.word	0x0800dc44
 8000ce8:	0800dc50 	.word	0x0800dc50
 8000cec:	0800dc5c 	.word	0x0800dc5c
 8000cf0:	0800dc60 	.word	0x0800dc60
									case 2:
										if (CheckKey(keyadd1) != 0)
 8000cf4:	78bb      	ldrb	r3, [r7, #2]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 f85a 	bl	8002db0 <CheckKey>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00e      	beq.n	8000d20 <menucard+0x350>
										{
											CLCD_Display(&LCD1, "  DA CO THE 2 ", "");
 8000d02:	4aad      	ldr	r2, [pc, #692]	; (8000fb8 <menucard+0x5e8>)
 8000d04:	49ad      	ldr	r1, [pc, #692]	; (8000fbc <menucard+0x5ec>)
 8000d06:	48ae      	ldr	r0, [pc, #696]	; (8000fc0 <menucard+0x5f0>)
 8000d08:	f7ff fd78 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8000d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d10:	f003 fea6 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  THE 2 ", "    THE 3 ");
 8000d14:	4aab      	ldr	r2, [pc, #684]	; (8000fc4 <menucard+0x5f4>)
 8000d16:	49ac      	ldr	r1, [pc, #688]	; (8000fc8 <menucard+0x5f8>)
 8000d18:	48a9      	ldr	r0, [pc, #676]	; (8000fc0 <menucard+0x5f0>)
 8000d1a:	f7ff fd6f 	bl	80007fc <CLCD_Display>
 8000d1e:	e04d      	b.n	8000dbc <menucard+0x3ec>
										}
										else
										{
											adduid(keyadd1);
 8000d20:	78bb      	ldrb	r3, [r7, #2]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 ff18 	bl	8002b58 <adduid>
											CLCD_Display(&LCD1, "=>  THE 2 ", "    THE 3 ");
 8000d28:	4aa6      	ldr	r2, [pc, #664]	; (8000fc4 <menucard+0x5f4>)
 8000d2a:	49a7      	ldr	r1, [pc, #668]	; (8000fc8 <menucard+0x5f8>)
 8000d2c:	48a4      	ldr	r0, [pc, #656]	; (8000fc0 <menucard+0x5f0>)
 8000d2e:	f7ff fd65 	bl	80007fc <CLCD_Display>
										}
										break;
 8000d32:	e043      	b.n	8000dbc <menucard+0x3ec>
									case 3:
										if (CheckKey(keyadd1) != 0)
 8000d34:	78bb      	ldrb	r3, [r7, #2]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 f83a 	bl	8002db0 <CheckKey>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00e      	beq.n	8000d60 <menucard+0x390>
										{
											CLCD_Display(&LCD1, "  DA CO THE 3 ", "");
 8000d42:	4a9d      	ldr	r2, [pc, #628]	; (8000fb8 <menucard+0x5e8>)
 8000d44:	49a1      	ldr	r1, [pc, #644]	; (8000fcc <menucard+0x5fc>)
 8000d46:	489e      	ldr	r0, [pc, #632]	; (8000fc0 <menucard+0x5f0>)
 8000d48:	f7ff fd58 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8000d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d50:	f003 fe86 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  THE 3 ", "    THE 4 ");
 8000d54:	4a9e      	ldr	r2, [pc, #632]	; (8000fd0 <menucard+0x600>)
 8000d56:	499f      	ldr	r1, [pc, #636]	; (8000fd4 <menucard+0x604>)
 8000d58:	4899      	ldr	r0, [pc, #612]	; (8000fc0 <menucard+0x5f0>)
 8000d5a:	f7ff fd4f 	bl	80007fc <CLCD_Display>
 8000d5e:	e02d      	b.n	8000dbc <menucard+0x3ec>
										}
										else
										{
											adduid(keyadd1);
 8000d60:	78bb      	ldrb	r3, [r7, #2]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 fef8 	bl	8002b58 <adduid>
											CLCD_Display(&LCD1, "=>  THE 3 ", "    THE 4 ");
 8000d68:	4a99      	ldr	r2, [pc, #612]	; (8000fd0 <menucard+0x600>)
 8000d6a:	499a      	ldr	r1, [pc, #616]	; (8000fd4 <menucard+0x604>)
 8000d6c:	4894      	ldr	r0, [pc, #592]	; (8000fc0 <menucard+0x5f0>)
 8000d6e:	f7ff fd45 	bl	80007fc <CLCD_Display>
										}
										break;
 8000d72:	e023      	b.n	8000dbc <menucard+0x3ec>
									case 4:
										if (CheckKey(keyadd1) != 0)
 8000d74:	78bb      	ldrb	r3, [r7, #2]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 f81a 	bl	8002db0 <CheckKey>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00e      	beq.n	8000da0 <menucard+0x3d0>
										{
											CLCD_Display(&LCD1, "  DA CO THE 4 ", "");
 8000d82:	4a8d      	ldr	r2, [pc, #564]	; (8000fb8 <menucard+0x5e8>)
 8000d84:	4994      	ldr	r1, [pc, #592]	; (8000fd8 <menucard+0x608>)
 8000d86:	488e      	ldr	r0, [pc, #568]	; (8000fc0 <menucard+0x5f0>)
 8000d88:	f7ff fd38 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8000d8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d90:	f003 fe66 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  THE 4 ", "    BACK ");
 8000d94:	4a91      	ldr	r2, [pc, #580]	; (8000fdc <menucard+0x60c>)
 8000d96:	4992      	ldr	r1, [pc, #584]	; (8000fe0 <menucard+0x610>)
 8000d98:	4889      	ldr	r0, [pc, #548]	; (8000fc0 <menucard+0x5f0>)
 8000d9a:	f7ff fd2f 	bl	80007fc <CLCD_Display>
 8000d9e:	e00d      	b.n	8000dbc <menucard+0x3ec>
										}
										else
										{
											adduid(keyadd1);
 8000da0:	78bb      	ldrb	r3, [r7, #2]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 fed8 	bl	8002b58 <adduid>
											CLCD_Display(&LCD1, "=>  THE 4 ", "    BACK ");
 8000da8:	4a8c      	ldr	r2, [pc, #560]	; (8000fdc <menucard+0x60c>)
 8000daa:	498d      	ldr	r1, [pc, #564]	; (8000fe0 <menucard+0x610>)
 8000dac:	4884      	ldr	r0, [pc, #528]	; (8000fc0 <menucard+0x5f0>)
 8000dae:	f7ff fd25 	bl	80007fc <CLCD_Display>
										}
										break;
 8000db2:	e003      	b.n	8000dbc <menucard+0x3ec>
									default:
										back11 = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	74fb      	strb	r3, [r7, #19]
										break;
 8000db8:	e000      	b.n	8000dbc <menucard+0x3ec>
									}
								}
 8000dba:	bf00      	nop
							while (back11 == 1)
 8000dbc:	7cfb      	ldrb	r3, [r7, #19]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	f43f aec9 	beq.w	8000b56 <menucard+0x186>
							}
							CLCD_Display(&LCD1, "=> THE NGUOI LON", "   THE TRE EM");
 8000dc4:	4a87      	ldr	r2, [pc, #540]	; (8000fe4 <menucard+0x614>)
 8000dc6:	4988      	ldr	r1, [pc, #544]	; (8000fe8 <menucard+0x618>)
 8000dc8:	487d      	ldr	r0, [pc, #500]	; (8000fc0 <menucard+0x5f0>)
 8000dca:	f7ff fd17 	bl	80007fc <CLCD_Display>
							break;
 8000dce:	e136      	b.n	800103e <menucard+0x66e>
						case 2:
							CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 8000dd0:	4a86      	ldr	r2, [pc, #536]	; (8000fec <menucard+0x61c>)
 8000dd2:	4987      	ldr	r1, [pc, #540]	; (8000ff0 <menucard+0x620>)
 8000dd4:	487a      	ldr	r0, [pc, #488]	; (8000fc0 <menucard+0x5f0>)
 8000dd6:	f7ff fd11 	bl	80007fc <CLCD_Display>
							uint8_t statusadd2 = 1;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 8000dde:	2301      	movs	r3, #1
 8000de0:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 8000de2:	e11f      	b.n	8001024 <menucard+0x654>
							{
								if (exitmenu == 0)
 8000de4:	4b83      	ldr	r3, [pc, #524]	; (8000ff4 <menucard+0x624>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d108      	bne.n	8000dfe <menucard+0x42e>
								{
									CLCD_Clear(&LCD1);
 8000dec:	4874      	ldr	r0, [pc, #464]	; (8000fc0 <menucard+0x5f0>)
 8000dee:	f7ff fce7 	bl	80007c0 <CLCD_Clear>
									HAL_Delay(1000);
 8000df2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df6:	f003 fe33 	bl	8004a60 <HAL_Delay>
									return;
 8000dfa:	f000 be20 	b.w	8001a3e <menucard+0x106e>
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8000dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e02:	487d      	ldr	r0, [pc, #500]	; (8000ff8 <menucard+0x628>)
 8000e04:	f003 fd1a 	bl	800483c <checkbuton>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d03a      	beq.n	8000e84 <menucard+0x4b4>
								{
									exitmenu = Delaymenu;
 8000e0e:	4b79      	ldr	r3, [pc, #484]	; (8000ff4 <menucard+0x624>)
 8000e10:	221e      	movs	r2, #30
 8000e12:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 8000e14:	7cbb      	ldrb	r3, [r7, #18]
 8000e16:	3301      	adds	r3, #1
 8000e18:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 8000e1a:	7cbb      	ldrb	r3, [r7, #18]
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d801      	bhi.n	8000e24 <menucard+0x454>
 8000e20:	7cbb      	ldrb	r3, [r7, #18]
 8000e22:	e000      	b.n	8000e26 <menucard+0x456>
 8000e24:	2300      	movs	r3, #0
 8000e26:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 8000e28:	7cbb      	ldrb	r3, [r7, #18]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d823      	bhi.n	8000e78 <menucard+0x4a8>
 8000e30:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <menucard+0x468>)
 8000e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e36:	bf00      	nop
 8000e38:	08000e49 	.word	0x08000e49
 8000e3c:	08000e55 	.word	0x08000e55
 8000e40:	08000e61 	.word	0x08000e61
 8000e44:	08000e6d 	.word	0x08000e6d
									{
									case 1:
										CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 8000e48:	4a68      	ldr	r2, [pc, #416]	; (8000fec <menucard+0x61c>)
 8000e4a:	4969      	ldr	r1, [pc, #420]	; (8000ff0 <menucard+0x620>)
 8000e4c:	485c      	ldr	r0, [pc, #368]	; (8000fc0 <menucard+0x5f0>)
 8000e4e:	f7ff fcd5 	bl	80007fc <CLCD_Display>
										break;
 8000e52:	e018      	b.n	8000e86 <menucard+0x4b6>
									case 2:
										CLCD_Display(&LCD1, "=>  THE 2 ", "    THE 3 ");
 8000e54:	4a5b      	ldr	r2, [pc, #364]	; (8000fc4 <menucard+0x5f4>)
 8000e56:	495c      	ldr	r1, [pc, #368]	; (8000fc8 <menucard+0x5f8>)
 8000e58:	4859      	ldr	r0, [pc, #356]	; (8000fc0 <menucard+0x5f0>)
 8000e5a:	f7ff fccf 	bl	80007fc <CLCD_Display>
										break;
 8000e5e:	e012      	b.n	8000e86 <menucard+0x4b6>
									case 3:
										CLCD_Display(&LCD1, "=>  THE 3 ", "    THE 4 ");
 8000e60:	4a5b      	ldr	r2, [pc, #364]	; (8000fd0 <menucard+0x600>)
 8000e62:	495c      	ldr	r1, [pc, #368]	; (8000fd4 <menucard+0x604>)
 8000e64:	4856      	ldr	r0, [pc, #344]	; (8000fc0 <menucard+0x5f0>)
 8000e66:	f7ff fcc9 	bl	80007fc <CLCD_Display>
										break;
 8000e6a:	e00c      	b.n	8000e86 <menucard+0x4b6>
									case 4:
										CLCD_Display(&LCD1, "=>  THE 4 ", "    BACK ");
 8000e6c:	4a5b      	ldr	r2, [pc, #364]	; (8000fdc <menucard+0x60c>)
 8000e6e:	495c      	ldr	r1, [pc, #368]	; (8000fe0 <menucard+0x610>)
 8000e70:	4853      	ldr	r0, [pc, #332]	; (8000fc0 <menucard+0x5f0>)
 8000e72:	f7ff fcc3 	bl	80007fc <CLCD_Display>
										break;
 8000e76:	e006      	b.n	8000e86 <menucard+0x4b6>
									default:
										CLCD_Display(&LCD1, "    THE 4 ", "=>  BACK ");
 8000e78:	4a60      	ldr	r2, [pc, #384]	; (8000ffc <menucard+0x62c>)
 8000e7a:	4955      	ldr	r1, [pc, #340]	; (8000fd0 <menucard+0x600>)
 8000e7c:	4850      	ldr	r0, [pc, #320]	; (8000fc0 <menucard+0x5f0>)
 8000e7e:	f7ff fcbd 	bl	80007fc <CLCD_Display>
										break;
 8000e82:	e000      	b.n	8000e86 <menucard+0x4b6>
									}
								}
 8000e84:	bf00      	nop
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8000e86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e8a:	485d      	ldr	r0, [pc, #372]	; (8001000 <menucard+0x630>)
 8000e8c:	f003 fcd6 	bl	800483c <checkbuton>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 80c5 	beq.w	8001022 <menucard+0x652>
								{
									exitmenu = Delaymenu;
 8000e98:	4b56      	ldr	r3, [pc, #344]	; (8000ff4 <menucard+0x624>)
 8000e9a:	221e      	movs	r2, #30
 8000e9c:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8000e9e:	7dbb      	ldrb	r3, [r7, #22]
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	7cbb      	ldrb	r3, [r7, #18]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	70fb      	strb	r3, [r7, #3]
									switch (statusadd2)
 8000eaa:	7cbb      	ldrb	r3, [r7, #18]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	f200 80b4 	bhi.w	800101c <menucard+0x64c>
 8000eb4:	a201      	add	r2, pc, #4	; (adr r2, 8000ebc <menucard+0x4ec>)
 8000eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eba:	bf00      	nop
 8000ebc:	08000ecd 	.word	0x08000ecd
 8000ec0:	08000f0d 	.word	0x08000f0d
 8000ec4:	08000f4d 	.word	0x08000f4d
 8000ec8:	08000f8d 	.word	0x08000f8d
									{
									case 1:
										if (CheckKey(keyadd2) != 0)
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 ff6e 	bl	8002db0 <CheckKey>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00e      	beq.n	8000ef8 <menucard+0x528>
										{
											CLCD_Display(&LCD1, "  DA CO THE 1 ", "");
 8000eda:	4a37      	ldr	r2, [pc, #220]	; (8000fb8 <menucard+0x5e8>)
 8000edc:	4949      	ldr	r1, [pc, #292]	; (8001004 <menucard+0x634>)
 8000ede:	4838      	ldr	r0, [pc, #224]	; (8000fc0 <menucard+0x5f0>)
 8000ee0:	f7ff fc8c 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8000ee4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee8:	f003 fdba 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 8000eec:	4a3f      	ldr	r2, [pc, #252]	; (8000fec <menucard+0x61c>)
 8000eee:	4940      	ldr	r1, [pc, #256]	; (8000ff0 <menucard+0x620>)
 8000ef0:	4833      	ldr	r0, [pc, #204]	; (8000fc0 <menucard+0x5f0>)
 8000ef2:	f7ff fc83 	bl	80007fc <CLCD_Display>
 8000ef6:	e095      	b.n	8001024 <menucard+0x654>
										}
										else
										{
											adduid(keyadd2);
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fe2c 	bl	8002b58 <adduid>
											CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 8000f00:	4a3a      	ldr	r2, [pc, #232]	; (8000fec <menucard+0x61c>)
 8000f02:	493b      	ldr	r1, [pc, #236]	; (8000ff0 <menucard+0x620>)
 8000f04:	482e      	ldr	r0, [pc, #184]	; (8000fc0 <menucard+0x5f0>)
 8000f06:	f7ff fc79 	bl	80007fc <CLCD_Display>
										}
										break;
 8000f0a:	e08b      	b.n	8001024 <menucard+0x654>
									case 2:
										if (CheckKey(keyadd2) != 0)
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 ff4e 	bl	8002db0 <CheckKey>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00e      	beq.n	8000f38 <menucard+0x568>
										{
											CLCD_Display(&LCD1, "  DA CO THE 2 ", "");
 8000f1a:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <menucard+0x5e8>)
 8000f1c:	4927      	ldr	r1, [pc, #156]	; (8000fbc <menucard+0x5ec>)
 8000f1e:	4828      	ldr	r0, [pc, #160]	; (8000fc0 <menucard+0x5f0>)
 8000f20:	f7ff fc6c 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8000f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f28:	f003 fd9a 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  THE 2 ", "    THE 3 ");
 8000f2c:	4a25      	ldr	r2, [pc, #148]	; (8000fc4 <menucard+0x5f4>)
 8000f2e:	4926      	ldr	r1, [pc, #152]	; (8000fc8 <menucard+0x5f8>)
 8000f30:	4823      	ldr	r0, [pc, #140]	; (8000fc0 <menucard+0x5f0>)
 8000f32:	f7ff fc63 	bl	80007fc <CLCD_Display>
 8000f36:	e075      	b.n	8001024 <menucard+0x654>
										}
										else
										{
											adduid(keyadd2);
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 fe0c 	bl	8002b58 <adduid>
											CLCD_Display(&LCD1, "=>  THE 2 ", "    THE 3 ");
 8000f40:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <menucard+0x5f4>)
 8000f42:	4921      	ldr	r1, [pc, #132]	; (8000fc8 <menucard+0x5f8>)
 8000f44:	481e      	ldr	r0, [pc, #120]	; (8000fc0 <menucard+0x5f0>)
 8000f46:	f7ff fc59 	bl	80007fc <CLCD_Display>
										}
										break;
 8000f4a:	e06b      	b.n	8001024 <menucard+0x654>
									case 3:
										if (CheckKey(keyadd2) != 0)
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 ff2e 	bl	8002db0 <CheckKey>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00e      	beq.n	8000f78 <menucard+0x5a8>
										{
											CLCD_Display(&LCD1, "  DA CO THE 3 ", "");
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <menucard+0x5e8>)
 8000f5c:	491b      	ldr	r1, [pc, #108]	; (8000fcc <menucard+0x5fc>)
 8000f5e:	4818      	ldr	r0, [pc, #96]	; (8000fc0 <menucard+0x5f0>)
 8000f60:	f7ff fc4c 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8000f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f68:	f003 fd7a 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  THE 3 ", "    THE 4 ");
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <menucard+0x600>)
 8000f6e:	4919      	ldr	r1, [pc, #100]	; (8000fd4 <menucard+0x604>)
 8000f70:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <menucard+0x5f0>)
 8000f72:	f7ff fc43 	bl	80007fc <CLCD_Display>
 8000f76:	e055      	b.n	8001024 <menucard+0x654>
										}
										else
										{
											adduid(keyadd2);
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fdec 	bl	8002b58 <adduid>
											CLCD_Display(&LCD1, "=>  THE 3 ", "    THE 4 ");
 8000f80:	4a13      	ldr	r2, [pc, #76]	; (8000fd0 <menucard+0x600>)
 8000f82:	4914      	ldr	r1, [pc, #80]	; (8000fd4 <menucard+0x604>)
 8000f84:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <menucard+0x5f0>)
 8000f86:	f7ff fc39 	bl	80007fc <CLCD_Display>
										}
										break;
 8000f8a:	e04b      	b.n	8001024 <menucard+0x654>
									case 4:
										if (CheckKey(keyadd2) != 0)
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 ff0e 	bl	8002db0 <CheckKey>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d036      	beq.n	8001008 <menucard+0x638>
										{
											CLCD_Display(&LCD1, "  DA CO THE 4 ", "");
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <menucard+0x5e8>)
 8000f9c:	490e      	ldr	r1, [pc, #56]	; (8000fd8 <menucard+0x608>)
 8000f9e:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <menucard+0x5f0>)
 8000fa0:	f7ff fc2c 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8000fa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa8:	f003 fd5a 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  THE 4 ", "    BACK ");
 8000fac:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <menucard+0x60c>)
 8000fae:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <menucard+0x610>)
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <menucard+0x5f0>)
 8000fb2:	f7ff fc23 	bl	80007fc <CLCD_Display>
 8000fb6:	e035      	b.n	8001024 <menucard+0x654>
 8000fb8:	0800dc5c 	.word	0x0800dc5c
 8000fbc:	0800dc70 	.word	0x0800dc70
 8000fc0:	20000348 	.word	0x20000348
 8000fc4:	0800dc08 	.word	0x0800dc08
 8000fc8:	0800dc14 	.word	0x0800dc14
 8000fcc:	0800dc80 	.word	0x0800dc80
 8000fd0:	0800dc20 	.word	0x0800dc20
 8000fd4:	0800dc2c 	.word	0x0800dc2c
 8000fd8:	0800dc90 	.word	0x0800dc90
 8000fdc:	0800dc38 	.word	0x0800dc38
 8000fe0:	0800dc44 	.word	0x0800dc44
 8000fe4:	0800dbb4 	.word	0x0800dbb4
 8000fe8:	0800dbc4 	.word	0x0800dbc4
 8000fec:	0800dbf0 	.word	0x0800dbf0
 8000ff0:	0800dbfc 	.word	0x0800dbfc
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	40010c00 	.word	0x40010c00
 8000ffc:	0800dc50 	.word	0x0800dc50
 8001000:	40010800 	.word	0x40010800
 8001004:	0800dc60 	.word	0x0800dc60
										}
										else
										{
											adduid(keyadd2);
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	4618      	mov	r0, r3
 800100c:	f001 fda4 	bl	8002b58 <adduid>
											CLCD_Display(&LCD1, "=>  THE 4 ", "    BACK ");
 8001010:	4aaa      	ldr	r2, [pc, #680]	; (80012bc <menucard+0x8ec>)
 8001012:	49ab      	ldr	r1, [pc, #684]	; (80012c0 <menucard+0x8f0>)
 8001014:	48ab      	ldr	r0, [pc, #684]	; (80012c4 <menucard+0x8f4>)
 8001016:	f7ff fbf1 	bl	80007fc <CLCD_Display>
										}
										break;
 800101a:	e003      	b.n	8001024 <menucard+0x654>
									default:
										back12 = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	747b      	strb	r3, [r7, #17]
										break;
 8001020:	e000      	b.n	8001024 <menucard+0x654>
									}
								}
 8001022:	bf00      	nop
							while (back12 == 1)
 8001024:	7c7b      	ldrb	r3, [r7, #17]
 8001026:	2b01      	cmp	r3, #1
 8001028:	f43f aedc 	beq.w	8000de4 <menucard+0x414>
							}
							CLCD_Display(&LCD1, "   THE NGUOI LON", "=> THE TRE EM");
 800102c:	4aa6      	ldr	r2, [pc, #664]	; (80012c8 <menucard+0x8f8>)
 800102e:	49a7      	ldr	r1, [pc, #668]	; (80012cc <menucard+0x8fc>)
 8001030:	48a4      	ldr	r0, [pc, #656]	; (80012c4 <menucard+0x8f4>)
 8001032:	f7ff fbe3 	bl	80007fc <CLCD_Display>
						default:
							back = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	757b      	strb	r3, [r7, #21]
							break;
 800103a:	e000      	b.n	800103e <menucard+0x66e>
						}
					}
 800103c:	bf00      	nop
				while (back == 1)
 800103e:	7d7b      	ldrb	r3, [r7, #21]
 8001040:	2b01      	cmp	r3, #1
 8001042:	f43f ad30 	beq.w	8000aa6 <menucard+0xd6>
				}
				CLCD_Display(&LCD1, "=>  THEM THE", "    XOA THE");
 8001046:	4aa2      	ldr	r2, [pc, #648]	; (80012d0 <menucard+0x900>)
 8001048:	49a2      	ldr	r1, [pc, #648]	; (80012d4 <menucard+0x904>)
 800104a:	489e      	ldr	r0, [pc, #632]	; (80012c4 <menucard+0x8f4>)
 800104c:	f7ff fbd6 	bl	80007fc <CLCD_Display>
				break;
 8001050:	f000 bced 	b.w	8001a2e <menucard+0x105e>
			case 1:
				CLCD_Display(&LCD1, "     SELECT ", "   XOA 1 THE");
 8001054:	4aa0      	ldr	r2, [pc, #640]	; (80012d8 <menucard+0x908>)
 8001056:	49a1      	ldr	r1, [pc, #644]	; (80012dc <menucard+0x90c>)
 8001058:	489a      	ldr	r0, [pc, #616]	; (80012c4 <menucard+0x8f4>)
 800105a:	f7ff fbcf 	bl	80007fc <CLCD_Display>
				uint8_t statusremove = -1;
 800105e:	23ff      	movs	r3, #255	; 0xff
 8001060:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 8001066:	f000 bccb 	b.w	8001a00 <menucard+0x1030>
				{
					if (exitmenu == 0)
 800106a:	4b9d      	ldr	r3, [pc, #628]	; (80012e0 <menucard+0x910>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d108      	bne.n	8001084 <menucard+0x6b4>
					{
						CLCD_Clear(&LCD1);
 8001072:	4894      	ldr	r0, [pc, #592]	; (80012c4 <menucard+0x8f4>)
 8001074:	f7ff fba4 	bl	80007c0 <CLCD_Clear>
						HAL_Delay(1000);
 8001078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107c:	f003 fcf0 	bl	8004a60 <HAL_Delay>
						return;
 8001080:	f000 bcdd 	b.w	8001a3e <menucard+0x106e>
					}
					if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001088:	4896      	ldr	r0, [pc, #600]	; (80012e4 <menucard+0x914>)
 800108a:	f003 fbd7 	bl	800483c <checkbuton>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d039      	beq.n	8001108 <menucard+0x738>
					{
						exitmenu = Delaymenu;
 8001094:	4b92      	ldr	r3, [pc, #584]	; (80012e0 <menucard+0x910>)
 8001096:	221e      	movs	r2, #30
 8001098:	701a      	strb	r2, [r3, #0]
						statusremove++;
 800109a:	7c3b      	ldrb	r3, [r7, #16]
 800109c:	3301      	adds	r3, #1
 800109e:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 80010a0:	7c3b      	ldrb	r3, [r7, #16]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d801      	bhi.n	80010aa <menucard+0x6da>
 80010a6:	7c3b      	ldrb	r3, [r7, #16]
 80010a8:	e000      	b.n	80010ac <menucard+0x6dc>
 80010aa:	2300      	movs	r3, #0
 80010ac:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 80010ae:	7c3b      	ldrb	r3, [r7, #16]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <menucard+0x6ea>
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d006      	beq.n	80010c6 <menucard+0x6f6>
 80010b8:	e020      	b.n	80010fc <menucard+0x72c>
						{
						case 0:
							CLCD_Display(&LCD1, "=> XOA 1 THE", "   XOA TAT CA");
 80010ba:	4a8b      	ldr	r2, [pc, #556]	; (80012e8 <menucard+0x918>)
 80010bc:	498b      	ldr	r1, [pc, #556]	; (80012ec <menucard+0x91c>)
 80010be:	4881      	ldr	r0, [pc, #516]	; (80012c4 <menucard+0x8f4>)
 80010c0:	f7ff fb9c 	bl	80007fc <CLCD_Display>
							break;
 80010c4:	e021      	b.n	800110a <menucard+0x73a>
						case 1:
							CLCD_Display(&LCD1, "   XOA 1 THE", "=> XOA TAT CA");
 80010c6:	4a8a      	ldr	r2, [pc, #552]	; (80012f0 <menucard+0x920>)
 80010c8:	4983      	ldr	r1, [pc, #524]	; (80012d8 <menucard+0x908>)
 80010ca:	487e      	ldr	r0, [pc, #504]	; (80012c4 <menucard+0x8f4>)
 80010cc:	f7ff fb96 	bl	80007fc <CLCD_Display>
							CLCD_Clear(&LCD1);
 80010d0:	487c      	ldr	r0, [pc, #496]	; (80012c4 <menucard+0x8f4>)
 80010d2:	f7ff fb75 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	487a      	ldr	r0, [pc, #488]	; (80012c4 <menucard+0x8f4>)
 80010dc:	f7ff faf2 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   XOA 1 THE");
 80010e0:	497d      	ldr	r1, [pc, #500]	; (80012d8 <menucard+0x908>)
 80010e2:	4878      	ldr	r0, [pc, #480]	; (80012c4 <menucard+0x8f4>)
 80010e4:	f7ff fb55 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2100      	movs	r1, #0
 80010ec:	4875      	ldr	r0, [pc, #468]	; (80012c4 <menucard+0x8f4>)
 80010ee:	f7ff fae9 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> XOA TAT CA");
 80010f2:	497f      	ldr	r1, [pc, #508]	; (80012f0 <menucard+0x920>)
 80010f4:	4873      	ldr	r0, [pc, #460]	; (80012c4 <menucard+0x8f4>)
 80010f6:	f7ff fb4c 	bl	8000792 <CLCD_WriteString>
							break;
 80010fa:	e006      	b.n	800110a <menucard+0x73a>
						default:
							CLCD_Display(&LCD1, "   XOA TAT CA", "=> BACK");
 80010fc:	4a7d      	ldr	r2, [pc, #500]	; (80012f4 <menucard+0x924>)
 80010fe:	497a      	ldr	r1, [pc, #488]	; (80012e8 <menucard+0x918>)
 8001100:	4870      	ldr	r0, [pc, #448]	; (80012c4 <menucard+0x8f4>)
 8001102:	f7ff fb7b 	bl	80007fc <CLCD_Display>
							break;
 8001106:	e000      	b.n	800110a <menucard+0x73a>
						}
					}
 8001108:	bf00      	nop
					if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 800110a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110e:	487a      	ldr	r0, [pc, #488]	; (80012f8 <menucard+0x928>)
 8001110:	f003 fb94 	bl	800483c <checkbuton>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8471 	beq.w	80019fe <menucard+0x102e>
					{
						exitmenu = Delaymenu;
 800111c:	4b70      	ldr	r3, [pc, #448]	; (80012e0 <menucard+0x910>)
 800111e:	221e      	movs	r2, #30
 8001120:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 8001122:	7c3b      	ldrb	r3, [r7, #16]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <menucard+0x762>
 8001128:	2b01      	cmp	r3, #1
 800112a:	f000 845d 	beq.w	80019e8 <menucard+0x1018>
 800112e:	f000 bc63 	b.w	80019f8 <menucard+0x1028>
						{
						case 0:
							CLCD_Display(&LCD1, "=> CHON THE", "   QUET THE");
 8001132:	4a72      	ldr	r2, [pc, #456]	; (80012fc <menucard+0x92c>)
 8001134:	4972      	ldr	r1, [pc, #456]	; (8001300 <menucard+0x930>)
 8001136:	4863      	ldr	r0, [pc, #396]	; (80012c4 <menucard+0x8f4>)
 8001138:	f7ff fb60 	bl	80007fc <CLCD_Display>
							uint8_t statusrm1 = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 8001140:	2301      	movs	r3, #1
 8001142:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 8001144:	f000 bc46 	b.w	80019d4 <menucard+0x1004>
							{
								if (exitmenu == 0)
 8001148:	4b65      	ldr	r3, [pc, #404]	; (80012e0 <menucard+0x910>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d108      	bne.n	8001162 <menucard+0x792>
								{
									CLCD_Clear(&LCD1);
 8001150:	485c      	ldr	r0, [pc, #368]	; (80012c4 <menucard+0x8f4>)
 8001152:	f7ff fb35 	bl	80007c0 <CLCD_Clear>
									HAL_Delay(1000);
 8001156:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115a:	f003 fc81 	bl	8004a60 <HAL_Delay>
									return;
 800115e:	f000 bc6e 	b.w	8001a3e <menucard+0x106e>
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001166:	485f      	ldr	r0, [pc, #380]	; (80012e4 <menucard+0x914>)
 8001168:	f003 fb68 	bl	800483c <checkbuton>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d021      	beq.n	80011b6 <menucard+0x7e6>
								{
									statusrm1++;
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	3301      	adds	r3, #1
 8001176:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d801      	bhi.n	8001182 <menucard+0x7b2>
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	e000      	b.n	8001184 <menucard+0x7b4>
 8001182:	2300      	movs	r3, #0
 8001184:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <menucard+0x7c2>
 800118c:	2b01      	cmp	r3, #1
 800118e:	d006      	beq.n	800119e <menucard+0x7ce>
 8001190:	e00b      	b.n	80011aa <menucard+0x7da>
									{
									case 0:
										CLCD_Display(&LCD1, "=> CHON THE", "   QUET THE");
 8001192:	4a5a      	ldr	r2, [pc, #360]	; (80012fc <menucard+0x92c>)
 8001194:	495a      	ldr	r1, [pc, #360]	; (8001300 <menucard+0x930>)
 8001196:	484b      	ldr	r0, [pc, #300]	; (80012c4 <menucard+0x8f4>)
 8001198:	f7ff fb30 	bl	80007fc <CLCD_Display>
										break;
 800119c:	e00c      	b.n	80011b8 <menucard+0x7e8>
									case 1:
										CLCD_Display(&LCD1, "   CHON THE", "=> QUET THE");
 800119e:	4a59      	ldr	r2, [pc, #356]	; (8001304 <menucard+0x934>)
 80011a0:	4959      	ldr	r1, [pc, #356]	; (8001308 <menucard+0x938>)
 80011a2:	4848      	ldr	r0, [pc, #288]	; (80012c4 <menucard+0x8f4>)
 80011a4:	f7ff fb2a 	bl	80007fc <CLCD_Display>
										;
										break;
 80011a8:	e006      	b.n	80011b8 <menucard+0x7e8>
									default:
										CLCD_Display(&LCD1, "   QUET THE", "=> BACK");
 80011aa:	4a52      	ldr	r2, [pc, #328]	; (80012f4 <menucard+0x924>)
 80011ac:	4953      	ldr	r1, [pc, #332]	; (80012fc <menucard+0x92c>)
 80011ae:	4845      	ldr	r0, [pc, #276]	; (80012c4 <menucard+0x8f4>)
 80011b0:	f7ff fb24 	bl	80007fc <CLCD_Display>
										break;
 80011b4:	e000      	b.n	80011b8 <menucard+0x7e8>
									}
								}
 80011b6:	bf00      	nop
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 80011b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011bc:	484e      	ldr	r0, [pc, #312]	; (80012f8 <menucard+0x928>)
 80011be:	f003 fb3d 	bl	800483c <checkbuton>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 8404 	beq.w	80019d2 <menucard+0x1002>
								{
									exitmenu = Delaymenu;
 80011ca:	4b45      	ldr	r3, [pc, #276]	; (80012e0 <menucard+0x910>)
 80011cc:	221e      	movs	r2, #30
 80011ce:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 80011d0:	7bbb      	ldrb	r3, [r7, #14]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <menucard+0x80e>
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	f000 836a 	beq.w	80018b0 <menucard+0xee0>
 80011dc:	e3f6      	b.n	80019cc <menucard+0xffc>
									{
									case 0:
										CLCD_Display(&LCD1, "=> THE NGUOI LON", "   THE TRE EM");
 80011de:	4a4b      	ldr	r2, [pc, #300]	; (800130c <menucard+0x93c>)
 80011e0:	494b      	ldr	r1, [pc, #300]	; (8001310 <menucard+0x940>)
 80011e2:	4838      	ldr	r0, [pc, #224]	; (80012c4 <menucard+0x8f4>)
 80011e4:	f7ff fb0a 	bl	80007fc <CLCD_Display>
										uint8_t statusadd = 1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 80011f0:	e354      	b.n	800189c <menucard+0xecc>
										{
											if (exitmenu == 0)
 80011f2:	4b3b      	ldr	r3, [pc, #236]	; (80012e0 <menucard+0x910>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d108      	bne.n	800120c <menucard+0x83c>
											{
												CLCD_Clear(&LCD1);
 80011fa:	4832      	ldr	r0, [pc, #200]	; (80012c4 <menucard+0x8f4>)
 80011fc:	f7ff fae0 	bl	80007c0 <CLCD_Clear>
												HAL_Delay(1000);
 8001200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001204:	f003 fc2c 	bl	8004a60 <HAL_Delay>
												return;
 8001208:	f000 bc19 	b.w	8001a3e <menucard+0x106e>
											}
											if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 800120c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001210:	4834      	ldr	r0, [pc, #208]	; (80012e4 <menucard+0x914>)
 8001212:	f003 fb13 	bl	800483c <checkbuton>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d024      	beq.n	8001266 <menucard+0x896>
											{
												exitmenu = Delaymenu;
 800121c:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <menucard+0x910>)
 800121e:	221e      	movs	r2, #30
 8001220:	701a      	strb	r2, [r3, #0]
												statusadd++;
 8001222:	7b3b      	ldrb	r3, [r7, #12]
 8001224:	3301      	adds	r3, #1
 8001226:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 8001228:	7b3b      	ldrb	r3, [r7, #12]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d801      	bhi.n	8001232 <menucard+0x862>
 800122e:	7b3b      	ldrb	r3, [r7, #12]
 8001230:	e000      	b.n	8001234 <menucard+0x864>
 8001232:	2300      	movs	r3, #0
 8001234:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d002      	beq.n	8001242 <menucard+0x872>
 800123c:	2b02      	cmp	r3, #2
 800123e:	d006      	beq.n	800124e <menucard+0x87e>
 8001240:	e00b      	b.n	800125a <menucard+0x88a>
												{
												case 1:
													CLCD_Display(&LCD1, "=> THE NGUOI LON", "   THE TRE EM");
 8001242:	4a32      	ldr	r2, [pc, #200]	; (800130c <menucard+0x93c>)
 8001244:	4932      	ldr	r1, [pc, #200]	; (8001310 <menucard+0x940>)
 8001246:	481f      	ldr	r0, [pc, #124]	; (80012c4 <menucard+0x8f4>)
 8001248:	f7ff fad8 	bl	80007fc <CLCD_Display>
													break;
 800124c:	e00c      	b.n	8001268 <menucard+0x898>
												case 2:
													CLCD_Display(&LCD1, "   THE NGUOI LON", "=> THE TRE EM");
 800124e:	4a1e      	ldr	r2, [pc, #120]	; (80012c8 <menucard+0x8f8>)
 8001250:	491e      	ldr	r1, [pc, #120]	; (80012cc <menucard+0x8fc>)
 8001252:	481c      	ldr	r0, [pc, #112]	; (80012c4 <menucard+0x8f4>)
 8001254:	f7ff fad2 	bl	80007fc <CLCD_Display>
													break;
 8001258:	e006      	b.n	8001268 <menucard+0x898>
												default:
													CLCD_Display(&LCD1, "   THE TRE EM", "=> BACK");
 800125a:	4a26      	ldr	r2, [pc, #152]	; (80012f4 <menucard+0x924>)
 800125c:	492b      	ldr	r1, [pc, #172]	; (800130c <menucard+0x93c>)
 800125e:	4819      	ldr	r0, [pc, #100]	; (80012c4 <menucard+0x8f4>)
 8001260:	f7ff facc 	bl	80007fc <CLCD_Display>
													break;
 8001264:	e000      	b.n	8001268 <menucard+0x898>
												}
											}
 8001266:	bf00      	nop
											if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126c:	4822      	ldr	r0, [pc, #136]	; (80012f8 <menucard+0x928>)
 800126e:	f003 fae5 	bl	800483c <checkbuton>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 8310 	beq.w	800189a <menucard+0xeca>
											{
												exitmenu = Delaymenu;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <menucard+0x910>)
 800127c:	221e      	movs	r2, #30
 800127e:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 8001280:	7b3b      	ldrb	r3, [r7, #12]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d003      	beq.n	800128e <menucard+0x8be>
 8001286:	2b02      	cmp	r3, #2
 8001288:	f000 819c 	beq.w	80015c4 <menucard+0xbf4>
 800128c:	e302      	b.n	8001894 <menucard+0xec4>
												{
												case 1:
													CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 800128e:	4a21      	ldr	r2, [pc, #132]	; (8001314 <menucard+0x944>)
 8001290:	4921      	ldr	r1, [pc, #132]	; (8001318 <menucard+0x948>)
 8001292:	480c      	ldr	r0, [pc, #48]	; (80012c4 <menucard+0x8f4>)
 8001294:	f7ff fab2 	bl	80007fc <CLCD_Display>
													uint8_t statusadd1 = 1;
 8001298:	2301      	movs	r3, #1
 800129a:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 800129c:	2301      	movs	r3, #1
 800129e:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 80012a0:	e186      	b.n	80015b0 <menucard+0xbe0>
													{
														if (exitmenu == 0)
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <menucard+0x910>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d138      	bne.n	800131c <menucard+0x94c>
														{
															CLCD_Clear(&LCD1);
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <menucard+0x8f4>)
 80012ac:	f7ff fa88 	bl	80007c0 <CLCD_Clear>
															HAL_Delay(1000);
 80012b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b4:	f003 fbd4 	bl	8004a60 <HAL_Delay>
															return;
 80012b8:	e3c1      	b.n	8001a3e <menucard+0x106e>
 80012ba:	bf00      	nop
 80012bc:	0800dc38 	.word	0x0800dc38
 80012c0:	0800dc44 	.word	0x0800dc44
 80012c4:	20000348 	.word	0x20000348
 80012c8:	0800dbd8 	.word	0x0800dbd8
 80012cc:	0800db94 	.word	0x0800db94
 80012d0:	0800db38 	.word	0x0800db38
 80012d4:	0800db44 	.word	0x0800db44
 80012d8:	0800dca0 	.word	0x0800dca0
 80012dc:	0800dcb0 	.word	0x0800dcb0
 80012e0:	20000000 	.word	0x20000000
 80012e4:	40010c00 	.word	0x40010c00
 80012e8:	0800dcc0 	.word	0x0800dcc0
 80012ec:	0800dcd0 	.word	0x0800dcd0
 80012f0:	0800dce0 	.word	0x0800dce0
 80012f4:	0800dbe8 	.word	0x0800dbe8
 80012f8:	40010800 	.word	0x40010800
 80012fc:	0800dcf0 	.word	0x0800dcf0
 8001300:	0800dcfc 	.word	0x0800dcfc
 8001304:	0800dd08 	.word	0x0800dd08
 8001308:	0800dd14 	.word	0x0800dd14
 800130c:	0800dbb4 	.word	0x0800dbb4
 8001310:	0800dbc4 	.word	0x0800dbc4
 8001314:	0800dbf0 	.word	0x0800dbf0
 8001318:	0800dbfc 	.word	0x0800dbfc
														}
														if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 800131c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001320:	48b3      	ldr	r0, [pc, #716]	; (80015f0 <menucard+0xc20>)
 8001322:	f003 fa8b 	bl	800483c <checkbuton>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d039      	beq.n	80013a0 <menucard+0x9d0>
														{
															exitmenu = Delaymenu;
 800132c:	4bb1      	ldr	r3, [pc, #708]	; (80015f4 <menucard+0xc24>)
 800132e:	221e      	movs	r2, #30
 8001330:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 8001332:	7abb      	ldrb	r3, [r7, #10]
 8001334:	3301      	adds	r3, #1
 8001336:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 8001338:	7abb      	ldrb	r3, [r7, #10]
 800133a:	2b04      	cmp	r3, #4
 800133c:	d801      	bhi.n	8001342 <menucard+0x972>
 800133e:	7abb      	ldrb	r3, [r7, #10]
 8001340:	e000      	b.n	8001344 <menucard+0x974>
 8001342:	2300      	movs	r3, #0
 8001344:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8001346:	7abb      	ldrb	r3, [r7, #10]
 8001348:	3b01      	subs	r3, #1
 800134a:	2b03      	cmp	r3, #3
 800134c:	d822      	bhi.n	8001394 <menucard+0x9c4>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <menucard+0x984>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	08001365 	.word	0x08001365
 8001358:	08001371 	.word	0x08001371
 800135c:	0800137d 	.word	0x0800137d
 8001360:	08001389 	.word	0x08001389
															{
															case 1:
																CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 8001364:	4aa4      	ldr	r2, [pc, #656]	; (80015f8 <menucard+0xc28>)
 8001366:	49a5      	ldr	r1, [pc, #660]	; (80015fc <menucard+0xc2c>)
 8001368:	48a5      	ldr	r0, [pc, #660]	; (8001600 <menucard+0xc30>)
 800136a:	f7ff fa47 	bl	80007fc <CLCD_Display>
																break;
 800136e:	e018      	b.n	80013a2 <menucard+0x9d2>
															case 2:
																CLCD_Display(&LCD1, "=>  THE 2 ", "    THE 3 ");
 8001370:	4aa4      	ldr	r2, [pc, #656]	; (8001604 <menucard+0xc34>)
 8001372:	49a5      	ldr	r1, [pc, #660]	; (8001608 <menucard+0xc38>)
 8001374:	48a2      	ldr	r0, [pc, #648]	; (8001600 <menucard+0xc30>)
 8001376:	f7ff fa41 	bl	80007fc <CLCD_Display>
																break;
 800137a:	e012      	b.n	80013a2 <menucard+0x9d2>
															case 3:
																CLCD_Display(&LCD1, "=>  THE 3 ", "    THE 4 ");
 800137c:	4aa3      	ldr	r2, [pc, #652]	; (800160c <menucard+0xc3c>)
 800137e:	49a4      	ldr	r1, [pc, #656]	; (8001610 <menucard+0xc40>)
 8001380:	489f      	ldr	r0, [pc, #636]	; (8001600 <menucard+0xc30>)
 8001382:	f7ff fa3b 	bl	80007fc <CLCD_Display>
																break;
 8001386:	e00c      	b.n	80013a2 <menucard+0x9d2>
															case 4:
																CLCD_Display(&LCD1, "=>  THE 4 ", "    BACK ");
 8001388:	4aa2      	ldr	r2, [pc, #648]	; (8001614 <menucard+0xc44>)
 800138a:	49a3      	ldr	r1, [pc, #652]	; (8001618 <menucard+0xc48>)
 800138c:	489c      	ldr	r0, [pc, #624]	; (8001600 <menucard+0xc30>)
 800138e:	f7ff fa35 	bl	80007fc <CLCD_Display>
																break;
 8001392:	e006      	b.n	80013a2 <menucard+0x9d2>
															default:
																CLCD_Display(&LCD1, "    THE 4 ", "=>  BACK ");
 8001394:	4aa1      	ldr	r2, [pc, #644]	; (800161c <menucard+0xc4c>)
 8001396:	499d      	ldr	r1, [pc, #628]	; (800160c <menucard+0xc3c>)
 8001398:	4899      	ldr	r0, [pc, #612]	; (8001600 <menucard+0xc30>)
 800139a:	f7ff fa2f 	bl	80007fc <CLCD_Display>
																break;
 800139e:	e000      	b.n	80013a2 <menucard+0x9d2>
															}
														}
 80013a0:	bf00      	nop
														if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 80013a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a6:	489e      	ldr	r0, [pc, #632]	; (8001620 <menucard+0xc50>)
 80013a8:	f003 fa48 	bl	800483c <checkbuton>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 80fd 	beq.w	80015ae <menucard+0xbde>
														{
															exitmenu = Delaymenu;
 80013b4:	4b8f      	ldr	r3, [pc, #572]	; (80015f4 <menucard+0xc24>)
 80013b6:	221e      	movs	r2, #30
 80013b8:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 80013ba:	7b3b      	ldrb	r3, [r7, #12]
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	7abb      	ldrb	r3, [r7, #10]
 80013c2:	4413      	add	r3, r2
 80013c4:	713b      	strb	r3, [r7, #4]
															switch (statusadd1)
 80013c6:	7abb      	ldrb	r3, [r7, #10]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	f200 80ec 	bhi.w	80015a8 <menucard+0xbd8>
 80013d0:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <menucard+0xa08>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	080013e9 	.word	0x080013e9
 80013dc:	08001459 	.word	0x08001459
 80013e0:	080014c9 	.word	0x080014c9
 80013e4:	08001539 	.word	0x08001539
															{
															case 1:
																if (CheckKey(keyadd1) == 0)
 80013e8:	793b      	ldrb	r3, [r7, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fce0 	bl	8002db0 <CheckKey>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10e      	bne.n	8001414 <menucard+0xa44>
																{
																	CLCD_Display(&LCD1, "CHUA CO THE 1 ", "");
 80013f6:	4a8b      	ldr	r2, [pc, #556]	; (8001624 <menucard+0xc54>)
 80013f8:	498b      	ldr	r1, [pc, #556]	; (8001628 <menucard+0xc58>)
 80013fa:	4881      	ldr	r0, [pc, #516]	; (8001600 <menucard+0xc30>)
 80013fc:	f7ff f9fe 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 8001400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001404:	f003 fb2c 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 8001408:	4a7b      	ldr	r2, [pc, #492]	; (80015f8 <menucard+0xc28>)
 800140a:	497c      	ldr	r1, [pc, #496]	; (80015fc <menucard+0xc2c>)
 800140c:	487c      	ldr	r0, [pc, #496]	; (8001600 <menucard+0xc30>)
 800140e:	f7ff f9f5 	bl	80007fc <CLCD_Display>
 8001412:	e0cd      	b.n	80015b0 <menucard+0xbe0>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 8001414:	793b      	ldrb	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	f001 fcca 	bl	8002db0 <CheckKey>
 800141c:	4603      	mov	r3, r0
 800141e:	4618      	mov	r0, r3
 8001420:	f001 fcf4 	bl	8002e0c <removeuid>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 8001424:	4a7f      	ldr	r2, [pc, #508]	; (8001624 <menucard+0xc54>)
 8001426:	4981      	ldr	r1, [pc, #516]	; (800162c <menucard+0xc5c>)
 8001428:	4875      	ldr	r0, [pc, #468]	; (8001600 <menucard+0xc30>)
 800142a:	f7ff f9e7 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 800142e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001432:	f003 fb15 	bl	8004a60 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001436:	f003 f90d 	bl	8004654 <checkcountUID>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d105      	bne.n	800144c <menucard+0xa7c>
																	{
																		startadd();
 8001440:	f001 fcf2 	bl	8002e28 <startadd>
																		exitmenu = 0;
 8001444:	4b6b      	ldr	r3, [pc, #428]	; (80015f4 <menucard+0xc24>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	e0b1      	b.n	80015b0 <menucard+0xbe0>
																	}
																	else
																	{
																		CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 800144c:	4a6a      	ldr	r2, [pc, #424]	; (80015f8 <menucard+0xc28>)
 800144e:	496b      	ldr	r1, [pc, #428]	; (80015fc <menucard+0xc2c>)
 8001450:	486b      	ldr	r0, [pc, #428]	; (8001600 <menucard+0xc30>)
 8001452:	f7ff f9d3 	bl	80007fc <CLCD_Display>
																	}
																}
																break;
 8001456:	e0ab      	b.n	80015b0 <menucard+0xbe0>
															case 2:
																if (CheckKey(keyadd1) == 0)
 8001458:	793b      	ldrb	r3, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fca8 	bl	8002db0 <CheckKey>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10e      	bne.n	8001484 <menucard+0xab4>
																{
																	CLCD_Display(&LCD1, "CHUA CO THE 2 ", "");
 8001466:	4a6f      	ldr	r2, [pc, #444]	; (8001624 <menucard+0xc54>)
 8001468:	4971      	ldr	r1, [pc, #452]	; (8001630 <menucard+0xc60>)
 800146a:	4865      	ldr	r0, [pc, #404]	; (8001600 <menucard+0xc30>)
 800146c:	f7ff f9c6 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 8001470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001474:	f003 faf4 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  THE 2 ", "    THE 3 ");
 8001478:	4a62      	ldr	r2, [pc, #392]	; (8001604 <menucard+0xc34>)
 800147a:	4963      	ldr	r1, [pc, #396]	; (8001608 <menucard+0xc38>)
 800147c:	4860      	ldr	r0, [pc, #384]	; (8001600 <menucard+0xc30>)
 800147e:	f7ff f9bd 	bl	80007fc <CLCD_Display>
 8001482:	e095      	b.n	80015b0 <menucard+0xbe0>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 8001484:	793b      	ldrb	r3, [r7, #4]
 8001486:	4618      	mov	r0, r3
 8001488:	f001 fc92 	bl	8002db0 <CheckKey>
 800148c:	4603      	mov	r3, r0
 800148e:	4618      	mov	r0, r3
 8001490:	f001 fcbc 	bl	8002e0c <removeuid>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 8001494:	4a63      	ldr	r2, [pc, #396]	; (8001624 <menucard+0xc54>)
 8001496:	4965      	ldr	r1, [pc, #404]	; (800162c <menucard+0xc5c>)
 8001498:	4859      	ldr	r0, [pc, #356]	; (8001600 <menucard+0xc30>)
 800149a:	f7ff f9af 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 800149e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a2:	f003 fadd 	bl	8004a60 <HAL_Delay>
																	if (checkcountUID() == 0)
 80014a6:	f003 f8d5 	bl	8004654 <checkcountUID>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d105      	bne.n	80014bc <menucard+0xaec>
																	{
																		startadd();
 80014b0:	f001 fcba 	bl	8002e28 <startadd>
																		exitmenu = 0;
 80014b4:	4b4f      	ldr	r3, [pc, #316]	; (80015f4 <menucard+0xc24>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e079      	b.n	80015b0 <menucard+0xbe0>
																	}
																	else
																	{
																		CLCD_Display(&LCD1, "=>  THE 2 ", "    THE 3 ");
 80014bc:	4a51      	ldr	r2, [pc, #324]	; (8001604 <menucard+0xc34>)
 80014be:	4952      	ldr	r1, [pc, #328]	; (8001608 <menucard+0xc38>)
 80014c0:	484f      	ldr	r0, [pc, #316]	; (8001600 <menucard+0xc30>)
 80014c2:	f7ff f99b 	bl	80007fc <CLCD_Display>
																	}
																}
																break;
 80014c6:	e073      	b.n	80015b0 <menucard+0xbe0>
															case 3:
																if (CheckKey(keyadd1) == 0)
 80014c8:	793b      	ldrb	r3, [r7, #4]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 fc70 	bl	8002db0 <CheckKey>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10e      	bne.n	80014f4 <menucard+0xb24>
																{
																	CLCD_Display(&LCD1, "CHUA CO THE 3 ", "");
 80014d6:	4a53      	ldr	r2, [pc, #332]	; (8001624 <menucard+0xc54>)
 80014d8:	4956      	ldr	r1, [pc, #344]	; (8001634 <menucard+0xc64>)
 80014da:	4849      	ldr	r0, [pc, #292]	; (8001600 <menucard+0xc30>)
 80014dc:	f7ff f98e 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 80014e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e4:	f003 fabc 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  THE 3 ", "    THE 4 ");
 80014e8:	4a48      	ldr	r2, [pc, #288]	; (800160c <menucard+0xc3c>)
 80014ea:	4949      	ldr	r1, [pc, #292]	; (8001610 <menucard+0xc40>)
 80014ec:	4844      	ldr	r0, [pc, #272]	; (8001600 <menucard+0xc30>)
 80014ee:	f7ff f985 	bl	80007fc <CLCD_Display>
 80014f2:	e05d      	b.n	80015b0 <menucard+0xbe0>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 80014f4:	793b      	ldrb	r3, [r7, #4]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f001 fc5a 	bl	8002db0 <CheckKey>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 fc84 	bl	8002e0c <removeuid>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 8001504:	4a47      	ldr	r2, [pc, #284]	; (8001624 <menucard+0xc54>)
 8001506:	4949      	ldr	r1, [pc, #292]	; (800162c <menucard+0xc5c>)
 8001508:	483d      	ldr	r0, [pc, #244]	; (8001600 <menucard+0xc30>)
 800150a:	f7ff f977 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 800150e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001512:	f003 faa5 	bl	8004a60 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001516:	f003 f89d 	bl	8004654 <checkcountUID>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d105      	bne.n	800152c <menucard+0xb5c>
																	{
																		startadd();
 8001520:	f001 fc82 	bl	8002e28 <startadd>
																		exitmenu = 0;
 8001524:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <menucard+0xc24>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
 800152a:	e041      	b.n	80015b0 <menucard+0xbe0>
																	}
																	else
																	{
																		CLCD_Display(&LCD1, "=>  THE 3 ", "    THE 4 ");
 800152c:	4a37      	ldr	r2, [pc, #220]	; (800160c <menucard+0xc3c>)
 800152e:	4938      	ldr	r1, [pc, #224]	; (8001610 <menucard+0xc40>)
 8001530:	4833      	ldr	r0, [pc, #204]	; (8001600 <menucard+0xc30>)
 8001532:	f7ff f963 	bl	80007fc <CLCD_Display>
																	}
																}
																break;
 8001536:	e03b      	b.n	80015b0 <menucard+0xbe0>
															case 4:
																if (CheckKey(keyadd1) == 0)
 8001538:	793b      	ldrb	r3, [r7, #4]
 800153a:	4618      	mov	r0, r3
 800153c:	f001 fc38 	bl	8002db0 <CheckKey>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10e      	bne.n	8001564 <menucard+0xb94>
																{
																	CLCD_Display(&LCD1, "CHUA CO THE 4 ", "");
 8001546:	4a37      	ldr	r2, [pc, #220]	; (8001624 <menucard+0xc54>)
 8001548:	493b      	ldr	r1, [pc, #236]	; (8001638 <menucard+0xc68>)
 800154a:	482d      	ldr	r0, [pc, #180]	; (8001600 <menucard+0xc30>)
 800154c:	f7ff f956 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 8001550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001554:	f003 fa84 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  THE 4 ", "    BACK ");
 8001558:	4a2e      	ldr	r2, [pc, #184]	; (8001614 <menucard+0xc44>)
 800155a:	492f      	ldr	r1, [pc, #188]	; (8001618 <menucard+0xc48>)
 800155c:	4828      	ldr	r0, [pc, #160]	; (8001600 <menucard+0xc30>)
 800155e:	f7ff f94d 	bl	80007fc <CLCD_Display>
 8001562:	e025      	b.n	80015b0 <menucard+0xbe0>
																}
																else
																{
																	removeuid(CheckKey(keyadd1));
 8001564:	793b      	ldrb	r3, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f001 fc22 	bl	8002db0 <CheckKey>
 800156c:	4603      	mov	r3, r0
 800156e:	4618      	mov	r0, r3
 8001570:	f001 fc4c 	bl	8002e0c <removeuid>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 8001574:	4a2b      	ldr	r2, [pc, #172]	; (8001624 <menucard+0xc54>)
 8001576:	492d      	ldr	r1, [pc, #180]	; (800162c <menucard+0xc5c>)
 8001578:	4821      	ldr	r0, [pc, #132]	; (8001600 <menucard+0xc30>)
 800157a:	f7ff f93f 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 800157e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001582:	f003 fa6d 	bl	8004a60 <HAL_Delay>
																	if (checkcountUID() == 0)
 8001586:	f003 f865 	bl	8004654 <checkcountUID>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d105      	bne.n	800159c <menucard+0xbcc>
																	{
																		startadd();
 8001590:	f001 fc4a 	bl	8002e28 <startadd>
																		exitmenu = 0;
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <menucard+0xc24>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	e009      	b.n	80015b0 <menucard+0xbe0>
																	}
																	else
																	{
																		CLCD_Display(&LCD1, "=>  THE 4 ", "    BACK ");
 800159c:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <menucard+0xc44>)
 800159e:	491e      	ldr	r1, [pc, #120]	; (8001618 <menucard+0xc48>)
 80015a0:	4817      	ldr	r0, [pc, #92]	; (8001600 <menucard+0xc30>)
 80015a2:	f7ff f92b 	bl	80007fc <CLCD_Display>
																	}
																}
																break;
 80015a6:	e003      	b.n	80015b0 <menucard+0xbe0>
															default:
																back11 = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	727b      	strb	r3, [r7, #9]
																break;
 80015ac:	e000      	b.n	80015b0 <menucard+0xbe0>
															}
														}
 80015ae:	bf00      	nop
													while (back11 == 1)
 80015b0:	7a7b      	ldrb	r3, [r7, #9]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	f43f ae75 	beq.w	80012a2 <menucard+0x8d2>
													}
													CLCD_Display(&LCD1, "=> THE NGUOI LON", "   THE TRE EM");
 80015b8:	4a20      	ldr	r2, [pc, #128]	; (800163c <menucard+0xc6c>)
 80015ba:	4921      	ldr	r1, [pc, #132]	; (8001640 <menucard+0xc70>)
 80015bc:	4810      	ldr	r0, [pc, #64]	; (8001600 <menucard+0xc30>)
 80015be:	f7ff f91d 	bl	80007fc <CLCD_Display>
													break;
 80015c2:	e16b      	b.n	800189c <menucard+0xecc>
												case 2:
													CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 80015c4:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <menucard+0xc28>)
 80015c6:	490d      	ldr	r1, [pc, #52]	; (80015fc <menucard+0xc2c>)
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <menucard+0xc30>)
 80015ca:	f7ff f917 	bl	80007fc <CLCD_Display>
													uint8_t statusadd2 = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 80015d2:	2301      	movs	r3, #1
 80015d4:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 80015d6:	e153      	b.n	8001880 <menucard+0xeb0>
													{
														if (exitmenu == 0)
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <menucard+0xc24>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d131      	bne.n	8001644 <menucard+0xc74>
														{
															CLCD_Clear(&LCD1);
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <menucard+0xc30>)
 80015e2:	f7ff f8ed 	bl	80007c0 <CLCD_Clear>
															HAL_Delay(1000);
 80015e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ea:	f003 fa39 	bl	8004a60 <HAL_Delay>
															return;
 80015ee:	e226      	b.n	8001a3e <menucard+0x106e>
 80015f0:	40010c00 	.word	0x40010c00
 80015f4:	20000000 	.word	0x20000000
 80015f8:	0800dbf0 	.word	0x0800dbf0
 80015fc:	0800dbfc 	.word	0x0800dbfc
 8001600:	20000348 	.word	0x20000348
 8001604:	0800dc08 	.word	0x0800dc08
 8001608:	0800dc14 	.word	0x0800dc14
 800160c:	0800dc20 	.word	0x0800dc20
 8001610:	0800dc2c 	.word	0x0800dc2c
 8001614:	0800dc38 	.word	0x0800dc38
 8001618:	0800dc44 	.word	0x0800dc44
 800161c:	0800dc50 	.word	0x0800dc50
 8001620:	40010800 	.word	0x40010800
 8001624:	0800dc5c 	.word	0x0800dc5c
 8001628:	0800dd20 	.word	0x0800dd20
 800162c:	0800dd30 	.word	0x0800dd30
 8001630:	0800dd40 	.word	0x0800dd40
 8001634:	0800dd50 	.word	0x0800dd50
 8001638:	0800dd60 	.word	0x0800dd60
 800163c:	0800dbb4 	.word	0x0800dbb4
 8001640:	0800dbc4 	.word	0x0800dbc4
														}
														if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001644:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001648:	489d      	ldr	r0, [pc, #628]	; (80018c0 <menucard+0xef0>)
 800164a:	f003 f8f7 	bl	800483c <checkbuton>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d039      	beq.n	80016c8 <menucard+0xcf8>
														{
															exitmenu = Delaymenu;
 8001654:	4b9b      	ldr	r3, [pc, #620]	; (80018c4 <menucard+0xef4>)
 8001656:	221e      	movs	r2, #30
 8001658:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 800165a:	7a3b      	ldrb	r3, [r7, #8]
 800165c:	3301      	adds	r3, #1
 800165e:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 8001660:	7a3b      	ldrb	r3, [r7, #8]
 8001662:	2b04      	cmp	r3, #4
 8001664:	d801      	bhi.n	800166a <menucard+0xc9a>
 8001666:	7a3b      	ldrb	r3, [r7, #8]
 8001668:	e000      	b.n	800166c <menucard+0xc9c>
 800166a:	2300      	movs	r3, #0
 800166c:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 800166e:	7a3b      	ldrb	r3, [r7, #8]
 8001670:	3b01      	subs	r3, #1
 8001672:	2b03      	cmp	r3, #3
 8001674:	d822      	bhi.n	80016bc <menucard+0xcec>
 8001676:	a201      	add	r2, pc, #4	; (adr r2, 800167c <menucard+0xcac>)
 8001678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167c:	0800168d 	.word	0x0800168d
 8001680:	08001699 	.word	0x08001699
 8001684:	080016a5 	.word	0x080016a5
 8001688:	080016b1 	.word	0x080016b1
															{
															case 1:
																CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 800168c:	4a8e      	ldr	r2, [pc, #568]	; (80018c8 <menucard+0xef8>)
 800168e:	498f      	ldr	r1, [pc, #572]	; (80018cc <menucard+0xefc>)
 8001690:	488f      	ldr	r0, [pc, #572]	; (80018d0 <menucard+0xf00>)
 8001692:	f7ff f8b3 	bl	80007fc <CLCD_Display>
																break;
 8001696:	e018      	b.n	80016ca <menucard+0xcfa>
															case 2:
																CLCD_Display(&LCD1, "=>  THE 2 ", "    THE 3 ");
 8001698:	4a8e      	ldr	r2, [pc, #568]	; (80018d4 <menucard+0xf04>)
 800169a:	498f      	ldr	r1, [pc, #572]	; (80018d8 <menucard+0xf08>)
 800169c:	488c      	ldr	r0, [pc, #560]	; (80018d0 <menucard+0xf00>)
 800169e:	f7ff f8ad 	bl	80007fc <CLCD_Display>
																break;
 80016a2:	e012      	b.n	80016ca <menucard+0xcfa>
															case 3:
																CLCD_Display(&LCD1, "=>  THE 3 ", "    THE 4 ");
 80016a4:	4a8d      	ldr	r2, [pc, #564]	; (80018dc <menucard+0xf0c>)
 80016a6:	498e      	ldr	r1, [pc, #568]	; (80018e0 <menucard+0xf10>)
 80016a8:	4889      	ldr	r0, [pc, #548]	; (80018d0 <menucard+0xf00>)
 80016aa:	f7ff f8a7 	bl	80007fc <CLCD_Display>
																break;
 80016ae:	e00c      	b.n	80016ca <menucard+0xcfa>
															case 4:
																CLCD_Display(&LCD1, "=>  THE 4 ", "    BACK ");
 80016b0:	4a8c      	ldr	r2, [pc, #560]	; (80018e4 <menucard+0xf14>)
 80016b2:	498d      	ldr	r1, [pc, #564]	; (80018e8 <menucard+0xf18>)
 80016b4:	4886      	ldr	r0, [pc, #536]	; (80018d0 <menucard+0xf00>)
 80016b6:	f7ff f8a1 	bl	80007fc <CLCD_Display>
																break;
 80016ba:	e006      	b.n	80016ca <menucard+0xcfa>
															default:
																CLCD_Display(&LCD1, "    THE 4 ", "=>  BACK ");
 80016bc:	4a8b      	ldr	r2, [pc, #556]	; (80018ec <menucard+0xf1c>)
 80016be:	4987      	ldr	r1, [pc, #540]	; (80018dc <menucard+0xf0c>)
 80016c0:	4883      	ldr	r0, [pc, #524]	; (80018d0 <menucard+0xf00>)
 80016c2:	f7ff f89b 	bl	80007fc <CLCD_Display>
																break;
 80016c6:	e000      	b.n	80016ca <menucard+0xcfa>
															}
														}
 80016c8:	bf00      	nop
														if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 80016ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ce:	4888      	ldr	r0, [pc, #544]	; (80018f0 <menucard+0xf20>)
 80016d0:	f003 f8b4 	bl	800483c <checkbuton>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80d1 	beq.w	800187e <menucard+0xeae>
														{
															exitmenu = Delaymenu;
 80016dc:	4b79      	ldr	r3, [pc, #484]	; (80018c4 <menucard+0xef4>)
 80016de:	221e      	movs	r2, #30
 80016e0:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 80016e2:	7b3b      	ldrb	r3, [r7, #12]
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	7a3b      	ldrb	r3, [r7, #8]
 80016ea:	4413      	add	r3, r2
 80016ec:	717b      	strb	r3, [r7, #5]
															switch (statusadd2)
 80016ee:	7a3b      	ldrb	r3, [r7, #8]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	f200 80c0 	bhi.w	8001878 <menucard+0xea8>
 80016f8:	a201      	add	r2, pc, #4	; (adr r2, 8001700 <menucard+0xd30>)
 80016fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fe:	bf00      	nop
 8001700:	08001711 	.word	0x08001711
 8001704:	0800176b 	.word	0x0800176b
 8001708:	080017c5 	.word	0x080017c5
 800170c:	0800181f 	.word	0x0800181f
															{
															case 1:
																if (CheckKey(keyadd2) == 0)
 8001710:	797b      	ldrb	r3, [r7, #5]
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fb4c 	bl	8002db0 <CheckKey>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10e      	bne.n	800173c <menucard+0xd6c>
																{
																	CLCD_Display(&LCD1, "CHUA CO THE 1 ", "");
 800171e:	4a75      	ldr	r2, [pc, #468]	; (80018f4 <menucard+0xf24>)
 8001720:	4975      	ldr	r1, [pc, #468]	; (80018f8 <menucard+0xf28>)
 8001722:	486b      	ldr	r0, [pc, #428]	; (80018d0 <menucard+0xf00>)
 8001724:	f7ff f86a 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 8001728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800172c:	f003 f998 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 8001730:	4a65      	ldr	r2, [pc, #404]	; (80018c8 <menucard+0xef8>)
 8001732:	4966      	ldr	r1, [pc, #408]	; (80018cc <menucard+0xefc>)
 8001734:	4866      	ldr	r0, [pc, #408]	; (80018d0 <menucard+0xf00>)
 8001736:	f7ff f861 	bl	80007fc <CLCD_Display>
 800173a:	e0a1      	b.n	8001880 <menucard+0xeb0>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 800173c:	797b      	ldrb	r3, [r7, #5]
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fb36 	bl	8002db0 <CheckKey>
 8001744:	4603      	mov	r3, r0
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fb60 	bl	8002e0c <removeuid>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 800174c:	4a69      	ldr	r2, [pc, #420]	; (80018f4 <menucard+0xf24>)
 800174e:	496b      	ldr	r1, [pc, #428]	; (80018fc <menucard+0xf2c>)
 8001750:	485f      	ldr	r0, [pc, #380]	; (80018d0 <menucard+0xf00>)
 8001752:	f7ff f853 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 8001756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800175a:	f003 f981 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  THE 1 ", "    THE 2 ");
 800175e:	4a5a      	ldr	r2, [pc, #360]	; (80018c8 <menucard+0xef8>)
 8001760:	495a      	ldr	r1, [pc, #360]	; (80018cc <menucard+0xefc>)
 8001762:	485b      	ldr	r0, [pc, #364]	; (80018d0 <menucard+0xf00>)
 8001764:	f7ff f84a 	bl	80007fc <CLCD_Display>
																}
																break;
 8001768:	e08a      	b.n	8001880 <menucard+0xeb0>
															case 2:
																if (CheckKey(keyadd2) == 0)
 800176a:	797b      	ldrb	r3, [r7, #5]
 800176c:	4618      	mov	r0, r3
 800176e:	f001 fb1f 	bl	8002db0 <CheckKey>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10e      	bne.n	8001796 <menucard+0xdc6>
																{
																	CLCD_Display(&LCD1, "CHUA CO THE 2 ", "");
 8001778:	4a5e      	ldr	r2, [pc, #376]	; (80018f4 <menucard+0xf24>)
 800177a:	4961      	ldr	r1, [pc, #388]	; (8001900 <menucard+0xf30>)
 800177c:	4854      	ldr	r0, [pc, #336]	; (80018d0 <menucard+0xf00>)
 800177e:	f7ff f83d 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 8001782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001786:	f003 f96b 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  THE 2 ", "    THE 3 ");
 800178a:	4a52      	ldr	r2, [pc, #328]	; (80018d4 <menucard+0xf04>)
 800178c:	4952      	ldr	r1, [pc, #328]	; (80018d8 <menucard+0xf08>)
 800178e:	4850      	ldr	r0, [pc, #320]	; (80018d0 <menucard+0xf00>)
 8001790:	f7ff f834 	bl	80007fc <CLCD_Display>
 8001794:	e074      	b.n	8001880 <menucard+0xeb0>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 8001796:	797b      	ldrb	r3, [r7, #5]
 8001798:	4618      	mov	r0, r3
 800179a:	f001 fb09 	bl	8002db0 <CheckKey>
 800179e:	4603      	mov	r3, r0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f001 fb33 	bl	8002e0c <removeuid>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 80017a6:	4a53      	ldr	r2, [pc, #332]	; (80018f4 <menucard+0xf24>)
 80017a8:	4954      	ldr	r1, [pc, #336]	; (80018fc <menucard+0xf2c>)
 80017aa:	4849      	ldr	r0, [pc, #292]	; (80018d0 <menucard+0xf00>)
 80017ac:	f7ff f826 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 80017b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017b4:	f003 f954 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  THE 2 ", "    THE 3 ");
 80017b8:	4a46      	ldr	r2, [pc, #280]	; (80018d4 <menucard+0xf04>)
 80017ba:	4947      	ldr	r1, [pc, #284]	; (80018d8 <menucard+0xf08>)
 80017bc:	4844      	ldr	r0, [pc, #272]	; (80018d0 <menucard+0xf00>)
 80017be:	f7ff f81d 	bl	80007fc <CLCD_Display>
																}
																break;
 80017c2:	e05d      	b.n	8001880 <menucard+0xeb0>
															case 3:
																if (CheckKey(keyadd2) == 0)
 80017c4:	797b      	ldrb	r3, [r7, #5]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 faf2 	bl	8002db0 <CheckKey>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10e      	bne.n	80017f0 <menucard+0xe20>
																{
																	CLCD_Display(&LCD1, "CHUA CO THE 3 ", "");
 80017d2:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <menucard+0xf24>)
 80017d4:	494b      	ldr	r1, [pc, #300]	; (8001904 <menucard+0xf34>)
 80017d6:	483e      	ldr	r0, [pc, #248]	; (80018d0 <menucard+0xf00>)
 80017d8:	f7ff f810 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 80017dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017e0:	f003 f93e 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  THE 3 ", "    THE 4 ");
 80017e4:	4a3d      	ldr	r2, [pc, #244]	; (80018dc <menucard+0xf0c>)
 80017e6:	493e      	ldr	r1, [pc, #248]	; (80018e0 <menucard+0xf10>)
 80017e8:	4839      	ldr	r0, [pc, #228]	; (80018d0 <menucard+0xf00>)
 80017ea:	f7ff f807 	bl	80007fc <CLCD_Display>
 80017ee:	e047      	b.n	8001880 <menucard+0xeb0>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 80017f0:	797b      	ldrb	r3, [r7, #5]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 fadc 	bl	8002db0 <CheckKey>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 fb06 	bl	8002e0c <removeuid>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 8001800:	4a3c      	ldr	r2, [pc, #240]	; (80018f4 <menucard+0xf24>)
 8001802:	493e      	ldr	r1, [pc, #248]	; (80018fc <menucard+0xf2c>)
 8001804:	4832      	ldr	r0, [pc, #200]	; (80018d0 <menucard+0xf00>)
 8001806:	f7fe fff9 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 800180a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800180e:	f003 f927 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  THE 3 ", "    THE 4 ");
 8001812:	4a32      	ldr	r2, [pc, #200]	; (80018dc <menucard+0xf0c>)
 8001814:	4932      	ldr	r1, [pc, #200]	; (80018e0 <menucard+0xf10>)
 8001816:	482e      	ldr	r0, [pc, #184]	; (80018d0 <menucard+0xf00>)
 8001818:	f7fe fff0 	bl	80007fc <CLCD_Display>
																}
																break;
 800181c:	e030      	b.n	8001880 <menucard+0xeb0>
															case 4:
																if (CheckKey(keyadd2) == 0)
 800181e:	797b      	ldrb	r3, [r7, #5]
 8001820:	4618      	mov	r0, r3
 8001822:	f001 fac5 	bl	8002db0 <CheckKey>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10e      	bne.n	800184a <menucard+0xe7a>
																{
																	CLCD_Display(&LCD1, "CHUA CO THE 4 ", "");
 800182c:	4a31      	ldr	r2, [pc, #196]	; (80018f4 <menucard+0xf24>)
 800182e:	4936      	ldr	r1, [pc, #216]	; (8001908 <menucard+0xf38>)
 8001830:	4827      	ldr	r0, [pc, #156]	; (80018d0 <menucard+0xf00>)
 8001832:	f7fe ffe3 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 8001836:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800183a:	f003 f911 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  THE 4 ", "    BACK ");
 800183e:	4a29      	ldr	r2, [pc, #164]	; (80018e4 <menucard+0xf14>)
 8001840:	4929      	ldr	r1, [pc, #164]	; (80018e8 <menucard+0xf18>)
 8001842:	4823      	ldr	r0, [pc, #140]	; (80018d0 <menucard+0xf00>)
 8001844:	f7fe ffda 	bl	80007fc <CLCD_Display>
 8001848:	e01a      	b.n	8001880 <menucard+0xeb0>
																}
																else
																{
																	removeuid(CheckKey(keyadd2));
 800184a:	797b      	ldrb	r3, [r7, #5]
 800184c:	4618      	mov	r0, r3
 800184e:	f001 faaf 	bl	8002db0 <CheckKey>
 8001852:	4603      	mov	r3, r0
 8001854:	4618      	mov	r0, r3
 8001856:	f001 fad9 	bl	8002e0c <removeuid>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 800185a:	4a26      	ldr	r2, [pc, #152]	; (80018f4 <menucard+0xf24>)
 800185c:	4927      	ldr	r1, [pc, #156]	; (80018fc <menucard+0xf2c>)
 800185e:	481c      	ldr	r0, [pc, #112]	; (80018d0 <menucard+0xf00>)
 8001860:	f7fe ffcc 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 8001864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001868:	f003 f8fa 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  THE 4 ", "    BACK ");
 800186c:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <menucard+0xf14>)
 800186e:	491e      	ldr	r1, [pc, #120]	; (80018e8 <menucard+0xf18>)
 8001870:	4817      	ldr	r0, [pc, #92]	; (80018d0 <menucard+0xf00>)
 8001872:	f7fe ffc3 	bl	80007fc <CLCD_Display>
																}
																break;
 8001876:	e003      	b.n	8001880 <menucard+0xeb0>
															default:
																back12 = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	71fb      	strb	r3, [r7, #7]
																break;
 800187c:	e000      	b.n	8001880 <menucard+0xeb0>
															}
														}
 800187e:	bf00      	nop
													while (back12 == 1)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	2b01      	cmp	r3, #1
 8001884:	f43f aea8 	beq.w	80015d8 <menucard+0xc08>
													}
													CLCD_Display(&LCD1, "   THE NGUOI LON", "=> THE TRE EM");
 8001888:	4a20      	ldr	r2, [pc, #128]	; (800190c <menucard+0xf3c>)
 800188a:	4921      	ldr	r1, [pc, #132]	; (8001910 <menucard+0xf40>)
 800188c:	4810      	ldr	r0, [pc, #64]	; (80018d0 <menucard+0xf00>)
 800188e:	f7fe ffb5 	bl	80007fc <CLCD_Display>
													break;
 8001892:	e003      	b.n	800189c <menucard+0xecc>
												default:
													backrm10 = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	72fb      	strb	r3, [r7, #11]
													break;
 8001898:	e000      	b.n	800189c <menucard+0xecc>
												}
											}
 800189a:	bf00      	nop
										while (backrm10 == 1)
 800189c:	7afb      	ldrb	r3, [r7, #11]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	f43f aca7 	beq.w	80011f2 <menucard+0x822>
										}
										CLCD_Display(&LCD1, "=> CHON THE", "   QUET THE");
 80018a4:	4a1b      	ldr	r2, [pc, #108]	; (8001914 <menucard+0xf44>)
 80018a6:	491c      	ldr	r1, [pc, #112]	; (8001918 <menucard+0xf48>)
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <menucard+0xf00>)
 80018aa:	f7fe ffa7 	bl	80007fc <CLCD_Display>
										break;
 80018ae:	e091      	b.n	80019d4 <menucard+0x1004>
									case 1:
										CLCD_Display(&LCD1, "QUET THE", "=>  BACK ");
 80018b0:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <menucard+0xf1c>)
 80018b2:	491a      	ldr	r1, [pc, #104]	; (800191c <menucard+0xf4c>)
 80018b4:	4806      	ldr	r0, [pc, #24]	; (80018d0 <menucard+0xf00>)
 80018b6:	f7fe ffa1 	bl	80007fc <CLCD_Display>
										uint8_t rmquet = 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 80018be:	e07c      	b.n	80019ba <menucard+0xfea>
 80018c0:	40010c00 	.word	0x40010c00
 80018c4:	20000000 	.word	0x20000000
 80018c8:	0800dbf0 	.word	0x0800dbf0
 80018cc:	0800dbfc 	.word	0x0800dbfc
 80018d0:	20000348 	.word	0x20000348
 80018d4:	0800dc08 	.word	0x0800dc08
 80018d8:	0800dc14 	.word	0x0800dc14
 80018dc:	0800dc20 	.word	0x0800dc20
 80018e0:	0800dc2c 	.word	0x0800dc2c
 80018e4:	0800dc38 	.word	0x0800dc38
 80018e8:	0800dc44 	.word	0x0800dc44
 80018ec:	0800dc50 	.word	0x0800dc50
 80018f0:	40010800 	.word	0x40010800
 80018f4:	0800dc5c 	.word	0x0800dc5c
 80018f8:	0800dd20 	.word	0x0800dd20
 80018fc:	0800dd30 	.word	0x0800dd30
 8001900:	0800dd40 	.word	0x0800dd40
 8001904:	0800dd50 	.word	0x0800dd50
 8001908:	0800dd60 	.word	0x0800dd60
 800190c:	0800dbd8 	.word	0x0800dbd8
 8001910:	0800db94 	.word	0x0800db94
 8001914:	0800dcf0 	.word	0x0800dcf0
 8001918:	0800dcfc 	.word	0x0800dcfc
 800191c:	0800dd70 	.word	0x0800dd70
										{
											if (TM_MFRC522_Check(IDCard) == MI_OK)
 8001920:	4848      	ldr	r0, [pc, #288]	; (8001a44 <menucard+0x1074>)
 8001922:	f002 fa29 	bl	8003d78 <TM_MFRC522_Check>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d13c      	bne.n	80019a6 <menucard+0xfd6>
											{
												swipesuccess();
 800192c:	f002 ff20 	bl	8004770 <swipesuccess>
												if (CheckListUID(IDCard) != 0)
 8001930:	4844      	ldr	r0, [pc, #272]	; (8001a44 <menucard+0x1074>)
 8001932:	f002 feed 	bl	8004710 <CheckListUID>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d026      	beq.n	800198a <menucard+0xfba>
												{
													removeuid(CheckKey(CheckListUID(IDCard)));
 800193c:	4841      	ldr	r0, [pc, #260]	; (8001a44 <menucard+0x1074>)
 800193e:	f002 fee7 	bl	8004710 <CheckListUID>
 8001942:	4603      	mov	r3, r0
 8001944:	4618      	mov	r0, r3
 8001946:	f001 fa33 	bl	8002db0 <CheckKey>
 800194a:	4603      	mov	r3, r0
 800194c:	4618      	mov	r0, r3
 800194e:	f001 fa5d 	bl	8002e0c <removeuid>
													CLCD_Display(&LCD1, "XOA THANH CONG", "");
 8001952:	4a3d      	ldr	r2, [pc, #244]	; (8001a48 <menucard+0x1078>)
 8001954:	493d      	ldr	r1, [pc, #244]	; (8001a4c <menucard+0x107c>)
 8001956:	483e      	ldr	r0, [pc, #248]	; (8001a50 <menucard+0x1080>)
 8001958:	f7fe ff50 	bl	80007fc <CLCD_Display>
													HAL_Delay(1000);
 800195c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001960:	f003 f87e 	bl	8004a60 <HAL_Delay>
													if (checkcountUID() == 0)
 8001964:	f002 fe76 	bl	8004654 <checkcountUID>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d107      	bne.n	800197e <menucard+0xfae>
													{
														startadd();
 800196e:	f001 fa5b 	bl	8002e28 <startadd>
														rmquet = 1;
 8001972:	2301      	movs	r3, #1
 8001974:	71bb      	strb	r3, [r7, #6]
														exitmenu = 0;
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <menucard+0x1084>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
														return;
 800197c:	e05f      	b.n	8001a3e <menucard+0x106e>
													}else{
														CLCD_Display(&LCD1, "QUET THE", "=>  BACK ");
 800197e:	4a36      	ldr	r2, [pc, #216]	; (8001a58 <menucard+0x1088>)
 8001980:	4936      	ldr	r1, [pc, #216]	; (8001a5c <menucard+0x108c>)
 8001982:	4833      	ldr	r0, [pc, #204]	; (8001a50 <menucard+0x1080>)
 8001984:	f7fe ff3a 	bl	80007fc <CLCD_Display>
 8001988:	e00d      	b.n	80019a6 <menucard+0xfd6>
													}

												}
												else
												{
													CLCD_Display(&LCD1, "THE CHUA THEM", "");
 800198a:	4a2f      	ldr	r2, [pc, #188]	; (8001a48 <menucard+0x1078>)
 800198c:	4934      	ldr	r1, [pc, #208]	; (8001a60 <menucard+0x1090>)
 800198e:	4830      	ldr	r0, [pc, #192]	; (8001a50 <menucard+0x1080>)
 8001990:	f7fe ff34 	bl	80007fc <CLCD_Display>
													HAL_Delay(1000);
 8001994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001998:	f003 f862 	bl	8004a60 <HAL_Delay>
													CLCD_Display(&LCD1, "QUET THE", "=>  BACK ");
 800199c:	4a2e      	ldr	r2, [pc, #184]	; (8001a58 <menucard+0x1088>)
 800199e:	492f      	ldr	r1, [pc, #188]	; (8001a5c <menucard+0x108c>)
 80019a0:	482b      	ldr	r0, [pc, #172]	; (8001a50 <menucard+0x1080>)
 80019a2:	f7fe ff2b 	bl	80007fc <CLCD_Display>
												}
											}
											if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 80019a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019aa:	482e      	ldr	r0, [pc, #184]	; (8001a64 <menucard+0x1094>)
 80019ac:	f002 ff46 	bl	800483c <checkbuton>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <menucard+0xfea>
											{
												rmquet = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 80019ba:	79bb      	ldrb	r3, [r7, #6]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1af      	bne.n	8001920 <menucard+0xf50>
											}
										}
										CLCD_Display(&LCD1, "   CHON THE", "=> QUET THE");;
 80019c0:	4a29      	ldr	r2, [pc, #164]	; (8001a68 <menucard+0x1098>)
 80019c2:	492a      	ldr	r1, [pc, #168]	; (8001a6c <menucard+0x109c>)
 80019c4:	4822      	ldr	r0, [pc, #136]	; (8001a50 <menucard+0x1080>)
 80019c6:	f7fe ff19 	bl	80007fc <CLCD_Display>
										break;
 80019ca:	e003      	b.n	80019d4 <menucard+0x1004>
									default:
										backrm1 = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	737b      	strb	r3, [r7, #13]
										break;
 80019d0:	e000      	b.n	80019d4 <menucard+0x1004>
									}
								}
 80019d2:	bf00      	nop
							while (backrm1 == 1)
 80019d4:	7b7b      	ldrb	r3, [r7, #13]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	f43f abb6 	beq.w	8001148 <menucard+0x778>
							}
							CLCD_Display(&LCD1, "=> XOA 1 THE", "   XOA TAT CA");
 80019dc:	4a24      	ldr	r2, [pc, #144]	; (8001a70 <menucard+0x10a0>)
 80019de:	4925      	ldr	r1, [pc, #148]	; (8001a74 <menucard+0x10a4>)
 80019e0:	481b      	ldr	r0, [pc, #108]	; (8001a50 <menucard+0x1080>)
 80019e2:	f7fe ff0b 	bl	80007fc <CLCD_Display>
							break;
 80019e6:	e00b      	b.n	8001a00 <menucard+0x1030>
						case 1:
							remoall();
 80019e8:	f001 fa94 	bl	8002f14 <remoall>
							startadd();
 80019ec:	f001 fa1c 	bl	8002e28 <startadd>
							exitmenu = 0;
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <menucard+0x1084>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
							break;
 80019f6:	e003      	b.n	8001a00 <menucard+0x1030>
						default:
							backrm = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
							break;
 80019fc:	e000      	b.n	8001a00 <menucard+0x1030>
						}
					}
 80019fe:	bf00      	nop
				while (backrm == 1)
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	f43f ab31 	beq.w	800106a <menucard+0x69a>
				}
				CLCD_Display(&LCD1, "    THEM THE", "=>  XOA THE");
 8001a08:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <menucard+0x10a8>)
 8001a0a:	491c      	ldr	r1, [pc, #112]	; (8001a7c <menucard+0x10ac>)
 8001a0c:	4810      	ldr	r0, [pc, #64]	; (8001a50 <menucard+0x1080>)
 8001a0e:	f7fe fef5 	bl	80007fc <CLCD_Display>
				break;
 8001a12:	e00c      	b.n	8001a2e <menucard+0x105e>
			case 2:
				checkthe();
 8001a14:	f001 f910 	bl	8002c38 <checkthe>
				CLCD_Display(&LCD1, "    XOA THE", "=>  TRA THE");
 8001a18:	4a19      	ldr	r2, [pc, #100]	; (8001a80 <menucard+0x10b0>)
 8001a1a:	491a      	ldr	r1, [pc, #104]	; (8001a84 <menucard+0x10b4>)
 8001a1c:	480c      	ldr	r0, [pc, #48]	; (8001a50 <menucard+0x1080>)
 8001a1e:	f7fe feed 	bl	80007fc <CLCD_Display>
				break;
 8001a22:	e004      	b.n	8001a2e <menucard+0x105e>
			default:
				exitmenu = 0;
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <menucard+0x1084>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
				break;
 8001a2a:	e000      	b.n	8001a2e <menucard+0x105e>
			}
		}
 8001a2c:	bf00      	nop
	while (exitmenu )
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <menucard+0x1084>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f47e afdb 	bne.w	80009ee <menucard+0x1e>
	}
	CLCD_Clear(&LCD1);
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <menucard+0x1080>)
 8001a3a:	f7fe fec1 	bl	80007c0 <CLCD_Clear>
}
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200002b8 	.word	0x200002b8
 8001a48:	0800dc5c 	.word	0x0800dc5c
 8001a4c:	0800dd30 	.word	0x0800dd30
 8001a50:	20000348 	.word	0x20000348
 8001a54:	20000000 	.word	0x20000000
 8001a58:	0800dc50 	.word	0x0800dc50
 8001a5c:	0800dd70 	.word	0x0800dd70
 8001a60:	0800dd7c 	.word	0x0800dd7c
 8001a64:	40010800 	.word	0x40010800
 8001a68:	0800dd08 	.word	0x0800dd08
 8001a6c:	0800dd14 	.word	0x0800dd14
 8001a70:	0800dcc0 	.word	0x0800dcc0
 8001a74:	0800dcd0 	.word	0x0800dcd0
 8001a78:	0800db54 	.word	0x0800db54
 8001a7c:	0800db60 	.word	0x0800db60
 8001a80:	0800db70 	.word	0x0800db70
 8001a84:	0800db38 	.word	0x0800db38

08001a88 <menuface>:

void menuface(void) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
	exitmenu = Delaymenu;
 8001a8e:	4ba9      	ldr	r3, [pc, #676]	; (8001d34 <menuface+0x2ac>)
 8001a90:	221e      	movs	r2, #30
 8001a92:	701a      	strb	r2, [r3, #0]
	uint8_t status = -1;
 8001a94:	23ff      	movs	r3, #255	; 0xff
 8001a96:	75fb      	strb	r3, [r7, #23]
	CLCD_Display(&LCD1, "     CARDID     ", "    THEM FACE    ");
 8001a98:	4aa7      	ldr	r2, [pc, #668]	; (8001d38 <menuface+0x2b0>)
 8001a9a:	49a8      	ldr	r1, [pc, #672]	; (8001d3c <menuface+0x2b4>)
 8001a9c:	48a8      	ldr	r0, [pc, #672]	; (8001d40 <menuface+0x2b8>)
 8001a9e:	f7fe fead 	bl	80007fc <CLCD_Display>
	while (exitmenu )
 8001aa2:	f001 b826 	b.w	8002af2 <menuface+0x106a>
	{
		if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aaa:	48a6      	ldr	r0, [pc, #664]	; (8001d44 <menuface+0x2bc>)
 8001aac:	f002 fec6 	bl	800483c <checkbuton>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d02e      	beq.n	8001b14 <menuface+0x8c>
		{
			exitmenu = Delaymenu;
 8001ab6:	4b9f      	ldr	r3, [pc, #636]	; (8001d34 <menuface+0x2ac>)
 8001ab8:	221e      	movs	r2, #30
 8001aba:	701a      	strb	r2, [r3, #0]
			status++;
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
			status = (status > 3) ? 0 : status;
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d801      	bhi.n	8001acc <menuface+0x44>
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	e000      	b.n	8001ace <menuface+0x46>
 8001acc:	2300      	movs	r3, #0
 8001ace:	75fb      	strb	r3, [r7, #23]
			switch (status)
 8001ad0:	7dfb      	ldrb	r3, [r7, #23]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d012      	beq.n	8001afc <menuface+0x74>
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	dc16      	bgt.n	8001b08 <menuface+0x80>
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <menuface+0x5c>
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d006      	beq.n	8001af0 <menuface+0x68>
 8001ae2:	e011      	b.n	8001b08 <menuface+0x80>
			{
			case 0:
				CLCD_Display(&LCD1, "=>  THEM FACE", "    XOA FACE");
 8001ae4:	4a98      	ldr	r2, [pc, #608]	; (8001d48 <menuface+0x2c0>)
 8001ae6:	4999      	ldr	r1, [pc, #612]	; (8001d4c <menuface+0x2c4>)
 8001ae8:	4895      	ldr	r0, [pc, #596]	; (8001d40 <menuface+0x2b8>)
 8001aea:	f7fe fe87 	bl	80007fc <CLCD_Display>
				break;
 8001aee:	e012      	b.n	8001b16 <menuface+0x8e>
			case 1:
				CLCD_Display(&LCD1, "    THEM FACE", "=>  XOA FACE");
 8001af0:	4a97      	ldr	r2, [pc, #604]	; (8001d50 <menuface+0x2c8>)
 8001af2:	4998      	ldr	r1, [pc, #608]	; (8001d54 <menuface+0x2cc>)
 8001af4:	4892      	ldr	r0, [pc, #584]	; (8001d40 <menuface+0x2b8>)
 8001af6:	f7fe fe81 	bl	80007fc <CLCD_Display>
				break;
 8001afa:	e00c      	b.n	8001b16 <menuface+0x8e>
			case 2:
				CLCD_Display(&LCD1, "    XOA FACE", "=>  TRA FACE");
 8001afc:	4a96      	ldr	r2, [pc, #600]	; (8001d58 <menuface+0x2d0>)
 8001afe:	4992      	ldr	r1, [pc, #584]	; (8001d48 <menuface+0x2c0>)
 8001b00:	488f      	ldr	r0, [pc, #572]	; (8001d40 <menuface+0x2b8>)
 8001b02:	f7fe fe7b 	bl	80007fc <CLCD_Display>
				break;
 8001b06:	e006      	b.n	8001b16 <menuface+0x8e>
			default:
				CLCD_Display(&LCD1, "    TRA FACE", "=>  BACK");
 8001b08:	4a94      	ldr	r2, [pc, #592]	; (8001d5c <menuface+0x2d4>)
 8001b0a:	4995      	ldr	r1, [pc, #596]	; (8001d60 <menuface+0x2d8>)
 8001b0c:	488c      	ldr	r0, [pc, #560]	; (8001d40 <menuface+0x2b8>)
 8001b0e:	f7fe fe75 	bl	80007fc <CLCD_Display>
				break;
 8001b12:	e000      	b.n	8001b16 <menuface+0x8e>
			}
		}
 8001b14:	bf00      	nop
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b1a:	4892      	ldr	r0, [pc, #584]	; (8001d64 <menuface+0x2dc>)
 8001b1c:	f002 fe8e 	bl	800483c <checkbuton>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 87e4 	beq.w	8002af0 <menuface+0x1068>
		{
			exitmenu = Delaymenu;
 8001b28:	4b82      	ldr	r3, [pc, #520]	; (8001d34 <menuface+0x2ac>)
 8001b2a:	221e      	movs	r2, #30
 8001b2c:	701a      	strb	r2, [r3, #0]
			switch (status)
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	f000 87cd 	beq.w	8002ad0 <menuface+0x1048>
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	f300 87d6 	bgt.w	8002ae8 <menuface+0x1060>
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <menuface+0xc2>
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	f000 82e5 	beq.w	8002110 <menuface+0x688>
 8001b46:	f000 bfcf 	b.w	8002ae8 <menuface+0x1060>
			{
			case 0:
				CLCD_Display(&LCD1, "    SELECT ", "FACE NGUOI LON");
 8001b4a:	4a87      	ldr	r2, [pc, #540]	; (8001d68 <menuface+0x2e0>)
 8001b4c:	4987      	ldr	r1, [pc, #540]	; (8001d6c <menuface+0x2e4>)
 8001b4e:	487c      	ldr	r0, [pc, #496]	; (8001d40 <menuface+0x2b8>)
 8001b50:	f7fe fe54 	bl	80007fc <CLCD_Display>
				uint8_t statusadd = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	75bb      	strb	r3, [r7, #22]
				uint8_t back = 1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	757b      	strb	r3, [r7, #21]
				while (back == 1)
 8001b5c:	e2cd      	b.n	80020fa <menuface+0x672>
				{
					if (exitmenu == 0)
 8001b5e:	4b75      	ldr	r3, [pc, #468]	; (8001d34 <menuface+0x2ac>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d108      	bne.n	8001b78 <menuface+0xf0>
					{
						CLCD_Clear(&LCD1);
 8001b66:	4876      	ldr	r0, [pc, #472]	; (8001d40 <menuface+0x2b8>)
 8001b68:	f7fe fe2a 	bl	80007c0 <CLCD_Clear>
						HAL_Delay(1000);
 8001b6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b70:	f002 ff76 	bl	8004a60 <HAL_Delay>
						return;
 8001b74:	f000 bfc5 	b.w	8002b02 <menuface+0x107a>
					}
					if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b7c:	4871      	ldr	r0, [pc, #452]	; (8001d44 <menuface+0x2bc>)
 8001b7e:	f002 fe5d 	bl	800483c <checkbuton>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d024      	beq.n	8001bd2 <menuface+0x14a>
					{
						exitmenu = Delaymenu;
 8001b88:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <menuface+0x2ac>)
 8001b8a:	221e      	movs	r2, #30
 8001b8c:	701a      	strb	r2, [r3, #0]
						statusadd++;
 8001b8e:	7dbb      	ldrb	r3, [r7, #22]
 8001b90:	3301      	adds	r3, #1
 8001b92:	75bb      	strb	r3, [r7, #22]
						statusadd = (statusadd > 2) ? 0 : statusadd;
 8001b94:	7dbb      	ldrb	r3, [r7, #22]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d801      	bhi.n	8001b9e <menuface+0x116>
 8001b9a:	7dbb      	ldrb	r3, [r7, #22]
 8001b9c:	e000      	b.n	8001ba0 <menuface+0x118>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75bb      	strb	r3, [r7, #22]
						switch (statusadd)
 8001ba2:	7dbb      	ldrb	r3, [r7, #22]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d002      	beq.n	8001bae <menuface+0x126>
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d006      	beq.n	8001bba <menuface+0x132>
 8001bac:	e00b      	b.n	8001bc6 <menuface+0x13e>
						{
						case 1:
							CLCD_Display(&LCD1, "=>FACE NGUOI LON", "  FACE TRE EM");
 8001bae:	4a70      	ldr	r2, [pc, #448]	; (8001d70 <menuface+0x2e8>)
 8001bb0:	4970      	ldr	r1, [pc, #448]	; (8001d74 <menuface+0x2ec>)
 8001bb2:	4863      	ldr	r0, [pc, #396]	; (8001d40 <menuface+0x2b8>)
 8001bb4:	f7fe fe22 	bl	80007fc <CLCD_Display>
							break;
 8001bb8:	e00c      	b.n	8001bd4 <menuface+0x14c>
						case 2:
							CLCD_Display(&LCD1, "  FACE NGUOI LON", "=>FACE TRE EM");
 8001bba:	4a6f      	ldr	r2, [pc, #444]	; (8001d78 <menuface+0x2f0>)
 8001bbc:	496f      	ldr	r1, [pc, #444]	; (8001d7c <menuface+0x2f4>)
 8001bbe:	4860      	ldr	r0, [pc, #384]	; (8001d40 <menuface+0x2b8>)
 8001bc0:	f7fe fe1c 	bl	80007fc <CLCD_Display>
							break;
 8001bc4:	e006      	b.n	8001bd4 <menuface+0x14c>
						default:
							CLCD_Display(&LCD1, "  FACE TRE EM", "=> BACK");
 8001bc6:	4a6e      	ldr	r2, [pc, #440]	; (8001d80 <menuface+0x2f8>)
 8001bc8:	4969      	ldr	r1, [pc, #420]	; (8001d70 <menuface+0x2e8>)
 8001bca:	485d      	ldr	r0, [pc, #372]	; (8001d40 <menuface+0x2b8>)
 8001bcc:	f7fe fe16 	bl	80007fc <CLCD_Display>
							break;
 8001bd0:	e000      	b.n	8001bd4 <menuface+0x14c>
						}
					}
 8001bd2:	bf00      	nop
					if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd8:	4862      	ldr	r0, [pc, #392]	; (8001d64 <menuface+0x2dc>)
 8001bda:	f002 fe2f 	bl	800483c <checkbuton>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8289 	beq.w	80020f8 <menuface+0x670>
					{
						exitmenu = Delaymenu;
 8001be6:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <menuface+0x2ac>)
 8001be8:	221e      	movs	r2, #30
 8001bea:	701a      	strb	r2, [r3, #0]
						switch (statusadd)
 8001bec:	7dbb      	ldrb	r3, [r7, #22]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d003      	beq.n	8001bfa <menuface+0x172>
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	f000 814a 	beq.w	8001e8c <menuface+0x404>
 8001bf8:	e27b      	b.n	80020f2 <menuface+0x66a>
						{
						case 1:
							CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8001bfa:	4a62      	ldr	r2, [pc, #392]	; (8001d84 <menuface+0x2fc>)
 8001bfc:	4962      	ldr	r1, [pc, #392]	; (8001d88 <menuface+0x300>)
 8001bfe:	4850      	ldr	r0, [pc, #320]	; (8001d40 <menuface+0x2b8>)
 8001c00:	f7fe fdfc 	bl	80007fc <CLCD_Display>
							uint8_t statusadd1 = 1;
 8001c04:	2301      	movs	r3, #1
 8001c06:	753b      	strb	r3, [r7, #20]
							uint8_t back11 = 1;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	74fb      	strb	r3, [r7, #19]
							while (back11 == 1)
 8001c0c:	e134      	b.n	8001e78 <menuface+0x3f0>
							{
								if (exitmenu == 0)
 8001c0e:	4b49      	ldr	r3, [pc, #292]	; (8001d34 <menuface+0x2ac>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d108      	bne.n	8001c28 <menuface+0x1a0>
								{
									CLCD_Clear(&LCD1);
 8001c16:	484a      	ldr	r0, [pc, #296]	; (8001d40 <menuface+0x2b8>)
 8001c18:	f7fe fdd2 	bl	80007c0 <CLCD_Clear>
									HAL_Delay(1000);
 8001c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c20:	f002 ff1e 	bl	8004a60 <HAL_Delay>
									return;
 8001c24:	f000 bf6d 	b.w	8002b02 <menuface+0x107a>
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c2c:	4845      	ldr	r0, [pc, #276]	; (8001d44 <menuface+0x2bc>)
 8001c2e:	f002 fe05 	bl	800483c <checkbuton>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d039      	beq.n	8001cac <menuface+0x224>
								{
									exitmenu = Delaymenu;
 8001c38:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <menuface+0x2ac>)
 8001c3a:	221e      	movs	r2, #30
 8001c3c:	701a      	strb	r2, [r3, #0]
									statusadd1++;
 8001c3e:	7d3b      	ldrb	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	753b      	strb	r3, [r7, #20]
									statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 8001c44:	7d3b      	ldrb	r3, [r7, #20]
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d801      	bhi.n	8001c4e <menuface+0x1c6>
 8001c4a:	7d3b      	ldrb	r3, [r7, #20]
 8001c4c:	e000      	b.n	8001c50 <menuface+0x1c8>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	753b      	strb	r3, [r7, #20]
									switch (statusadd1)
 8001c52:	7d3b      	ldrb	r3, [r7, #20]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d822      	bhi.n	8001ca0 <menuface+0x218>
 8001c5a:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <menuface+0x1d8>)
 8001c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c60:	08001c71 	.word	0x08001c71
 8001c64:	08001c7d 	.word	0x08001c7d
 8001c68:	08001c89 	.word	0x08001c89
 8001c6c:	08001c95 	.word	0x08001c95
									{
									case 1:
										CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8001c70:	4a44      	ldr	r2, [pc, #272]	; (8001d84 <menuface+0x2fc>)
 8001c72:	4945      	ldr	r1, [pc, #276]	; (8001d88 <menuface+0x300>)
 8001c74:	4832      	ldr	r0, [pc, #200]	; (8001d40 <menuface+0x2b8>)
 8001c76:	f7fe fdc1 	bl	80007fc <CLCD_Display>
										break;
 8001c7a:	e018      	b.n	8001cae <menuface+0x226>
									case 2:
										CLCD_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8001c7c:	4a43      	ldr	r2, [pc, #268]	; (8001d8c <menuface+0x304>)
 8001c7e:	4944      	ldr	r1, [pc, #272]	; (8001d90 <menuface+0x308>)
 8001c80:	482f      	ldr	r0, [pc, #188]	; (8001d40 <menuface+0x2b8>)
 8001c82:	f7fe fdbb 	bl	80007fc <CLCD_Display>
										break;
 8001c86:	e012      	b.n	8001cae <menuface+0x226>
									case 3:
										CLCD_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 8001c88:	4a42      	ldr	r2, [pc, #264]	; (8001d94 <menuface+0x30c>)
 8001c8a:	4943      	ldr	r1, [pc, #268]	; (8001d98 <menuface+0x310>)
 8001c8c:	482c      	ldr	r0, [pc, #176]	; (8001d40 <menuface+0x2b8>)
 8001c8e:	f7fe fdb5 	bl	80007fc <CLCD_Display>
										break;
 8001c92:	e00c      	b.n	8001cae <menuface+0x226>
									case 4:
										CLCD_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8001c94:	4a41      	ldr	r2, [pc, #260]	; (8001d9c <menuface+0x314>)
 8001c96:	4942      	ldr	r1, [pc, #264]	; (8001da0 <menuface+0x318>)
 8001c98:	4829      	ldr	r0, [pc, #164]	; (8001d40 <menuface+0x2b8>)
 8001c9a:	f7fe fdaf 	bl	80007fc <CLCD_Display>
										break;
 8001c9e:	e006      	b.n	8001cae <menuface+0x226>
									default:
										CLCD_Display(&LCD1, "    FACE 4 ", "=>  BACK ");
 8001ca0:	4a40      	ldr	r2, [pc, #256]	; (8001da4 <menuface+0x31c>)
 8001ca2:	493c      	ldr	r1, [pc, #240]	; (8001d94 <menuface+0x30c>)
 8001ca4:	4826      	ldr	r0, [pc, #152]	; (8001d40 <menuface+0x2b8>)
 8001ca6:	f7fe fda9 	bl	80007fc <CLCD_Display>
										break;
 8001caa:	e000      	b.n	8001cae <menuface+0x226>
									}
								}
 8001cac:	bf00      	nop
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb2:	482c      	ldr	r0, [pc, #176]	; (8001d64 <menuface+0x2dc>)
 8001cb4:	f002 fdc2 	bl	800483c <checkbuton>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80db 	beq.w	8001e76 <menuface+0x3ee>
								{
									exitmenu = Delaymenu;
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <menuface+0x2ac>)
 8001cc2:	221e      	movs	r2, #30
 8001cc4:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8001cc6:	7dbb      	ldrb	r3, [r7, #22]
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	7d3b      	ldrb	r3, [r7, #20]
 8001cce:	4413      	add	r3, r2
 8001cd0:	70bb      	strb	r3, [r7, #2]
									switch (statusadd1)
 8001cd2:	7d3b      	ldrb	r3, [r7, #20]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	f200 80ca 	bhi.w	8001e70 <menuface+0x3e8>
 8001cdc:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <menuface+0x25c>)
 8001cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce2:	bf00      	nop
 8001ce4:	08001cf5 	.word	0x08001cf5
 8001ce8:	08001db1 	.word	0x08001db1
 8001cec:	08001df1 	.word	0x08001df1
 8001cf0:	08001e31 	.word	0x08001e31
									{
									case 1:
										if (checkfaceid(keyadd1) != 0)
 8001cf4:	78bb      	ldrb	r3, [r7, #2]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 fa44 	bl	8003184 <checkfaceid>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00e      	beq.n	8001d20 <menuface+0x298>
										{
											CLCD_Display(&LCD1, "  DA CO FACE 1 ", "");
 8001d02:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <menuface+0x320>)
 8001d04:	4929      	ldr	r1, [pc, #164]	; (8001dac <menuface+0x324>)
 8001d06:	480e      	ldr	r0, [pc, #56]	; (8001d40 <menuface+0x2b8>)
 8001d08:	f7fe fd78 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8001d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d10:	f002 fea6 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8001d14:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <menuface+0x2fc>)
 8001d16:	491c      	ldr	r1, [pc, #112]	; (8001d88 <menuface+0x300>)
 8001d18:	4809      	ldr	r0, [pc, #36]	; (8001d40 <menuface+0x2b8>)
 8001d1a:	f7fe fd6f 	bl	80007fc <CLCD_Display>
 8001d1e:	e0ab      	b.n	8001e78 <menuface+0x3f0>
										}
										else
										{
											addface(keyadd1);
 8001d20:	78bb      	ldrb	r3, [r7, #2]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 f992 	bl	800304c <addface>
											CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8001d28:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <menuface+0x2fc>)
 8001d2a:	4917      	ldr	r1, [pc, #92]	; (8001d88 <menuface+0x300>)
 8001d2c:	4804      	ldr	r0, [pc, #16]	; (8001d40 <menuface+0x2b8>)
 8001d2e:	f7fe fd65 	bl	80007fc <CLCD_Display>
										}
										break;
 8001d32:	e0a1      	b.n	8001e78 <menuface+0x3f0>
 8001d34:	20000000 	.word	0x20000000
 8001d38:	0800dd8c 	.word	0x0800dd8c
 8001d3c:	0800db24 	.word	0x0800db24
 8001d40:	20000348 	.word	0x20000348
 8001d44:	40010c00 	.word	0x40010c00
 8001d48:	0800dda0 	.word	0x0800dda0
 8001d4c:	0800ddb0 	.word	0x0800ddb0
 8001d50:	0800ddc0 	.word	0x0800ddc0
 8001d54:	0800ddd0 	.word	0x0800ddd0
 8001d58:	0800dde0 	.word	0x0800dde0
 8001d5c:	0800db7c 	.word	0x0800db7c
 8001d60:	0800ddf0 	.word	0x0800ddf0
 8001d64:	40010800 	.word	0x40010800
 8001d68:	0800de00 	.word	0x0800de00
 8001d6c:	0800dba8 	.word	0x0800dba8
 8001d70:	0800de10 	.word	0x0800de10
 8001d74:	0800de20 	.word	0x0800de20
 8001d78:	0800de34 	.word	0x0800de34
 8001d7c:	0800de44 	.word	0x0800de44
 8001d80:	0800dbe8 	.word	0x0800dbe8
 8001d84:	0800de58 	.word	0x0800de58
 8001d88:	0800de64 	.word	0x0800de64
 8001d8c:	0800de70 	.word	0x0800de70
 8001d90:	0800de7c 	.word	0x0800de7c
 8001d94:	0800de88 	.word	0x0800de88
 8001d98:	0800de94 	.word	0x0800de94
 8001d9c:	0800dc38 	.word	0x0800dc38
 8001da0:	0800dea0 	.word	0x0800dea0
 8001da4:	0800dc50 	.word	0x0800dc50
 8001da8:	0800dc5c 	.word	0x0800dc5c
 8001dac:	0800deac 	.word	0x0800deac
									case 2:
										if (checkfaceid(keyadd1) != 0)
 8001db0:	78bb      	ldrb	r3, [r7, #2]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 f9e6 	bl	8003184 <checkfaceid>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00e      	beq.n	8001ddc <menuface+0x354>
										{
											CLCD_Display(&LCD1, "  DA CO FACE 2 ", "");
 8001dbe:	4aad      	ldr	r2, [pc, #692]	; (8002074 <menuface+0x5ec>)
 8001dc0:	49ad      	ldr	r1, [pc, #692]	; (8002078 <menuface+0x5f0>)
 8001dc2:	48ae      	ldr	r0, [pc, #696]	; (800207c <menuface+0x5f4>)
 8001dc4:	f7fe fd1a 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8001dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dcc:	f002 fe48 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8001dd0:	4aab      	ldr	r2, [pc, #684]	; (8002080 <menuface+0x5f8>)
 8001dd2:	49ac      	ldr	r1, [pc, #688]	; (8002084 <menuface+0x5fc>)
 8001dd4:	48a9      	ldr	r0, [pc, #676]	; (800207c <menuface+0x5f4>)
 8001dd6:	f7fe fd11 	bl	80007fc <CLCD_Display>
 8001dda:	e04d      	b.n	8001e78 <menuface+0x3f0>
										}
										else
										{
											addface(keyadd1);
 8001ddc:	78bb      	ldrb	r3, [r7, #2]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f001 f934 	bl	800304c <addface>
											CLCD_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8001de4:	4aa6      	ldr	r2, [pc, #664]	; (8002080 <menuface+0x5f8>)
 8001de6:	49a7      	ldr	r1, [pc, #668]	; (8002084 <menuface+0x5fc>)
 8001de8:	48a4      	ldr	r0, [pc, #656]	; (800207c <menuface+0x5f4>)
 8001dea:	f7fe fd07 	bl	80007fc <CLCD_Display>
										}
										break;
 8001dee:	e043      	b.n	8001e78 <menuface+0x3f0>
									case 3:
										if (checkfaceid(keyadd1) != 0)
 8001df0:	78bb      	ldrb	r3, [r7, #2]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f001 f9c6 	bl	8003184 <checkfaceid>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00e      	beq.n	8001e1c <menuface+0x394>
										{
											CLCD_Display(&LCD1, "  DA CO FACE 3 ", "");
 8001dfe:	4a9d      	ldr	r2, [pc, #628]	; (8002074 <menuface+0x5ec>)
 8001e00:	49a1      	ldr	r1, [pc, #644]	; (8002088 <menuface+0x600>)
 8001e02:	489e      	ldr	r0, [pc, #632]	; (800207c <menuface+0x5f4>)
 8001e04:	f7fe fcfa 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8001e08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e0c:	f002 fe28 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 8001e10:	4a9e      	ldr	r2, [pc, #632]	; (800208c <menuface+0x604>)
 8001e12:	499f      	ldr	r1, [pc, #636]	; (8002090 <menuface+0x608>)
 8001e14:	4899      	ldr	r0, [pc, #612]	; (800207c <menuface+0x5f4>)
 8001e16:	f7fe fcf1 	bl	80007fc <CLCD_Display>
 8001e1a:	e02d      	b.n	8001e78 <menuface+0x3f0>
										}
										else
										{
											addface(keyadd1);
 8001e1c:	78bb      	ldrb	r3, [r7, #2]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 f914 	bl	800304c <addface>
											CLCD_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 8001e24:	4a99      	ldr	r2, [pc, #612]	; (800208c <menuface+0x604>)
 8001e26:	499a      	ldr	r1, [pc, #616]	; (8002090 <menuface+0x608>)
 8001e28:	4894      	ldr	r0, [pc, #592]	; (800207c <menuface+0x5f4>)
 8001e2a:	f7fe fce7 	bl	80007fc <CLCD_Display>
										}
										break;
 8001e2e:	e023      	b.n	8001e78 <menuface+0x3f0>
									case 4:
										if (checkfaceid(keyadd1) != 0)
 8001e30:	78bb      	ldrb	r3, [r7, #2]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f001 f9a6 	bl	8003184 <checkfaceid>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00e      	beq.n	8001e5c <menuface+0x3d4>
										{
											CLCD_Display(&LCD1, "  DA CO FACE 4 ", "");
 8001e3e:	4a8d      	ldr	r2, [pc, #564]	; (8002074 <menuface+0x5ec>)
 8001e40:	4994      	ldr	r1, [pc, #592]	; (8002094 <menuface+0x60c>)
 8001e42:	488e      	ldr	r0, [pc, #568]	; (800207c <menuface+0x5f4>)
 8001e44:	f7fe fcda 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8001e48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e4c:	f002 fe08 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8001e50:	4a91      	ldr	r2, [pc, #580]	; (8002098 <menuface+0x610>)
 8001e52:	4992      	ldr	r1, [pc, #584]	; (800209c <menuface+0x614>)
 8001e54:	4889      	ldr	r0, [pc, #548]	; (800207c <menuface+0x5f4>)
 8001e56:	f7fe fcd1 	bl	80007fc <CLCD_Display>
 8001e5a:	e00d      	b.n	8001e78 <menuface+0x3f0>
										}
										else
										{
											addface(keyadd1);
 8001e5c:	78bb      	ldrb	r3, [r7, #2]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f001 f8f4 	bl	800304c <addface>
											CLCD_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8001e64:	4a8c      	ldr	r2, [pc, #560]	; (8002098 <menuface+0x610>)
 8001e66:	498d      	ldr	r1, [pc, #564]	; (800209c <menuface+0x614>)
 8001e68:	4884      	ldr	r0, [pc, #528]	; (800207c <menuface+0x5f4>)
 8001e6a:	f7fe fcc7 	bl	80007fc <CLCD_Display>
										}
										break;
 8001e6e:	e003      	b.n	8001e78 <menuface+0x3f0>
									default:
										back11 = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	74fb      	strb	r3, [r7, #19]
										break;
 8001e74:	e000      	b.n	8001e78 <menuface+0x3f0>
									}
								}
 8001e76:	bf00      	nop
							while (back11 == 1)
 8001e78:	7cfb      	ldrb	r3, [r7, #19]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	f43f aec7 	beq.w	8001c0e <menuface+0x186>
							}
							CLCD_Display(&LCD1, "=>FACE NGUOI LON", "  FACE TRE EM");
 8001e80:	4a87      	ldr	r2, [pc, #540]	; (80020a0 <menuface+0x618>)
 8001e82:	4988      	ldr	r1, [pc, #544]	; (80020a4 <menuface+0x61c>)
 8001e84:	487d      	ldr	r0, [pc, #500]	; (800207c <menuface+0x5f4>)
 8001e86:	f7fe fcb9 	bl	80007fc <CLCD_Display>
							break;
 8001e8a:	e136      	b.n	80020fa <menuface+0x672>
						case 2:
							CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8001e8c:	4a86      	ldr	r2, [pc, #536]	; (80020a8 <menuface+0x620>)
 8001e8e:	4987      	ldr	r1, [pc, #540]	; (80020ac <menuface+0x624>)
 8001e90:	487a      	ldr	r0, [pc, #488]	; (800207c <menuface+0x5f4>)
 8001e92:	f7fe fcb3 	bl	80007fc <CLCD_Display>
							uint8_t statusadd2 = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	74bb      	strb	r3, [r7, #18]
							uint8_t back12 = 1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	747b      	strb	r3, [r7, #17]
							while (back12 == 1)
 8001e9e:	e11f      	b.n	80020e0 <menuface+0x658>
							{
								if (exitmenu == 0)
 8001ea0:	4b83      	ldr	r3, [pc, #524]	; (80020b0 <menuface+0x628>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d108      	bne.n	8001eba <menuface+0x432>
								{
									CLCD_Clear(&LCD1);
 8001ea8:	4874      	ldr	r0, [pc, #464]	; (800207c <menuface+0x5f4>)
 8001eaa:	f7fe fc89 	bl	80007c0 <CLCD_Clear>
									HAL_Delay(1000);
 8001eae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eb2:	f002 fdd5 	bl	8004a60 <HAL_Delay>
									return;
 8001eb6:	f000 be24 	b.w	8002b02 <menuface+0x107a>
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8001eba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ebe:	487d      	ldr	r0, [pc, #500]	; (80020b4 <menuface+0x62c>)
 8001ec0:	f002 fcbc 	bl	800483c <checkbuton>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d03a      	beq.n	8001f40 <menuface+0x4b8>
								{
									exitmenu = Delaymenu;
 8001eca:	4b79      	ldr	r3, [pc, #484]	; (80020b0 <menuface+0x628>)
 8001ecc:	221e      	movs	r2, #30
 8001ece:	701a      	strb	r2, [r3, #0]
									statusadd2++;
 8001ed0:	7cbb      	ldrb	r3, [r7, #18]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	74bb      	strb	r3, [r7, #18]
									statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 8001ed6:	7cbb      	ldrb	r3, [r7, #18]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d801      	bhi.n	8001ee0 <menuface+0x458>
 8001edc:	7cbb      	ldrb	r3, [r7, #18]
 8001ede:	e000      	b.n	8001ee2 <menuface+0x45a>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	74bb      	strb	r3, [r7, #18]
									switch (statusadd2)
 8001ee4:	7cbb      	ldrb	r3, [r7, #18]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d823      	bhi.n	8001f34 <menuface+0x4ac>
 8001eec:	a201      	add	r2, pc, #4	; (adr r2, 8001ef4 <menuface+0x46c>)
 8001eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef2:	bf00      	nop
 8001ef4:	08001f05 	.word	0x08001f05
 8001ef8:	08001f11 	.word	0x08001f11
 8001efc:	08001f1d 	.word	0x08001f1d
 8001f00:	08001f29 	.word	0x08001f29
									{
									case 1:
										CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8001f04:	4a68      	ldr	r2, [pc, #416]	; (80020a8 <menuface+0x620>)
 8001f06:	4969      	ldr	r1, [pc, #420]	; (80020ac <menuface+0x624>)
 8001f08:	485c      	ldr	r0, [pc, #368]	; (800207c <menuface+0x5f4>)
 8001f0a:	f7fe fc77 	bl	80007fc <CLCD_Display>
										break;
 8001f0e:	e018      	b.n	8001f42 <menuface+0x4ba>
									case 2:
										CLCD_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8001f10:	4a5b      	ldr	r2, [pc, #364]	; (8002080 <menuface+0x5f8>)
 8001f12:	495c      	ldr	r1, [pc, #368]	; (8002084 <menuface+0x5fc>)
 8001f14:	4859      	ldr	r0, [pc, #356]	; (800207c <menuface+0x5f4>)
 8001f16:	f7fe fc71 	bl	80007fc <CLCD_Display>
										break;
 8001f1a:	e012      	b.n	8001f42 <menuface+0x4ba>
									case 3:
										CLCD_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 8001f1c:	4a5b      	ldr	r2, [pc, #364]	; (800208c <menuface+0x604>)
 8001f1e:	495c      	ldr	r1, [pc, #368]	; (8002090 <menuface+0x608>)
 8001f20:	4856      	ldr	r0, [pc, #344]	; (800207c <menuface+0x5f4>)
 8001f22:	f7fe fc6b 	bl	80007fc <CLCD_Display>
										break;
 8001f26:	e00c      	b.n	8001f42 <menuface+0x4ba>
									case 4:
										CLCD_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8001f28:	4a5b      	ldr	r2, [pc, #364]	; (8002098 <menuface+0x610>)
 8001f2a:	495c      	ldr	r1, [pc, #368]	; (800209c <menuface+0x614>)
 8001f2c:	4853      	ldr	r0, [pc, #332]	; (800207c <menuface+0x5f4>)
 8001f2e:	f7fe fc65 	bl	80007fc <CLCD_Display>
										break;
 8001f32:	e006      	b.n	8001f42 <menuface+0x4ba>
									default:
										CLCD_Display(&LCD1, "    FACE 4 ", "=>  BACK ");
 8001f34:	4a60      	ldr	r2, [pc, #384]	; (80020b8 <menuface+0x630>)
 8001f36:	4955      	ldr	r1, [pc, #340]	; (800208c <menuface+0x604>)
 8001f38:	4850      	ldr	r0, [pc, #320]	; (800207c <menuface+0x5f4>)
 8001f3a:	f7fe fc5f 	bl	80007fc <CLCD_Display>
										break;
 8001f3e:	e000      	b.n	8001f42 <menuface+0x4ba>
									}
								}
 8001f40:	bf00      	nop
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8001f42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f46:	485d      	ldr	r0, [pc, #372]	; (80020bc <menuface+0x634>)
 8001f48:	f002 fc78 	bl	800483c <checkbuton>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80c5 	beq.w	80020de <menuface+0x656>
								{
									exitmenu = Delaymenu;
 8001f54:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <menuface+0x628>)
 8001f56:	221e      	movs	r2, #30
 8001f58:	701a      	strb	r2, [r3, #0]
									uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 8001f5a:	7dbb      	ldrb	r3, [r7, #22]
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	7cbb      	ldrb	r3, [r7, #18]
 8001f62:	4413      	add	r3, r2
 8001f64:	70fb      	strb	r3, [r7, #3]
									switch (statusadd2)
 8001f66:	7cbb      	ldrb	r3, [r7, #18]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	f200 80b4 	bhi.w	80020d8 <menuface+0x650>
 8001f70:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <menuface+0x4f0>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001f89 	.word	0x08001f89
 8001f7c:	08001fc9 	.word	0x08001fc9
 8001f80:	08002009 	.word	0x08002009
 8001f84:	08002049 	.word	0x08002049
									{
									case 1:
										if (checkfaceid(keyadd2) != 0)
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f001 f8fa 	bl	8003184 <checkfaceid>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00e      	beq.n	8001fb4 <menuface+0x52c>
										{
											CLCD_Display(&LCD1, "  DA CO FACE 1 ", "");
 8001f96:	4a37      	ldr	r2, [pc, #220]	; (8002074 <menuface+0x5ec>)
 8001f98:	4949      	ldr	r1, [pc, #292]	; (80020c0 <menuface+0x638>)
 8001f9a:	4838      	ldr	r0, [pc, #224]	; (800207c <menuface+0x5f4>)
 8001f9c:	f7fe fc2e 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8001fa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fa4:	f002 fd5c 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8001fa8:	4a3f      	ldr	r2, [pc, #252]	; (80020a8 <menuface+0x620>)
 8001faa:	4940      	ldr	r1, [pc, #256]	; (80020ac <menuface+0x624>)
 8001fac:	4833      	ldr	r0, [pc, #204]	; (800207c <menuface+0x5f4>)
 8001fae:	f7fe fc25 	bl	80007fc <CLCD_Display>
 8001fb2:	e095      	b.n	80020e0 <menuface+0x658>
										}
										else
										{
											addface(keyadd2);
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f001 f848 	bl	800304c <addface>
											CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8001fbc:	4a3a      	ldr	r2, [pc, #232]	; (80020a8 <menuface+0x620>)
 8001fbe:	493b      	ldr	r1, [pc, #236]	; (80020ac <menuface+0x624>)
 8001fc0:	482e      	ldr	r0, [pc, #184]	; (800207c <menuface+0x5f4>)
 8001fc2:	f7fe fc1b 	bl	80007fc <CLCD_Display>
										}
										break;
 8001fc6:	e08b      	b.n	80020e0 <menuface+0x658>
									case 2:
										if (checkfaceid(keyadd2) != 0)
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 f8da 	bl	8003184 <checkfaceid>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00e      	beq.n	8001ff4 <menuface+0x56c>
										{
											CLCD_Display(&LCD1, "  DA CO FACE 2 ", "");
 8001fd6:	4a27      	ldr	r2, [pc, #156]	; (8002074 <menuface+0x5ec>)
 8001fd8:	4927      	ldr	r1, [pc, #156]	; (8002078 <menuface+0x5f0>)
 8001fda:	4828      	ldr	r0, [pc, #160]	; (800207c <menuface+0x5f4>)
 8001fdc:	f7fe fc0e 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8001fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fe4:	f002 fd3c 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8001fe8:	4a25      	ldr	r2, [pc, #148]	; (8002080 <menuface+0x5f8>)
 8001fea:	4926      	ldr	r1, [pc, #152]	; (8002084 <menuface+0x5fc>)
 8001fec:	4823      	ldr	r0, [pc, #140]	; (800207c <menuface+0x5f4>)
 8001fee:	f7fe fc05 	bl	80007fc <CLCD_Display>
 8001ff2:	e075      	b.n	80020e0 <menuface+0x658>
										}
										else
										{
											addface(keyadd2);
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f001 f828 	bl	800304c <addface>
											CLCD_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8001ffc:	4a20      	ldr	r2, [pc, #128]	; (8002080 <menuface+0x5f8>)
 8001ffe:	4921      	ldr	r1, [pc, #132]	; (8002084 <menuface+0x5fc>)
 8002000:	481e      	ldr	r0, [pc, #120]	; (800207c <menuface+0x5f4>)
 8002002:	f7fe fbfb 	bl	80007fc <CLCD_Display>
										}
										break;
 8002006:	e06b      	b.n	80020e0 <menuface+0x658>
									case 3:
										if (checkfaceid(keyadd2) != 0)
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	4618      	mov	r0, r3
 800200c:	f001 f8ba 	bl	8003184 <checkfaceid>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00e      	beq.n	8002034 <menuface+0x5ac>
										{
											CLCD_Display(&LCD1, "  DA CO FACE 3 ", "");
 8002016:	4a17      	ldr	r2, [pc, #92]	; (8002074 <menuface+0x5ec>)
 8002018:	491b      	ldr	r1, [pc, #108]	; (8002088 <menuface+0x600>)
 800201a:	4818      	ldr	r0, [pc, #96]	; (800207c <menuface+0x5f4>)
 800201c:	f7fe fbee 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8002020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002024:	f002 fd1c 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 8002028:	4a18      	ldr	r2, [pc, #96]	; (800208c <menuface+0x604>)
 800202a:	4919      	ldr	r1, [pc, #100]	; (8002090 <menuface+0x608>)
 800202c:	4813      	ldr	r0, [pc, #76]	; (800207c <menuface+0x5f4>)
 800202e:	f7fe fbe5 	bl	80007fc <CLCD_Display>
 8002032:	e055      	b.n	80020e0 <menuface+0x658>
										}
										else
										{
											addface(keyadd2);
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	4618      	mov	r0, r3
 8002038:	f001 f808 	bl	800304c <addface>
											CLCD_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 800203c:	4a13      	ldr	r2, [pc, #76]	; (800208c <menuface+0x604>)
 800203e:	4914      	ldr	r1, [pc, #80]	; (8002090 <menuface+0x608>)
 8002040:	480e      	ldr	r0, [pc, #56]	; (800207c <menuface+0x5f4>)
 8002042:	f7fe fbdb 	bl	80007fc <CLCD_Display>
										}
										break;
 8002046:	e04b      	b.n	80020e0 <menuface+0x658>
									case 4:
										if (checkfaceid(keyadd2) != 0)
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	4618      	mov	r0, r3
 800204c:	f001 f89a 	bl	8003184 <checkfaceid>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d036      	beq.n	80020c4 <menuface+0x63c>
										{
											CLCD_Display(&LCD1, "  DA CO FACE 4 ", "");
 8002056:	4a07      	ldr	r2, [pc, #28]	; (8002074 <menuface+0x5ec>)
 8002058:	490e      	ldr	r1, [pc, #56]	; (8002094 <menuface+0x60c>)
 800205a:	4808      	ldr	r0, [pc, #32]	; (800207c <menuface+0x5f4>)
 800205c:	f7fe fbce 	bl	80007fc <CLCD_Display>
											HAL_Delay(1000);
 8002060:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002064:	f002 fcfc 	bl	8004a60 <HAL_Delay>
											CLCD_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8002068:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <menuface+0x610>)
 800206a:	490c      	ldr	r1, [pc, #48]	; (800209c <menuface+0x614>)
 800206c:	4803      	ldr	r0, [pc, #12]	; (800207c <menuface+0x5f4>)
 800206e:	f7fe fbc5 	bl	80007fc <CLCD_Display>
 8002072:	e035      	b.n	80020e0 <menuface+0x658>
 8002074:	0800dc5c 	.word	0x0800dc5c
 8002078:	0800debc 	.word	0x0800debc
 800207c:	20000348 	.word	0x20000348
 8002080:	0800de70 	.word	0x0800de70
 8002084:	0800de7c 	.word	0x0800de7c
 8002088:	0800decc 	.word	0x0800decc
 800208c:	0800de88 	.word	0x0800de88
 8002090:	0800de94 	.word	0x0800de94
 8002094:	0800dedc 	.word	0x0800dedc
 8002098:	0800dc38 	.word	0x0800dc38
 800209c:	0800dea0 	.word	0x0800dea0
 80020a0:	0800de10 	.word	0x0800de10
 80020a4:	0800de20 	.word	0x0800de20
 80020a8:	0800de58 	.word	0x0800de58
 80020ac:	0800de64 	.word	0x0800de64
 80020b0:	20000000 	.word	0x20000000
 80020b4:	40010c00 	.word	0x40010c00
 80020b8:	0800dc50 	.word	0x0800dc50
 80020bc:	40010800 	.word	0x40010800
 80020c0:	0800deac 	.word	0x0800deac
										}
										else
										{
											addface(keyadd2);
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 ffc0 	bl	800304c <addface>
											CLCD_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 80020cc:	4aaa      	ldr	r2, [pc, #680]	; (8002378 <menuface+0x8f0>)
 80020ce:	49ab      	ldr	r1, [pc, #684]	; (800237c <menuface+0x8f4>)
 80020d0:	48ab      	ldr	r0, [pc, #684]	; (8002380 <menuface+0x8f8>)
 80020d2:	f7fe fb93 	bl	80007fc <CLCD_Display>
										}
										break;
 80020d6:	e003      	b.n	80020e0 <menuface+0x658>
									default:
										back12 = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	747b      	strb	r3, [r7, #17]
										break;
 80020dc:	e000      	b.n	80020e0 <menuface+0x658>
									}
								}
 80020de:	bf00      	nop
							while (back12 == 1)
 80020e0:	7c7b      	ldrb	r3, [r7, #17]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	f43f aedc 	beq.w	8001ea0 <menuface+0x418>
							}
							CLCD_Display(&LCD1, "  FACE NGUOI LON", "=>FACE TRE EM");
 80020e8:	4aa6      	ldr	r2, [pc, #664]	; (8002384 <menuface+0x8fc>)
 80020ea:	49a7      	ldr	r1, [pc, #668]	; (8002388 <menuface+0x900>)
 80020ec:	48a4      	ldr	r0, [pc, #656]	; (8002380 <menuface+0x8f8>)
 80020ee:	f7fe fb85 	bl	80007fc <CLCD_Display>
						default:
							back = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	757b      	strb	r3, [r7, #21]
							break;
 80020f6:	e000      	b.n	80020fa <menuface+0x672>
						}
					}
 80020f8:	bf00      	nop
				while (back == 1)
 80020fa:	7d7b      	ldrb	r3, [r7, #21]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	f43f ad2e 	beq.w	8001b5e <menuface+0xd6>
				}
				CLCD_Display(&LCD1, "=>  THEM FACE", "    XOA FACE");
 8002102:	4aa2      	ldr	r2, [pc, #648]	; (800238c <menuface+0x904>)
 8002104:	49a2      	ldr	r1, [pc, #648]	; (8002390 <menuface+0x908>)
 8002106:	489e      	ldr	r0, [pc, #632]	; (8002380 <menuface+0x8f8>)
 8002108:	f7fe fb78 	bl	80007fc <CLCD_Display>
				break;
 800210c:	f000 bcf1 	b.w	8002af2 <menuface+0x106a>
			case 1:
				CLCD_Display(&LCD1, "     SELECT ", "   XOA 1 FACE");
 8002110:	4aa0      	ldr	r2, [pc, #640]	; (8002394 <menuface+0x90c>)
 8002112:	49a1      	ldr	r1, [pc, #644]	; (8002398 <menuface+0x910>)
 8002114:	489a      	ldr	r0, [pc, #616]	; (8002380 <menuface+0x8f8>)
 8002116:	f7fe fb71 	bl	80007fc <CLCD_Display>
				uint8_t statusremove = -1;
 800211a:	23ff      	movs	r3, #255	; 0xff
 800211c:	743b      	strb	r3, [r7, #16]
				uint8_t backrm = 1;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
				while (backrm == 1)
 8002122:	f000 bccb 	b.w	8002abc <menuface+0x1034>
				{
					if (exitmenu == 0)
 8002126:	4b9d      	ldr	r3, [pc, #628]	; (800239c <menuface+0x914>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d108      	bne.n	8002140 <menuface+0x6b8>
					{
						CLCD_Clear(&LCD1);
 800212e:	4894      	ldr	r0, [pc, #592]	; (8002380 <menuface+0x8f8>)
 8002130:	f7fe fb46 	bl	80007c0 <CLCD_Clear>
						HAL_Delay(1000);
 8002134:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002138:	f002 fc92 	bl	8004a60 <HAL_Delay>
						return;
 800213c:	f000 bce1 	b.w	8002b02 <menuface+0x107a>
					}
					if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8002140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002144:	4896      	ldr	r0, [pc, #600]	; (80023a0 <menuface+0x918>)
 8002146:	f002 fb79 	bl	800483c <checkbuton>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d039      	beq.n	80021c4 <menuface+0x73c>
					{
						exitmenu = Delaymenu;
 8002150:	4b92      	ldr	r3, [pc, #584]	; (800239c <menuface+0x914>)
 8002152:	221e      	movs	r2, #30
 8002154:	701a      	strb	r2, [r3, #0]
						statusremove++;
 8002156:	7c3b      	ldrb	r3, [r7, #16]
 8002158:	3301      	adds	r3, #1
 800215a:	743b      	strb	r3, [r7, #16]
						statusremove = (statusremove > 2) ? 0 : statusremove;
 800215c:	7c3b      	ldrb	r3, [r7, #16]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d801      	bhi.n	8002166 <menuface+0x6de>
 8002162:	7c3b      	ldrb	r3, [r7, #16]
 8002164:	e000      	b.n	8002168 <menuface+0x6e0>
 8002166:	2300      	movs	r3, #0
 8002168:	743b      	strb	r3, [r7, #16]
						switch (statusremove)
 800216a:	7c3b      	ldrb	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <menuface+0x6ee>
 8002170:	2b01      	cmp	r3, #1
 8002172:	d006      	beq.n	8002182 <menuface+0x6fa>
 8002174:	e020      	b.n	80021b8 <menuface+0x730>
						{
						case 0:
							CLCD_Display(&LCD1, "=> XOA 1 FACE", "   XOA TAT CA");
 8002176:	4a8b      	ldr	r2, [pc, #556]	; (80023a4 <menuface+0x91c>)
 8002178:	498b      	ldr	r1, [pc, #556]	; (80023a8 <menuface+0x920>)
 800217a:	4881      	ldr	r0, [pc, #516]	; (8002380 <menuface+0x8f8>)
 800217c:	f7fe fb3e 	bl	80007fc <CLCD_Display>
							break;
 8002180:	e021      	b.n	80021c6 <menuface+0x73e>
						case 1:
							CLCD_Display(&LCD1, "   XOA 1 FACE", "=> XOA TAT CA");
 8002182:	4a8a      	ldr	r2, [pc, #552]	; (80023ac <menuface+0x924>)
 8002184:	4983      	ldr	r1, [pc, #524]	; (8002394 <menuface+0x90c>)
 8002186:	487e      	ldr	r0, [pc, #504]	; (8002380 <menuface+0x8f8>)
 8002188:	f7fe fb38 	bl	80007fc <CLCD_Display>
							CLCD_Clear(&LCD1);
 800218c:	487c      	ldr	r0, [pc, #496]	; (8002380 <menuface+0x8f8>)
 800218e:	f7fe fb17 	bl	80007c0 <CLCD_Clear>
							CLCD_SetCursor(&LCD1, 0, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2100      	movs	r1, #0
 8002196:	487a      	ldr	r0, [pc, #488]	; (8002380 <menuface+0x8f8>)
 8002198:	f7fe fa94 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "   XOA 1 FACE");
 800219c:	497d      	ldr	r1, [pc, #500]	; (8002394 <menuface+0x90c>)
 800219e:	4878      	ldr	r0, [pc, #480]	; (8002380 <menuface+0x8f8>)
 80021a0:	f7fe faf7 	bl	8000792 <CLCD_WriteString>
							CLCD_SetCursor(&LCD1, 0, 1);
 80021a4:	2201      	movs	r2, #1
 80021a6:	2100      	movs	r1, #0
 80021a8:	4875      	ldr	r0, [pc, #468]	; (8002380 <menuface+0x8f8>)
 80021aa:	f7fe fa8b 	bl	80006c4 <CLCD_SetCursor>
							CLCD_WriteString(&LCD1, "=> XOA TAT CA");
 80021ae:	497f      	ldr	r1, [pc, #508]	; (80023ac <menuface+0x924>)
 80021b0:	4873      	ldr	r0, [pc, #460]	; (8002380 <menuface+0x8f8>)
 80021b2:	f7fe faee 	bl	8000792 <CLCD_WriteString>
							break;
 80021b6:	e006      	b.n	80021c6 <menuface+0x73e>
						default:
							CLCD_Display(&LCD1, "   XOA TAT CA", "=> BACK");
 80021b8:	4a7d      	ldr	r2, [pc, #500]	; (80023b0 <menuface+0x928>)
 80021ba:	497a      	ldr	r1, [pc, #488]	; (80023a4 <menuface+0x91c>)
 80021bc:	4870      	ldr	r0, [pc, #448]	; (8002380 <menuface+0x8f8>)
 80021be:	f7fe fb1d 	bl	80007fc <CLCD_Display>
							break;
 80021c2:	e000      	b.n	80021c6 <menuface+0x73e>
						}
					}
 80021c4:	bf00      	nop
					if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 80021c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ca:	487a      	ldr	r0, [pc, #488]	; (80023b4 <menuface+0x92c>)
 80021cc:	f002 fb36 	bl	800483c <checkbuton>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 8471 	beq.w	8002aba <menuface+0x1032>
					{
						exitmenu = Delaymenu;
 80021d8:	4b70      	ldr	r3, [pc, #448]	; (800239c <menuface+0x914>)
 80021da:	221e      	movs	r2, #30
 80021dc:	701a      	strb	r2, [r3, #0]
						switch (statusremove)
 80021de:	7c3b      	ldrb	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d004      	beq.n	80021ee <menuface+0x766>
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	f000 843c 	beq.w	8002a62 <menuface+0xfda>
 80021ea:	f000 bc63 	b.w	8002ab4 <menuface+0x102c>
						{
						case 0:
							CLCD_Display(&LCD1, "=> CHON FACE", "   QUET FACE");
 80021ee:	4a72      	ldr	r2, [pc, #456]	; (80023b8 <menuface+0x930>)
 80021f0:	4972      	ldr	r1, [pc, #456]	; (80023bc <menuface+0x934>)
 80021f2:	4863      	ldr	r0, [pc, #396]	; (8002380 <menuface+0x8f8>)
 80021f4:	f7fe fb02 	bl	80007fc <CLCD_Display>
							uint8_t statusrm1 = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	73bb      	strb	r3, [r7, #14]
							uint8_t backrm1 = 1;
 80021fc:	2301      	movs	r3, #1
 80021fe:	737b      	strb	r3, [r7, #13]
							while (backrm1 == 1)
 8002200:	f000 bc25 	b.w	8002a4e <menuface+0xfc6>
							{
								if (exitmenu == 0)
 8002204:	4b65      	ldr	r3, [pc, #404]	; (800239c <menuface+0x914>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d108      	bne.n	800221e <menuface+0x796>
								{
									CLCD_Clear(&LCD1);
 800220c:	485c      	ldr	r0, [pc, #368]	; (8002380 <menuface+0x8f8>)
 800220e:	f7fe fad7 	bl	80007c0 <CLCD_Clear>
									HAL_Delay(1000);
 8002212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002216:	f002 fc23 	bl	8004a60 <HAL_Delay>
									return;
 800221a:	f000 bc72 	b.w	8002b02 <menuface+0x107a>
								}
								if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 800221e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002222:	485f      	ldr	r0, [pc, #380]	; (80023a0 <menuface+0x918>)
 8002224:	f002 fb0a 	bl	800483c <checkbuton>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d021      	beq.n	8002272 <menuface+0x7ea>
								{
									statusrm1++;
 800222e:	7bbb      	ldrb	r3, [r7, #14]
 8002230:	3301      	adds	r3, #1
 8002232:	73bb      	strb	r3, [r7, #14]
									statusrm1 = (statusrm1 > 2) ? 0 : statusrm1;
 8002234:	7bbb      	ldrb	r3, [r7, #14]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d801      	bhi.n	800223e <menuface+0x7b6>
 800223a:	7bbb      	ldrb	r3, [r7, #14]
 800223c:	e000      	b.n	8002240 <menuface+0x7b8>
 800223e:	2300      	movs	r3, #0
 8002240:	73bb      	strb	r3, [r7, #14]
									switch (statusrm1)
 8002242:	7bbb      	ldrb	r3, [r7, #14]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <menuface+0x7c6>
 8002248:	2b01      	cmp	r3, #1
 800224a:	d006      	beq.n	800225a <menuface+0x7d2>
 800224c:	e00b      	b.n	8002266 <menuface+0x7de>
									{
									case 0:
										CLCD_Display(&LCD1, "=> CHON FACE", "   QUET FACE");
 800224e:	4a5a      	ldr	r2, [pc, #360]	; (80023b8 <menuface+0x930>)
 8002250:	495a      	ldr	r1, [pc, #360]	; (80023bc <menuface+0x934>)
 8002252:	484b      	ldr	r0, [pc, #300]	; (8002380 <menuface+0x8f8>)
 8002254:	f7fe fad2 	bl	80007fc <CLCD_Display>
										break;
 8002258:	e00c      	b.n	8002274 <menuface+0x7ec>
									case 1:
										CLCD_Display(&LCD1, "   CHON FACE", "=> QUET FACE");
 800225a:	4a59      	ldr	r2, [pc, #356]	; (80023c0 <menuface+0x938>)
 800225c:	4959      	ldr	r1, [pc, #356]	; (80023c4 <menuface+0x93c>)
 800225e:	4848      	ldr	r0, [pc, #288]	; (8002380 <menuface+0x8f8>)
 8002260:	f7fe facc 	bl	80007fc <CLCD_Display>
										;
										break;
 8002264:	e006      	b.n	8002274 <menuface+0x7ec>
									default:
										CLCD_Display(&LCD1, "   QUET FACE", "=> BACK");
 8002266:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <menuface+0x928>)
 8002268:	4953      	ldr	r1, [pc, #332]	; (80023b8 <menuface+0x930>)
 800226a:	4845      	ldr	r0, [pc, #276]	; (8002380 <menuface+0x8f8>)
 800226c:	f7fe fac6 	bl	80007fc <CLCD_Display>
										break;
 8002270:	e000      	b.n	8002274 <menuface+0x7ec>
									}
								}
 8002272:	bf00      	nop
								if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8002274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002278:	484e      	ldr	r0, [pc, #312]	; (80023b4 <menuface+0x92c>)
 800227a:	f002 fadf 	bl	800483c <checkbuton>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 83e3 	beq.w	8002a4c <menuface+0xfc4>
								{
									exitmenu = Delaymenu;
 8002286:	4b45      	ldr	r3, [pc, #276]	; (800239c <menuface+0x914>)
 8002288:	221e      	movs	r2, #30
 800228a:	701a      	strb	r2, [r3, #0]
									switch (statusrm1)
 800228c:	7bbb      	ldrb	r3, [r7, #14]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <menuface+0x812>
 8002292:	2b01      	cmp	r3, #1
 8002294:	f000 836a 	beq.w	800296c <menuface+0xee4>
 8002298:	e3d5      	b.n	8002a46 <menuface+0xfbe>
									{
									case 0:
										CLCD_Display(&LCD1, "=>FACE NGUOI LON", "  FACE TRE EM");
 800229a:	4a4b      	ldr	r2, [pc, #300]	; (80023c8 <menuface+0x940>)
 800229c:	494b      	ldr	r1, [pc, #300]	; (80023cc <menuface+0x944>)
 800229e:	4838      	ldr	r0, [pc, #224]	; (8002380 <menuface+0x8f8>)
 80022a0:	f7fe faac 	bl	80007fc <CLCD_Display>
										uint8_t statusadd = 1;
 80022a4:	2301      	movs	r3, #1
 80022a6:	733b      	strb	r3, [r7, #12]
										uint8_t backrm10 = 1;
 80022a8:	2301      	movs	r3, #1
 80022aa:	72fb      	strb	r3, [r7, #11]
										while (backrm10 == 1)
 80022ac:	e354      	b.n	8002958 <menuface+0xed0>
										{
											if (exitmenu == 0)
 80022ae:	4b3b      	ldr	r3, [pc, #236]	; (800239c <menuface+0x914>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d108      	bne.n	80022c8 <menuface+0x840>
											{
												CLCD_Clear(&LCD1);
 80022b6:	4832      	ldr	r0, [pc, #200]	; (8002380 <menuface+0x8f8>)
 80022b8:	f7fe fa82 	bl	80007c0 <CLCD_Clear>
												HAL_Delay(1000);
 80022bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022c0:	f002 fbce 	bl	8004a60 <HAL_Delay>
												return;
 80022c4:	f000 bc1d 	b.w	8002b02 <menuface+0x107a>
											}
											if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 80022c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022cc:	4834      	ldr	r0, [pc, #208]	; (80023a0 <menuface+0x918>)
 80022ce:	f002 fab5 	bl	800483c <checkbuton>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d024      	beq.n	8002322 <menuface+0x89a>
											{
												exitmenu = Delaymenu;
 80022d8:	4b30      	ldr	r3, [pc, #192]	; (800239c <menuface+0x914>)
 80022da:	221e      	movs	r2, #30
 80022dc:	701a      	strb	r2, [r3, #0]
												statusadd++;
 80022de:	7b3b      	ldrb	r3, [r7, #12]
 80022e0:	3301      	adds	r3, #1
 80022e2:	733b      	strb	r3, [r7, #12]
												statusadd = (statusadd > 2) ? 0 : statusadd;
 80022e4:	7b3b      	ldrb	r3, [r7, #12]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d801      	bhi.n	80022ee <menuface+0x866>
 80022ea:	7b3b      	ldrb	r3, [r7, #12]
 80022ec:	e000      	b.n	80022f0 <menuface+0x868>
 80022ee:	2300      	movs	r3, #0
 80022f0:	733b      	strb	r3, [r7, #12]
												switch (statusadd)
 80022f2:	7b3b      	ldrb	r3, [r7, #12]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d002      	beq.n	80022fe <menuface+0x876>
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d006      	beq.n	800230a <menuface+0x882>
 80022fc:	e00b      	b.n	8002316 <menuface+0x88e>
												{
												case 1:
													CLCD_Display(&LCD1, "=>FACE NGUOI LON", "  FACE TRE EM");
 80022fe:	4a32      	ldr	r2, [pc, #200]	; (80023c8 <menuface+0x940>)
 8002300:	4932      	ldr	r1, [pc, #200]	; (80023cc <menuface+0x944>)
 8002302:	481f      	ldr	r0, [pc, #124]	; (8002380 <menuface+0x8f8>)
 8002304:	f7fe fa7a 	bl	80007fc <CLCD_Display>
													break;
 8002308:	e00c      	b.n	8002324 <menuface+0x89c>
												case 2:
													CLCD_Display(&LCD1, "  FACE NGUOI LON", "=>FACE TRE EM");
 800230a:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <menuface+0x8fc>)
 800230c:	491e      	ldr	r1, [pc, #120]	; (8002388 <menuface+0x900>)
 800230e:	481c      	ldr	r0, [pc, #112]	; (8002380 <menuface+0x8f8>)
 8002310:	f7fe fa74 	bl	80007fc <CLCD_Display>
													break;
 8002314:	e006      	b.n	8002324 <menuface+0x89c>
												default:
													CLCD_Display(&LCD1, "  FACE TRE EM", "=> BACK");
 8002316:	4a26      	ldr	r2, [pc, #152]	; (80023b0 <menuface+0x928>)
 8002318:	492b      	ldr	r1, [pc, #172]	; (80023c8 <menuface+0x940>)
 800231a:	4819      	ldr	r0, [pc, #100]	; (8002380 <menuface+0x8f8>)
 800231c:	f7fe fa6e 	bl	80007fc <CLCD_Display>
													break;
 8002320:	e000      	b.n	8002324 <menuface+0x89c>
												}
											}
 8002322:	bf00      	nop
											if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8002324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002328:	4822      	ldr	r0, [pc, #136]	; (80023b4 <menuface+0x92c>)
 800232a:	f002 fa87 	bl	800483c <checkbuton>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8310 	beq.w	8002956 <menuface+0xece>
											{
												exitmenu = Delaymenu;
 8002336:	4b19      	ldr	r3, [pc, #100]	; (800239c <menuface+0x914>)
 8002338:	221e      	movs	r2, #30
 800233a:	701a      	strb	r2, [r3, #0]
												switch (statusadd)
 800233c:	7b3b      	ldrb	r3, [r7, #12]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d003      	beq.n	800234a <menuface+0x8c2>
 8002342:	2b02      	cmp	r3, #2
 8002344:	f000 819c 	beq.w	8002680 <menuface+0xbf8>
 8002348:	e302      	b.n	8002950 <menuface+0xec8>
												{
												case 1:
													CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 800234a:	4a21      	ldr	r2, [pc, #132]	; (80023d0 <menuface+0x948>)
 800234c:	4921      	ldr	r1, [pc, #132]	; (80023d4 <menuface+0x94c>)
 800234e:	480c      	ldr	r0, [pc, #48]	; (8002380 <menuface+0x8f8>)
 8002350:	f7fe fa54 	bl	80007fc <CLCD_Display>
													uint8_t statusadd1 = 1;
 8002354:	2301      	movs	r3, #1
 8002356:	72bb      	strb	r3, [r7, #10]
													uint8_t back11 = 1;
 8002358:	2301      	movs	r3, #1
 800235a:	727b      	strb	r3, [r7, #9]
													while (back11 == 1)
 800235c:	e186      	b.n	800266c <menuface+0xbe4>
													{
														if (exitmenu == 0)
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <menuface+0x914>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d138      	bne.n	80023d8 <menuface+0x950>
														{
															CLCD_Clear(&LCD1);
 8002366:	4806      	ldr	r0, [pc, #24]	; (8002380 <menuface+0x8f8>)
 8002368:	f7fe fa2a 	bl	80007c0 <CLCD_Clear>
															HAL_Delay(1000);
 800236c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002370:	f002 fb76 	bl	8004a60 <HAL_Delay>
															return;
 8002374:	e3c5      	b.n	8002b02 <menuface+0x107a>
 8002376:	bf00      	nop
 8002378:	0800dc38 	.word	0x0800dc38
 800237c:	0800dea0 	.word	0x0800dea0
 8002380:	20000348 	.word	0x20000348
 8002384:	0800de34 	.word	0x0800de34
 8002388:	0800de44 	.word	0x0800de44
 800238c:	0800dda0 	.word	0x0800dda0
 8002390:	0800ddb0 	.word	0x0800ddb0
 8002394:	0800deec 	.word	0x0800deec
 8002398:	0800dcb0 	.word	0x0800dcb0
 800239c:	20000000 	.word	0x20000000
 80023a0:	40010c00 	.word	0x40010c00
 80023a4:	0800dcc0 	.word	0x0800dcc0
 80023a8:	0800defc 	.word	0x0800defc
 80023ac:	0800dce0 	.word	0x0800dce0
 80023b0:	0800dbe8 	.word	0x0800dbe8
 80023b4:	40010800 	.word	0x40010800
 80023b8:	0800df0c 	.word	0x0800df0c
 80023bc:	0800df1c 	.word	0x0800df1c
 80023c0:	0800df2c 	.word	0x0800df2c
 80023c4:	0800df3c 	.word	0x0800df3c
 80023c8:	0800de10 	.word	0x0800de10
 80023cc:	0800de20 	.word	0x0800de20
 80023d0:	0800de58 	.word	0x0800de58
 80023d4:	0800de64 	.word	0x0800de64
														}
														if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 80023d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023dc:	48b3      	ldr	r0, [pc, #716]	; (80026ac <menuface+0xc24>)
 80023de:	f002 fa2d 	bl	800483c <checkbuton>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d039      	beq.n	800245c <menuface+0x9d4>
														{
															exitmenu = Delaymenu;
 80023e8:	4bb1      	ldr	r3, [pc, #708]	; (80026b0 <menuface+0xc28>)
 80023ea:	221e      	movs	r2, #30
 80023ec:	701a      	strb	r2, [r3, #0]
															statusadd1++;
 80023ee:	7abb      	ldrb	r3, [r7, #10]
 80023f0:	3301      	adds	r3, #1
 80023f2:	72bb      	strb	r3, [r7, #10]
															statusadd1 = (statusadd1 > 4) ? 0 : statusadd1;
 80023f4:	7abb      	ldrb	r3, [r7, #10]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d801      	bhi.n	80023fe <menuface+0x976>
 80023fa:	7abb      	ldrb	r3, [r7, #10]
 80023fc:	e000      	b.n	8002400 <menuface+0x978>
 80023fe:	2300      	movs	r3, #0
 8002400:	72bb      	strb	r3, [r7, #10]
															switch (statusadd1)
 8002402:	7abb      	ldrb	r3, [r7, #10]
 8002404:	3b01      	subs	r3, #1
 8002406:	2b03      	cmp	r3, #3
 8002408:	d822      	bhi.n	8002450 <menuface+0x9c8>
 800240a:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <menuface+0x988>)
 800240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002410:	08002421 	.word	0x08002421
 8002414:	0800242d 	.word	0x0800242d
 8002418:	08002439 	.word	0x08002439
 800241c:	08002445 	.word	0x08002445
															{
															case 1:
																CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8002420:	4aa4      	ldr	r2, [pc, #656]	; (80026b4 <menuface+0xc2c>)
 8002422:	49a5      	ldr	r1, [pc, #660]	; (80026b8 <menuface+0xc30>)
 8002424:	48a5      	ldr	r0, [pc, #660]	; (80026bc <menuface+0xc34>)
 8002426:	f7fe f9e9 	bl	80007fc <CLCD_Display>
																break;
 800242a:	e018      	b.n	800245e <menuface+0x9d6>
															case 2:
																CLCD_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 800242c:	4aa4      	ldr	r2, [pc, #656]	; (80026c0 <menuface+0xc38>)
 800242e:	49a5      	ldr	r1, [pc, #660]	; (80026c4 <menuface+0xc3c>)
 8002430:	48a2      	ldr	r0, [pc, #648]	; (80026bc <menuface+0xc34>)
 8002432:	f7fe f9e3 	bl	80007fc <CLCD_Display>
																break;
 8002436:	e012      	b.n	800245e <menuface+0x9d6>
															case 3:
																CLCD_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 8002438:	4aa3      	ldr	r2, [pc, #652]	; (80026c8 <menuface+0xc40>)
 800243a:	49a4      	ldr	r1, [pc, #656]	; (80026cc <menuface+0xc44>)
 800243c:	489f      	ldr	r0, [pc, #636]	; (80026bc <menuface+0xc34>)
 800243e:	f7fe f9dd 	bl	80007fc <CLCD_Display>
																break;
 8002442:	e00c      	b.n	800245e <menuface+0x9d6>
															case 4:
																CLCD_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8002444:	4aa2      	ldr	r2, [pc, #648]	; (80026d0 <menuface+0xc48>)
 8002446:	49a3      	ldr	r1, [pc, #652]	; (80026d4 <menuface+0xc4c>)
 8002448:	489c      	ldr	r0, [pc, #624]	; (80026bc <menuface+0xc34>)
 800244a:	f7fe f9d7 	bl	80007fc <CLCD_Display>
																break;
 800244e:	e006      	b.n	800245e <menuface+0x9d6>
															default:
																CLCD_Display(&LCD1, "    FACE 4 ", "=>  BACK ");
 8002450:	4aa1      	ldr	r2, [pc, #644]	; (80026d8 <menuface+0xc50>)
 8002452:	499d      	ldr	r1, [pc, #628]	; (80026c8 <menuface+0xc40>)
 8002454:	4899      	ldr	r0, [pc, #612]	; (80026bc <menuface+0xc34>)
 8002456:	f7fe f9d1 	bl	80007fc <CLCD_Display>
																break;
 800245a:	e000      	b.n	800245e <menuface+0x9d6>
															}
														}
 800245c:	bf00      	nop
														if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 800245e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002462:	489e      	ldr	r0, [pc, #632]	; (80026dc <menuface+0xc54>)
 8002464:	f002 f9ea 	bl	800483c <checkbuton>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80fd 	beq.w	800266a <menuface+0xbe2>
														{
															exitmenu = Delaymenu;
 8002470:	4b8f      	ldr	r3, [pc, #572]	; (80026b0 <menuface+0xc28>)
 8002472:	221e      	movs	r2, #30
 8002474:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd1 = (statusadd << 4) + statusadd1;
 8002476:	7b3b      	ldrb	r3, [r7, #12]
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	b2da      	uxtb	r2, r3
 800247c:	7abb      	ldrb	r3, [r7, #10]
 800247e:	4413      	add	r3, r2
 8002480:	713b      	strb	r3, [r7, #4]
															switch (statusadd1)
 8002482:	7abb      	ldrb	r3, [r7, #10]
 8002484:	3b01      	subs	r3, #1
 8002486:	2b03      	cmp	r3, #3
 8002488:	f200 80ec 	bhi.w	8002664 <menuface+0xbdc>
 800248c:	a201      	add	r2, pc, #4	; (adr r2, 8002494 <menuface+0xa0c>)
 800248e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002492:	bf00      	nop
 8002494:	080024a5 	.word	0x080024a5
 8002498:	08002515 	.word	0x08002515
 800249c:	08002585 	.word	0x08002585
 80024a0:	080025f5 	.word	0x080025f5
															{
															case 1:
																if (checkfaceid(keyadd1) == 0)
 80024a4:	793b      	ldrb	r3, [r7, #4]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fe6c 	bl	8003184 <checkfaceid>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10e      	bne.n	80024d0 <menuface+0xa48>
																{
																	CLCD_Display(&LCD1, "CHUA CO FACE 1 ", "");
 80024b2:	4a8b      	ldr	r2, [pc, #556]	; (80026e0 <menuface+0xc58>)
 80024b4:	498b      	ldr	r1, [pc, #556]	; (80026e4 <menuface+0xc5c>)
 80024b6:	4881      	ldr	r0, [pc, #516]	; (80026bc <menuface+0xc34>)
 80024b8:	f7fe f9a0 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 80024bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024c0:	f002 face 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 80024c4:	4a7b      	ldr	r2, [pc, #492]	; (80026b4 <menuface+0xc2c>)
 80024c6:	497c      	ldr	r1, [pc, #496]	; (80026b8 <menuface+0xc30>)
 80024c8:	487c      	ldr	r0, [pc, #496]	; (80026bc <menuface+0xc34>)
 80024ca:	f7fe f997 	bl	80007fc <CLCD_Display>
 80024ce:	e0cd      	b.n	800266c <menuface+0xbe4>
																}
																else
																{
																	removeface(checkfaceid(keyadd1));
 80024d0:	793b      	ldrb	r3, [r7, #4]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fe56 	bl	8003184 <checkfaceid>
 80024d8:	4603      	mov	r3, r0
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fe04 	bl	80030e8 <removeface>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 80024e0:	4a7f      	ldr	r2, [pc, #508]	; (80026e0 <menuface+0xc58>)
 80024e2:	4981      	ldr	r1, [pc, #516]	; (80026e8 <menuface+0xc60>)
 80024e4:	4875      	ldr	r0, [pc, #468]	; (80026bc <menuface+0xc34>)
 80024e6:	f7fe f989 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 80024ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024ee:	f002 fab7 	bl	8004a60 <HAL_Delay>
																	if (checkcountUID() == 0)
 80024f2:	f002 f8af 	bl	8004654 <checkcountUID>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d105      	bne.n	8002508 <menuface+0xa80>
																	{
																		startadd();
 80024fc:	f000 fc94 	bl	8002e28 <startadd>
																		exitmenu = 0;
 8002500:	4b6b      	ldr	r3, [pc, #428]	; (80026b0 <menuface+0xc28>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e0b1      	b.n	800266c <menuface+0xbe4>
																	}
																	else
																	{
																		CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8002508:	4a6a      	ldr	r2, [pc, #424]	; (80026b4 <menuface+0xc2c>)
 800250a:	496b      	ldr	r1, [pc, #428]	; (80026b8 <menuface+0xc30>)
 800250c:	486b      	ldr	r0, [pc, #428]	; (80026bc <menuface+0xc34>)
 800250e:	f7fe f975 	bl	80007fc <CLCD_Display>
																	}
																}
																break;
 8002512:	e0ab      	b.n	800266c <menuface+0xbe4>
															case 2:
																if (checkfaceid(keyadd1) == 0)
 8002514:	793b      	ldrb	r3, [r7, #4]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fe34 	bl	8003184 <checkfaceid>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10e      	bne.n	8002540 <menuface+0xab8>
																{
																	CLCD_Display(&LCD1, "CHUA CO FACE 2 ", "");
 8002522:	4a6f      	ldr	r2, [pc, #444]	; (80026e0 <menuface+0xc58>)
 8002524:	4971      	ldr	r1, [pc, #452]	; (80026ec <menuface+0xc64>)
 8002526:	4865      	ldr	r0, [pc, #404]	; (80026bc <menuface+0xc34>)
 8002528:	f7fe f968 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 800252c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002530:	f002 fa96 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8002534:	4a62      	ldr	r2, [pc, #392]	; (80026c0 <menuface+0xc38>)
 8002536:	4963      	ldr	r1, [pc, #396]	; (80026c4 <menuface+0xc3c>)
 8002538:	4860      	ldr	r0, [pc, #384]	; (80026bc <menuface+0xc34>)
 800253a:	f7fe f95f 	bl	80007fc <CLCD_Display>
 800253e:	e095      	b.n	800266c <menuface+0xbe4>
																}
																else
																{
																	removeface(checkfaceid(keyadd1));
 8002540:	793b      	ldrb	r3, [r7, #4]
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fe1e 	bl	8003184 <checkfaceid>
 8002548:	4603      	mov	r3, r0
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fdcc 	bl	80030e8 <removeface>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 8002550:	4a63      	ldr	r2, [pc, #396]	; (80026e0 <menuface+0xc58>)
 8002552:	4965      	ldr	r1, [pc, #404]	; (80026e8 <menuface+0xc60>)
 8002554:	4859      	ldr	r0, [pc, #356]	; (80026bc <menuface+0xc34>)
 8002556:	f7fe f951 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 800255a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800255e:	f002 fa7f 	bl	8004a60 <HAL_Delay>
																	if (checkcountUID() == 0)
 8002562:	f002 f877 	bl	8004654 <checkcountUID>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <menuface+0xaf0>
																	{
																		startadd();
 800256c:	f000 fc5c 	bl	8002e28 <startadd>
																		exitmenu = 0;
 8002570:	4b4f      	ldr	r3, [pc, #316]	; (80026b0 <menuface+0xc28>)
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e079      	b.n	800266c <menuface+0xbe4>
																	}
																	else
																	{
																		CLCD_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8002578:	4a51      	ldr	r2, [pc, #324]	; (80026c0 <menuface+0xc38>)
 800257a:	4952      	ldr	r1, [pc, #328]	; (80026c4 <menuface+0xc3c>)
 800257c:	484f      	ldr	r0, [pc, #316]	; (80026bc <menuface+0xc34>)
 800257e:	f7fe f93d 	bl	80007fc <CLCD_Display>
																	}
																}
																break;
 8002582:	e073      	b.n	800266c <menuface+0xbe4>
															case 3:
																if (checkfaceid(keyadd1) == 0)
 8002584:	793b      	ldrb	r3, [r7, #4]
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fdfc 	bl	8003184 <checkfaceid>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10e      	bne.n	80025b0 <menuface+0xb28>
																{
																	CLCD_Display(&LCD1, "CHUA CO FACE 3 ", "");
 8002592:	4a53      	ldr	r2, [pc, #332]	; (80026e0 <menuface+0xc58>)
 8002594:	4956      	ldr	r1, [pc, #344]	; (80026f0 <menuface+0xc68>)
 8002596:	4849      	ldr	r0, [pc, #292]	; (80026bc <menuface+0xc34>)
 8002598:	f7fe f930 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 800259c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025a0:	f002 fa5e 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 80025a4:	4a48      	ldr	r2, [pc, #288]	; (80026c8 <menuface+0xc40>)
 80025a6:	4949      	ldr	r1, [pc, #292]	; (80026cc <menuface+0xc44>)
 80025a8:	4844      	ldr	r0, [pc, #272]	; (80026bc <menuface+0xc34>)
 80025aa:	f7fe f927 	bl	80007fc <CLCD_Display>
 80025ae:	e05d      	b.n	800266c <menuface+0xbe4>
																}
																else
																{
																	removeface(checkfaceid(keyadd1));
 80025b0:	793b      	ldrb	r3, [r7, #4]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fde6 	bl	8003184 <checkfaceid>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fd94 	bl	80030e8 <removeface>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 80025c0:	4a47      	ldr	r2, [pc, #284]	; (80026e0 <menuface+0xc58>)
 80025c2:	4949      	ldr	r1, [pc, #292]	; (80026e8 <menuface+0xc60>)
 80025c4:	483d      	ldr	r0, [pc, #244]	; (80026bc <menuface+0xc34>)
 80025c6:	f7fe f919 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 80025ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ce:	f002 fa47 	bl	8004a60 <HAL_Delay>
																	if (checkcountUID() == 0)
 80025d2:	f002 f83f 	bl	8004654 <checkcountUID>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d105      	bne.n	80025e8 <menuface+0xb60>
																	{
																		startadd();
 80025dc:	f000 fc24 	bl	8002e28 <startadd>
																		exitmenu = 0;
 80025e0:	4b33      	ldr	r3, [pc, #204]	; (80026b0 <menuface+0xc28>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e041      	b.n	800266c <menuface+0xbe4>
																	}
																	else
																	{
																		CLCD_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 80025e8:	4a37      	ldr	r2, [pc, #220]	; (80026c8 <menuface+0xc40>)
 80025ea:	4938      	ldr	r1, [pc, #224]	; (80026cc <menuface+0xc44>)
 80025ec:	4833      	ldr	r0, [pc, #204]	; (80026bc <menuface+0xc34>)
 80025ee:	f7fe f905 	bl	80007fc <CLCD_Display>
																	}
																}
																break;
 80025f2:	e03b      	b.n	800266c <menuface+0xbe4>
															case 4:
																if (checkfaceid(keyadd1) == 0)
 80025f4:	793b      	ldrb	r3, [r7, #4]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fdc4 	bl	8003184 <checkfaceid>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10e      	bne.n	8002620 <menuface+0xb98>
																{
																	CLCD_Display(&LCD1, "CHUA CO FACE 4 ", "");
 8002602:	4a37      	ldr	r2, [pc, #220]	; (80026e0 <menuface+0xc58>)
 8002604:	493b      	ldr	r1, [pc, #236]	; (80026f4 <menuface+0xc6c>)
 8002606:	482d      	ldr	r0, [pc, #180]	; (80026bc <menuface+0xc34>)
 8002608:	f7fe f8f8 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 800260c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002610:	f002 fa26 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8002614:	4a2e      	ldr	r2, [pc, #184]	; (80026d0 <menuface+0xc48>)
 8002616:	492f      	ldr	r1, [pc, #188]	; (80026d4 <menuface+0xc4c>)
 8002618:	4828      	ldr	r0, [pc, #160]	; (80026bc <menuface+0xc34>)
 800261a:	f7fe f8ef 	bl	80007fc <CLCD_Display>
 800261e:	e025      	b.n	800266c <menuface+0xbe4>
																}
																else
																{
																	removeface(checkfaceid(keyadd1));
 8002620:	793b      	ldrb	r3, [r7, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fdae 	bl	8003184 <checkfaceid>
 8002628:	4603      	mov	r3, r0
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fd5c 	bl	80030e8 <removeface>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 8002630:	4a2b      	ldr	r2, [pc, #172]	; (80026e0 <menuface+0xc58>)
 8002632:	492d      	ldr	r1, [pc, #180]	; (80026e8 <menuface+0xc60>)
 8002634:	4821      	ldr	r0, [pc, #132]	; (80026bc <menuface+0xc34>)
 8002636:	f7fe f8e1 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 800263a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800263e:	f002 fa0f 	bl	8004a60 <HAL_Delay>
																	if (checkcountUID() == 0)
 8002642:	f002 f807 	bl	8004654 <checkcountUID>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d105      	bne.n	8002658 <menuface+0xbd0>
																	{
																		startadd();
 800264c:	f000 fbec 	bl	8002e28 <startadd>
																		exitmenu = 0;
 8002650:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <menuface+0xc28>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e009      	b.n	800266c <menuface+0xbe4>
																	}
																	else
																	{
																		CLCD_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8002658:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <menuface+0xc48>)
 800265a:	491e      	ldr	r1, [pc, #120]	; (80026d4 <menuface+0xc4c>)
 800265c:	4817      	ldr	r0, [pc, #92]	; (80026bc <menuface+0xc34>)
 800265e:	f7fe f8cd 	bl	80007fc <CLCD_Display>
																	}
																}
																break;
 8002662:	e003      	b.n	800266c <menuface+0xbe4>
															default:
																back11 = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	727b      	strb	r3, [r7, #9]
																break;
 8002668:	e000      	b.n	800266c <menuface+0xbe4>
															}
														}
 800266a:	bf00      	nop
													while (back11 == 1)
 800266c:	7a7b      	ldrb	r3, [r7, #9]
 800266e:	2b01      	cmp	r3, #1
 8002670:	f43f ae75 	beq.w	800235e <menuface+0x8d6>
													}
													CLCD_Display(&LCD1, "=>FACE NGUOI LON", "  FACE TRE EM");
 8002674:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <menuface+0xc70>)
 8002676:	4921      	ldr	r1, [pc, #132]	; (80026fc <menuface+0xc74>)
 8002678:	4810      	ldr	r0, [pc, #64]	; (80026bc <menuface+0xc34>)
 800267a:	f7fe f8bf 	bl	80007fc <CLCD_Display>
													break;
 800267e:	e16b      	b.n	8002958 <menuface+0xed0>
												case 2:
													CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8002680:	4a0c      	ldr	r2, [pc, #48]	; (80026b4 <menuface+0xc2c>)
 8002682:	490d      	ldr	r1, [pc, #52]	; (80026b8 <menuface+0xc30>)
 8002684:	480d      	ldr	r0, [pc, #52]	; (80026bc <menuface+0xc34>)
 8002686:	f7fe f8b9 	bl	80007fc <CLCD_Display>
													uint8_t statusadd2 = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	723b      	strb	r3, [r7, #8]
													uint8_t back12 = 1;
 800268e:	2301      	movs	r3, #1
 8002690:	71fb      	strb	r3, [r7, #7]
													while (back12 == 1)
 8002692:	e153      	b.n	800293c <menuface+0xeb4>
													{
														if (exitmenu == 0)
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <menuface+0xc28>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d131      	bne.n	8002700 <menuface+0xc78>
														{
															CLCD_Clear(&LCD1);
 800269c:	4807      	ldr	r0, [pc, #28]	; (80026bc <menuface+0xc34>)
 800269e:	f7fe f88f 	bl	80007c0 <CLCD_Clear>
															HAL_Delay(1000);
 80026a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026a6:	f002 f9db 	bl	8004a60 <HAL_Delay>
															return;
 80026aa:	e22a      	b.n	8002b02 <menuface+0x107a>
 80026ac:	40010c00 	.word	0x40010c00
 80026b0:	20000000 	.word	0x20000000
 80026b4:	0800de58 	.word	0x0800de58
 80026b8:	0800de64 	.word	0x0800de64
 80026bc:	20000348 	.word	0x20000348
 80026c0:	0800de70 	.word	0x0800de70
 80026c4:	0800de7c 	.word	0x0800de7c
 80026c8:	0800de88 	.word	0x0800de88
 80026cc:	0800de94 	.word	0x0800de94
 80026d0:	0800dc38 	.word	0x0800dc38
 80026d4:	0800dea0 	.word	0x0800dea0
 80026d8:	0800dc50 	.word	0x0800dc50
 80026dc:	40010800 	.word	0x40010800
 80026e0:	0800dc5c 	.word	0x0800dc5c
 80026e4:	0800df4c 	.word	0x0800df4c
 80026e8:	0800dd30 	.word	0x0800dd30
 80026ec:	0800df5c 	.word	0x0800df5c
 80026f0:	0800df6c 	.word	0x0800df6c
 80026f4:	0800df7c 	.word	0x0800df7c
 80026f8:	0800de10 	.word	0x0800de10
 80026fc:	0800de20 	.word	0x0800de20
														}
														if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 8002700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002704:	489f      	ldr	r0, [pc, #636]	; (8002984 <menuface+0xefc>)
 8002706:	f002 f899 	bl	800483c <checkbuton>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d039      	beq.n	8002784 <menuface+0xcfc>
														{
															exitmenu = Delaymenu;
 8002710:	4b9d      	ldr	r3, [pc, #628]	; (8002988 <menuface+0xf00>)
 8002712:	221e      	movs	r2, #30
 8002714:	701a      	strb	r2, [r3, #0]
															statusadd2++;
 8002716:	7a3b      	ldrb	r3, [r7, #8]
 8002718:	3301      	adds	r3, #1
 800271a:	723b      	strb	r3, [r7, #8]
															statusadd2 = (statusadd2 > 4) ? 0 : statusadd2;
 800271c:	7a3b      	ldrb	r3, [r7, #8]
 800271e:	2b04      	cmp	r3, #4
 8002720:	d801      	bhi.n	8002726 <menuface+0xc9e>
 8002722:	7a3b      	ldrb	r3, [r7, #8]
 8002724:	e000      	b.n	8002728 <menuface+0xca0>
 8002726:	2300      	movs	r3, #0
 8002728:	723b      	strb	r3, [r7, #8]
															switch (statusadd2)
 800272a:	7a3b      	ldrb	r3, [r7, #8]
 800272c:	3b01      	subs	r3, #1
 800272e:	2b03      	cmp	r3, #3
 8002730:	d822      	bhi.n	8002778 <menuface+0xcf0>
 8002732:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <menuface+0xcb0>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	08002749 	.word	0x08002749
 800273c:	08002755 	.word	0x08002755
 8002740:	08002761 	.word	0x08002761
 8002744:	0800276d 	.word	0x0800276d
															{
															case 1:
																CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 8002748:	4a90      	ldr	r2, [pc, #576]	; (800298c <menuface+0xf04>)
 800274a:	4991      	ldr	r1, [pc, #580]	; (8002990 <menuface+0xf08>)
 800274c:	4891      	ldr	r0, [pc, #580]	; (8002994 <menuface+0xf0c>)
 800274e:	f7fe f855 	bl	80007fc <CLCD_Display>
																break;
 8002752:	e018      	b.n	8002786 <menuface+0xcfe>
															case 2:
																CLCD_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8002754:	4a90      	ldr	r2, [pc, #576]	; (8002998 <menuface+0xf10>)
 8002756:	4991      	ldr	r1, [pc, #580]	; (800299c <menuface+0xf14>)
 8002758:	488e      	ldr	r0, [pc, #568]	; (8002994 <menuface+0xf0c>)
 800275a:	f7fe f84f 	bl	80007fc <CLCD_Display>
																break;
 800275e:	e012      	b.n	8002786 <menuface+0xcfe>
															case 3:
																CLCD_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 8002760:	4a8f      	ldr	r2, [pc, #572]	; (80029a0 <menuface+0xf18>)
 8002762:	4990      	ldr	r1, [pc, #576]	; (80029a4 <menuface+0xf1c>)
 8002764:	488b      	ldr	r0, [pc, #556]	; (8002994 <menuface+0xf0c>)
 8002766:	f7fe f849 	bl	80007fc <CLCD_Display>
																break;
 800276a:	e00c      	b.n	8002786 <menuface+0xcfe>
															case 4:
																CLCD_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 800276c:	4a8e      	ldr	r2, [pc, #568]	; (80029a8 <menuface+0xf20>)
 800276e:	498f      	ldr	r1, [pc, #572]	; (80029ac <menuface+0xf24>)
 8002770:	4888      	ldr	r0, [pc, #544]	; (8002994 <menuface+0xf0c>)
 8002772:	f7fe f843 	bl	80007fc <CLCD_Display>
																break;
 8002776:	e006      	b.n	8002786 <menuface+0xcfe>
															default:
																CLCD_Display(&LCD1, "    FACE 4 ", "=>  BACK ");
 8002778:	4a8d      	ldr	r2, [pc, #564]	; (80029b0 <menuface+0xf28>)
 800277a:	4989      	ldr	r1, [pc, #548]	; (80029a0 <menuface+0xf18>)
 800277c:	4885      	ldr	r0, [pc, #532]	; (8002994 <menuface+0xf0c>)
 800277e:	f7fe f83d 	bl	80007fc <CLCD_Display>
																break;
 8002782:	e000      	b.n	8002786 <menuface+0xcfe>
															}
														}
 8002784:	bf00      	nop
														if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8002786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800278a:	488a      	ldr	r0, [pc, #552]	; (80029b4 <menuface+0xf2c>)
 800278c:	f002 f856 	bl	800483c <checkbuton>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 80d1 	beq.w	800293a <menuface+0xeb2>
														{
															exitmenu = Delaymenu;
 8002798:	4b7b      	ldr	r3, [pc, #492]	; (8002988 <menuface+0xf00>)
 800279a:	221e      	movs	r2, #30
 800279c:	701a      	strb	r2, [r3, #0]
															uint8_t keyadd2 = (statusadd << 4) + statusadd2;
 800279e:	7b3b      	ldrb	r3, [r7, #12]
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	7a3b      	ldrb	r3, [r7, #8]
 80027a6:	4413      	add	r3, r2
 80027a8:	717b      	strb	r3, [r7, #5]
															switch (statusadd2)
 80027aa:	7a3b      	ldrb	r3, [r7, #8]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	f200 80c0 	bhi.w	8002934 <menuface+0xeac>
 80027b4:	a201      	add	r2, pc, #4	; (adr r2, 80027bc <menuface+0xd34>)
 80027b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ba:	bf00      	nop
 80027bc:	080027cd 	.word	0x080027cd
 80027c0:	08002827 	.word	0x08002827
 80027c4:	08002881 	.word	0x08002881
 80027c8:	080028db 	.word	0x080028db
															{
															case 1:
																if (checkfaceid(keyadd2) == 0)
 80027cc:	797b      	ldrb	r3, [r7, #5]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fcd8 	bl	8003184 <checkfaceid>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10e      	bne.n	80027f8 <menuface+0xd70>
																{
																	CLCD_Display(&LCD1, "CHUA CO FACE 1 ", "");
 80027da:	4a77      	ldr	r2, [pc, #476]	; (80029b8 <menuface+0xf30>)
 80027dc:	4977      	ldr	r1, [pc, #476]	; (80029bc <menuface+0xf34>)
 80027de:	486d      	ldr	r0, [pc, #436]	; (8002994 <menuface+0xf0c>)
 80027e0:	f7fe f80c 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 80027e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027e8:	f002 f93a 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 80027ec:	4a67      	ldr	r2, [pc, #412]	; (800298c <menuface+0xf04>)
 80027ee:	4968      	ldr	r1, [pc, #416]	; (8002990 <menuface+0xf08>)
 80027f0:	4868      	ldr	r0, [pc, #416]	; (8002994 <menuface+0xf0c>)
 80027f2:	f7fe f803 	bl	80007fc <CLCD_Display>
 80027f6:	e0a1      	b.n	800293c <menuface+0xeb4>
																}
																else
																{
																	removeface(checkfaceid(keyadd2));
 80027f8:	797b      	ldrb	r3, [r7, #5]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fcc2 	bl	8003184 <checkfaceid>
 8002800:	4603      	mov	r3, r0
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fc70 	bl	80030e8 <removeface>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 8002808:	4a6b      	ldr	r2, [pc, #428]	; (80029b8 <menuface+0xf30>)
 800280a:	496d      	ldr	r1, [pc, #436]	; (80029c0 <menuface+0xf38>)
 800280c:	4861      	ldr	r0, [pc, #388]	; (8002994 <menuface+0xf0c>)
 800280e:	f7fd fff5 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 8002812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002816:	f002 f923 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  FACE 1 ", "    FACE 2 ");
 800281a:	4a5c      	ldr	r2, [pc, #368]	; (800298c <menuface+0xf04>)
 800281c:	495c      	ldr	r1, [pc, #368]	; (8002990 <menuface+0xf08>)
 800281e:	485d      	ldr	r0, [pc, #372]	; (8002994 <menuface+0xf0c>)
 8002820:	f7fd ffec 	bl	80007fc <CLCD_Display>
																}
																break;
 8002824:	e08a      	b.n	800293c <menuface+0xeb4>
															case 2:
																if (checkfaceid(keyadd2) == 0)
 8002826:	797b      	ldrb	r3, [r7, #5]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fcab 	bl	8003184 <checkfaceid>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10e      	bne.n	8002852 <menuface+0xdca>
																{
																	CLCD_Display(&LCD1, "CHUA CO FACE 2 ", "");
 8002834:	4a60      	ldr	r2, [pc, #384]	; (80029b8 <menuface+0xf30>)
 8002836:	4963      	ldr	r1, [pc, #396]	; (80029c4 <menuface+0xf3c>)
 8002838:	4856      	ldr	r0, [pc, #344]	; (8002994 <menuface+0xf0c>)
 800283a:	f7fd ffdf 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 800283e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002842:	f002 f90d 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8002846:	4a54      	ldr	r2, [pc, #336]	; (8002998 <menuface+0xf10>)
 8002848:	4954      	ldr	r1, [pc, #336]	; (800299c <menuface+0xf14>)
 800284a:	4852      	ldr	r0, [pc, #328]	; (8002994 <menuface+0xf0c>)
 800284c:	f7fd ffd6 	bl	80007fc <CLCD_Display>
 8002850:	e074      	b.n	800293c <menuface+0xeb4>
																}
																else
																{
																	removeface(checkfaceid(keyadd2));
 8002852:	797b      	ldrb	r3, [r7, #5]
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fc95 	bl	8003184 <checkfaceid>
 800285a:	4603      	mov	r3, r0
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fc43 	bl	80030e8 <removeface>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 8002862:	4a55      	ldr	r2, [pc, #340]	; (80029b8 <menuface+0xf30>)
 8002864:	4956      	ldr	r1, [pc, #344]	; (80029c0 <menuface+0xf38>)
 8002866:	484b      	ldr	r0, [pc, #300]	; (8002994 <menuface+0xf0c>)
 8002868:	f7fd ffc8 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 800286c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002870:	f002 f8f6 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  FACE 2 ", "    FACE 3 ");
 8002874:	4a48      	ldr	r2, [pc, #288]	; (8002998 <menuface+0xf10>)
 8002876:	4949      	ldr	r1, [pc, #292]	; (800299c <menuface+0xf14>)
 8002878:	4846      	ldr	r0, [pc, #280]	; (8002994 <menuface+0xf0c>)
 800287a:	f7fd ffbf 	bl	80007fc <CLCD_Display>
																}
																break;
 800287e:	e05d      	b.n	800293c <menuface+0xeb4>
															case 3:
																if (checkfaceid(keyadd2) == 0)
 8002880:	797b      	ldrb	r3, [r7, #5]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fc7e 	bl	8003184 <checkfaceid>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10e      	bne.n	80028ac <menuface+0xe24>
																{
																	CLCD_Display(&LCD1, "CHUA CO FACE 3 ", "");
 800288e:	4a4a      	ldr	r2, [pc, #296]	; (80029b8 <menuface+0xf30>)
 8002890:	494d      	ldr	r1, [pc, #308]	; (80029c8 <menuface+0xf40>)
 8002892:	4840      	ldr	r0, [pc, #256]	; (8002994 <menuface+0xf0c>)
 8002894:	f7fd ffb2 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 8002898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800289c:	f002 f8e0 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 80028a0:	4a3f      	ldr	r2, [pc, #252]	; (80029a0 <menuface+0xf18>)
 80028a2:	4940      	ldr	r1, [pc, #256]	; (80029a4 <menuface+0xf1c>)
 80028a4:	483b      	ldr	r0, [pc, #236]	; (8002994 <menuface+0xf0c>)
 80028a6:	f7fd ffa9 	bl	80007fc <CLCD_Display>
 80028aa:	e047      	b.n	800293c <menuface+0xeb4>
																}
																else
																{
																	removeface(checkfaceid(keyadd2));
 80028ac:	797b      	ldrb	r3, [r7, #5]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fc68 	bl	8003184 <checkfaceid>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fc16 	bl	80030e8 <removeface>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 80028bc:	4a3e      	ldr	r2, [pc, #248]	; (80029b8 <menuface+0xf30>)
 80028be:	4940      	ldr	r1, [pc, #256]	; (80029c0 <menuface+0xf38>)
 80028c0:	4834      	ldr	r0, [pc, #208]	; (8002994 <menuface+0xf0c>)
 80028c2:	f7fd ff9b 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 80028c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ca:	f002 f8c9 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  FACE 3 ", "    FACE 4 ");
 80028ce:	4a34      	ldr	r2, [pc, #208]	; (80029a0 <menuface+0xf18>)
 80028d0:	4934      	ldr	r1, [pc, #208]	; (80029a4 <menuface+0xf1c>)
 80028d2:	4830      	ldr	r0, [pc, #192]	; (8002994 <menuface+0xf0c>)
 80028d4:	f7fd ff92 	bl	80007fc <CLCD_Display>
																}
																break;
 80028d8:	e030      	b.n	800293c <menuface+0xeb4>
															case 4:
																if (checkfaceid(keyadd2) == 0)
 80028da:	797b      	ldrb	r3, [r7, #5]
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 fc51 	bl	8003184 <checkfaceid>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10e      	bne.n	8002906 <menuface+0xe7e>
																{
																	CLCD_Display(&LCD1, "CHUA CO FACE 4 ", "");
 80028e8:	4a33      	ldr	r2, [pc, #204]	; (80029b8 <menuface+0xf30>)
 80028ea:	4938      	ldr	r1, [pc, #224]	; (80029cc <menuface+0xf44>)
 80028ec:	4829      	ldr	r0, [pc, #164]	; (8002994 <menuface+0xf0c>)
 80028ee:	f7fd ff85 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 80028f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028f6:	f002 f8b3 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 80028fa:	4a2b      	ldr	r2, [pc, #172]	; (80029a8 <menuface+0xf20>)
 80028fc:	492b      	ldr	r1, [pc, #172]	; (80029ac <menuface+0xf24>)
 80028fe:	4825      	ldr	r0, [pc, #148]	; (8002994 <menuface+0xf0c>)
 8002900:	f7fd ff7c 	bl	80007fc <CLCD_Display>
 8002904:	e01a      	b.n	800293c <menuface+0xeb4>
																}
																else
																{
																	removeface(checkfaceid(keyadd2));
 8002906:	797b      	ldrb	r3, [r7, #5]
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fc3b 	bl	8003184 <checkfaceid>
 800290e:	4603      	mov	r3, r0
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fbe9 	bl	80030e8 <removeface>
																	CLCD_Display(&LCD1, "XOA THANH CONG", "");
 8002916:	4a28      	ldr	r2, [pc, #160]	; (80029b8 <menuface+0xf30>)
 8002918:	4929      	ldr	r1, [pc, #164]	; (80029c0 <menuface+0xf38>)
 800291a:	481e      	ldr	r0, [pc, #120]	; (8002994 <menuface+0xf0c>)
 800291c:	f7fd ff6e 	bl	80007fc <CLCD_Display>
																	HAL_Delay(1000);
 8002920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002924:	f002 f89c 	bl	8004a60 <HAL_Delay>
																	CLCD_Display(&LCD1, "=>  FACE 4 ", "    BACK ");
 8002928:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <menuface+0xf20>)
 800292a:	4920      	ldr	r1, [pc, #128]	; (80029ac <menuface+0xf24>)
 800292c:	4819      	ldr	r0, [pc, #100]	; (8002994 <menuface+0xf0c>)
 800292e:	f7fd ff65 	bl	80007fc <CLCD_Display>
																}
																break;
 8002932:	e003      	b.n	800293c <menuface+0xeb4>
															default:
																back12 = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	71fb      	strb	r3, [r7, #7]
																break;
 8002938:	e000      	b.n	800293c <menuface+0xeb4>
															}
														}
 800293a:	bf00      	nop
													while (back12 == 1)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	2b01      	cmp	r3, #1
 8002940:	f43f aea8 	beq.w	8002694 <menuface+0xc0c>
													}
													CLCD_Display(&LCD1, "  FACE NGUOI LON", "=>FACE TRE EM");
 8002944:	4a22      	ldr	r2, [pc, #136]	; (80029d0 <menuface+0xf48>)
 8002946:	4923      	ldr	r1, [pc, #140]	; (80029d4 <menuface+0xf4c>)
 8002948:	4812      	ldr	r0, [pc, #72]	; (8002994 <menuface+0xf0c>)
 800294a:	f7fd ff57 	bl	80007fc <CLCD_Display>
													break;
 800294e:	e003      	b.n	8002958 <menuface+0xed0>
												default:
													backrm10 = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	72fb      	strb	r3, [r7, #11]
													break;
 8002954:	e000      	b.n	8002958 <menuface+0xed0>
												}
											}
 8002956:	bf00      	nop
										while (backrm10 == 1)
 8002958:	7afb      	ldrb	r3, [r7, #11]
 800295a:	2b01      	cmp	r3, #1
 800295c:	f43f aca7 	beq.w	80022ae <menuface+0x826>
										}
										CLCD_Display(&LCD1, "=> CHON FACE", "   QUET FACE");
 8002960:	4a1d      	ldr	r2, [pc, #116]	; (80029d8 <menuface+0xf50>)
 8002962:	491e      	ldr	r1, [pc, #120]	; (80029dc <menuface+0xf54>)
 8002964:	480b      	ldr	r0, [pc, #44]	; (8002994 <menuface+0xf0c>)
 8002966:	f7fd ff49 	bl	80007fc <CLCD_Display>
										break;
 800296a:	e070      	b.n	8002a4e <menuface+0xfc6>
									case 1:
										CLCD_Display(&LCD1, "QUET FACE", "=>  BACK ");
 800296c:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <menuface+0xf28>)
 800296e:	491c      	ldr	r1, [pc, #112]	; (80029e0 <menuface+0xf58>)
 8002970:	4808      	ldr	r0, [pc, #32]	; (8002994 <menuface+0xf0c>)
 8002972:	f7fd ff43 	bl	80007fc <CLCD_Display>
										CDC_Transmit_FS("Rem.00", 6);
 8002976:	2106      	movs	r1, #6
 8002978:	481a      	ldr	r0, [pc, #104]	; (80029e4 <menuface+0xf5c>)
 800297a:	f009 ffe9 	bl	800c950 <CDC_Transmit_FS>
										uint8_t rmquet = 1;
 800297e:	2301      	movs	r3, #1
 8002980:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002982:	e053      	b.n	8002a2c <menuface+0xfa4>
 8002984:	40010c00 	.word	0x40010c00
 8002988:	20000000 	.word	0x20000000
 800298c:	0800de58 	.word	0x0800de58
 8002990:	0800de64 	.word	0x0800de64
 8002994:	20000348 	.word	0x20000348
 8002998:	0800de70 	.word	0x0800de70
 800299c:	0800de7c 	.word	0x0800de7c
 80029a0:	0800de88 	.word	0x0800de88
 80029a4:	0800de94 	.word	0x0800de94
 80029a8:	0800dc38 	.word	0x0800dc38
 80029ac:	0800dea0 	.word	0x0800dea0
 80029b0:	0800dc50 	.word	0x0800dc50
 80029b4:	40010800 	.word	0x40010800
 80029b8:	0800dc5c 	.word	0x0800dc5c
 80029bc:	0800df4c 	.word	0x0800df4c
 80029c0:	0800dd30 	.word	0x0800dd30
 80029c4:	0800df5c 	.word	0x0800df5c
 80029c8:	0800df6c 	.word	0x0800df6c
 80029cc:	0800df7c 	.word	0x0800df7c
 80029d0:	0800de34 	.word	0x0800de34
 80029d4:	0800de44 	.word	0x0800de44
 80029d8:	0800df0c 	.word	0x0800df0c
 80029dc:	0800df1c 	.word	0x0800df1c
 80029e0:	0800df8c 	.word	0x0800df8c
 80029e4:	0800df98 	.word	0x0800df98
										{
											if( Rx_Buffer[0] == 'T'){
 80029e8:	4b47      	ldr	r3, [pc, #284]	; (8002b08 <menuface+0x1080>)
 80029ea:	f993 3000 	ldrsb.w	r3, [r3]
 80029ee:	2b54      	cmp	r3, #84	; 0x54
 80029f0:	d112      	bne.n	8002a18 <menuface+0xf90>
												CLCD_Display(&LCD1, "XOA THANH CONG", "");
 80029f2:	4a46      	ldr	r2, [pc, #280]	; (8002b0c <menuface+0x1084>)
 80029f4:	4946      	ldr	r1, [pc, #280]	; (8002b10 <menuface+0x1088>)
 80029f6:	4847      	ldr	r0, [pc, #284]	; (8002b14 <menuface+0x108c>)
 80029f8:	f7fd ff00 	bl	80007fc <CLCD_Display>
												HAL_Delay(2000);
 80029fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a00:	f002 f82e 	bl	8004a60 <HAL_Delay>
												memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002a04:	2280      	movs	r2, #128	; 0x80
 8002a06:	2100      	movs	r1, #0
 8002a08:	483f      	ldr	r0, [pc, #252]	; (8002b08 <menuface+0x1080>)
 8002a0a:	f00a fbb7 	bl	800d17c <memset>
												CLCD_Display(&LCD1, "QUET FACE", "=>  BACK ");
 8002a0e:	4a42      	ldr	r2, [pc, #264]	; (8002b18 <menuface+0x1090>)
 8002a10:	4942      	ldr	r1, [pc, #264]	; (8002b1c <menuface+0x1094>)
 8002a12:	4840      	ldr	r0, [pc, #256]	; (8002b14 <menuface+0x108c>)
 8002a14:	f7fd fef2 	bl	80007fc <CLCD_Display>
											}
											if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 8002a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a1c:	4840      	ldr	r0, [pc, #256]	; (8002b20 <menuface+0x1098>)
 8002a1e:	f001 ff0d 	bl	800483c <checkbuton>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <menuface+0xfa4>
											{
												rmquet = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	71bb      	strb	r3, [r7, #6]
										while (rmquet)
 8002a2c:	79bb      	ldrb	r3, [r7, #6]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1da      	bne.n	80029e8 <menuface+0xf60>
											}
										}
										CDC_Transmit_FS("Exit  ", 6);
 8002a32:	2106      	movs	r1, #6
 8002a34:	483b      	ldr	r0, [pc, #236]	; (8002b24 <menuface+0x109c>)
 8002a36:	f009 ff8b 	bl	800c950 <CDC_Transmit_FS>
										CLCD_Display(&LCD1, "   CHON FACE", "=> QUET FACE");;
 8002a3a:	4a3b      	ldr	r2, [pc, #236]	; (8002b28 <menuface+0x10a0>)
 8002a3c:	493b      	ldr	r1, [pc, #236]	; (8002b2c <menuface+0x10a4>)
 8002a3e:	4835      	ldr	r0, [pc, #212]	; (8002b14 <menuface+0x108c>)
 8002a40:	f7fd fedc 	bl	80007fc <CLCD_Display>
										break;
 8002a44:	e003      	b.n	8002a4e <menuface+0xfc6>
									default:
										backrm1 = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	737b      	strb	r3, [r7, #13]
										break;
 8002a4a:	e000      	b.n	8002a4e <menuface+0xfc6>
									}
								}
 8002a4c:	bf00      	nop
							while (backrm1 == 1)
 8002a4e:	7b7b      	ldrb	r3, [r7, #13]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	f43f abd7 	beq.w	8002204 <menuface+0x77c>
							}
							CLCD_Display(&LCD1, "=> XOA 1 FACE", "   XOA TAT CA");
 8002a56:	4a36      	ldr	r2, [pc, #216]	; (8002b30 <menuface+0x10a8>)
 8002a58:	4936      	ldr	r1, [pc, #216]	; (8002b34 <menuface+0x10ac>)
 8002a5a:	482e      	ldr	r0, [pc, #184]	; (8002b14 <menuface+0x108c>)
 8002a5c:	f7fd fece 	bl	80007fc <CLCD_Display>
							break;
 8002a60:	e02c      	b.n	8002abc <menuface+0x1034>
						case 1:
							sprintf(Tx_Buffer , "Rem.99" );
 8002a62:	4935      	ldr	r1, [pc, #212]	; (8002b38 <menuface+0x10b0>)
 8002a64:	4835      	ldr	r0, [pc, #212]	; (8002b3c <menuface+0x10b4>)
 8002a66:	f00a fb91 	bl	800d18c <siprintf>
							CDC_Transmit_FS(Tx_Buffer, 6);
 8002a6a:	2106      	movs	r1, #6
 8002a6c:	4833      	ldr	r0, [pc, #204]	; (8002b3c <menuface+0x10b4>)
 8002a6e:	f009 ff6f 	bl	800c950 <CDC_Transmit_FS>
							CLCD_Display(&LCD1, "WAITING....", "");
 8002a72:	4a26      	ldr	r2, [pc, #152]	; (8002b0c <menuface+0x1084>)
 8002a74:	4932      	ldr	r1, [pc, #200]	; (8002b40 <menuface+0x10b8>)
 8002a76:	4827      	ldr	r0, [pc, #156]	; (8002b14 <menuface+0x108c>)
 8002a78:	f7fd fec0 	bl	80007fc <CLCD_Display>
							exitmenu = 60;
 8002a7c:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <menuface+0x10bc>)
 8002a7e:	223c      	movs	r2, #60	; 0x3c
 8002a80:	701a      	strb	r2, [r3, #0]
							while(exitmenu != 0){
 8002a82:	e00f      	b.n	8002aa4 <menuface+0x101c>
								if(Rx_Buffer[0] == 'T'){
 8002a84:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <menuface+0x1080>)
 8002a86:	f993 3000 	ldrsb.w	r3, [r3]
 8002a8a:	2b54      	cmp	r3, #84	; 0x54
 8002a8c:	d10a      	bne.n	8002aa4 <menuface+0x101c>
									CLCD_Display(&LCD1, "XOA THANH CONG", "");
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <menuface+0x1084>)
 8002a90:	491f      	ldr	r1, [pc, #124]	; (8002b10 <menuface+0x1088>)
 8002a92:	4820      	ldr	r0, [pc, #128]	; (8002b14 <menuface+0x108c>)
 8002a94:	f7fd feb2 	bl	80007fc <CLCD_Display>
									memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002a98:	2280      	movs	r2, #128	; 0x80
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	481a      	ldr	r0, [pc, #104]	; (8002b08 <menuface+0x1080>)
 8002a9e:	f00a fb6d 	bl	800d17c <memset>
									break;
 8002aa2:	e003      	b.n	8002aac <menuface+0x1024>
							while(exitmenu != 0){
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <menuface+0x10bc>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1eb      	bne.n	8002a84 <menuface+0xffc>
								}
							}
							exitmenu = 0;
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <menuface+0x10bc>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
							break;
 8002ab2:	e003      	b.n	8002abc <menuface+0x1034>
						default:
							backrm = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]
							break;
 8002ab8:	e000      	b.n	8002abc <menuface+0x1034>
						}
					}
 8002aba:	bf00      	nop
				while (backrm == 1)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	f43f ab31 	beq.w	8002126 <menuface+0x69e>
				}
				CLCD_Display(&LCD1, "    THEM FACE", "=>  XOA FACE");
 8002ac4:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <menuface+0x10c0>)
 8002ac6:	4921      	ldr	r1, [pc, #132]	; (8002b4c <menuface+0x10c4>)
 8002ac8:	4812      	ldr	r0, [pc, #72]	; (8002b14 <menuface+0x108c>)
 8002aca:	f7fd fe97 	bl	80007fc <CLCD_Display>
				break;
 8002ace:	e010      	b.n	8002af2 <menuface+0x106a>
			case 2:
				checkface();
 8002ad0:	f000 fb8e 	bl	80031f0 <checkface>
				CDC_Transmit_FS("Exit  ", 6);
 8002ad4:	2106      	movs	r1, #6
 8002ad6:	4813      	ldr	r0, [pc, #76]	; (8002b24 <menuface+0x109c>)
 8002ad8:	f009 ff3a 	bl	800c950 <CDC_Transmit_FS>
				CLCD_Display(&LCD1, "    XOA FACE", "=>  TRA FACE");
 8002adc:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <menuface+0x10c8>)
 8002ade:	491d      	ldr	r1, [pc, #116]	; (8002b54 <menuface+0x10cc>)
 8002ae0:	480c      	ldr	r0, [pc, #48]	; (8002b14 <menuface+0x108c>)
 8002ae2:	f7fd fe8b 	bl	80007fc <CLCD_Display>
				break;
 8002ae6:	e004      	b.n	8002af2 <menuface+0x106a>
			default:
				exitmenu = 0;
 8002ae8:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <menuface+0x10bc>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
				break;
 8002aee:	e000      	b.n	8002af2 <menuface+0x106a>
			}
		}
 8002af0:	bf00      	nop
	while (exitmenu )
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <menuface+0x10bc>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f47e afd5 	bne.w	8001aa6 <menuface+0x1e>
	}
	CLCD_Clear(&LCD1);
 8002afc:	4805      	ldr	r0, [pc, #20]	; (8002b14 <menuface+0x108c>)
 8002afe:	f7fd fe5f 	bl	80007c0 <CLCD_Clear>
}
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	200002c8 	.word	0x200002c8
 8002b0c:	0800dc5c 	.word	0x0800dc5c
 8002b10:	0800dd30 	.word	0x0800dd30
 8002b14:	20000348 	.word	0x20000348
 8002b18:	0800dc50 	.word	0x0800dc50
 8002b1c:	0800df8c 	.word	0x0800df8c
 8002b20:	40010800 	.word	0x40010800
 8002b24:	0800dfa0 	.word	0x0800dfa0
 8002b28:	0800df2c 	.word	0x0800df2c
 8002b2c:	0800df3c 	.word	0x0800df3c
 8002b30:	0800dcc0 	.word	0x0800dcc0
 8002b34:	0800defc 	.word	0x0800defc
 8002b38:	0800dfa8 	.word	0x0800dfa8
 8002b3c:	200003bc 	.word	0x200003bc
 8002b40:	0800dfb0 	.word	0x0800dfb0
 8002b44:	20000000 	.word	0x20000000
 8002b48:	0800ddc0 	.word	0x0800ddc0
 8002b4c:	0800ddd0 	.word	0x0800ddd0
 8002b50:	0800dde0 	.word	0x0800dde0
 8002b54:	0800dda0 	.word	0x0800dda0

08002b58 <adduid>:

void adduid(uint8_t key)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
	setaddress();
 8002b62:	f000 f9bb 	bl	8002edc <setaddress>
	CLCD_Display(&LCD1, "QUET THE", "=>  BACK ");
 8002b66:	4a2a      	ldr	r2, [pc, #168]	; (8002c10 <adduid+0xb8>)
 8002b68:	492a      	ldr	r1, [pc, #168]	; (8002c14 <adduid+0xbc>)
 8002b6a:	482b      	ldr	r0, [pc, #172]	; (8002c18 <adduid+0xc0>)
 8002b6c:	f7fd fe46 	bl	80007fc <CLCD_Display>
	while (exitmenu)
 8002b70:	e045      	b.n	8002bfe <adduid+0xa6>
	{
		if (TM_MFRC522_Check(IDCard) == MI_OK)
 8002b72:	482a      	ldr	r0, [pc, #168]	; (8002c1c <adduid+0xc4>)
 8002b74:	f001 f900 	bl	8003d78 <TM_MFRC522_Check>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d137      	bne.n	8002bee <adduid+0x96>
		{
			swipesuccess();
 8002b7e:	f001 fdf7 	bl	8004770 <swipesuccess>
			if (CheckListUID(IDCard) == 0)
 8002b82:	4826      	ldr	r0, [pc, #152]	; (8002c1c <adduid+0xc4>)
 8002b84:	f001 fdc4 	bl	8004710 <CheckListUID>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d121      	bne.n	8002bd2 <adduid+0x7a>
			{
				IDCard[5] = key;
 8002b8e:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <adduid+0xc4>)
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	7153      	strb	r3, [r2, #5]
				Flash_Write_Array(AddressUID, IDCard, 6);
 8002b94:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <adduid+0xc8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2206      	movs	r2, #6
 8002b9a:	4920      	ldr	r1, [pc, #128]	; (8002c1c <adduid+0xc4>)
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fb09 	bl	80001b4 <Flash_Write_Array>
				AddressUID += 8;
 8002ba2:	4b1f      	ldr	r3, [pc, #124]	; (8002c20 <adduid+0xc8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <adduid+0xc8>)
 8002baa:	6013      	str	r3, [r2, #0]
				resetflash();
 8002bac:	f000 f9d8 	bl	8002f60 <resetflash>
				CLCD_Clear(&LCD1);
 8002bb0:	4819      	ldr	r0, [pc, #100]	; (8002c18 <adduid+0xc0>)
 8002bb2:	f7fd fe05 	bl	80007c0 <CLCD_Clear>
				CLCD_SetCursor(&LCD1, 0, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4817      	ldr	r0, [pc, #92]	; (8002c18 <adduid+0xc0>)
 8002bbc:	f7fd fd82 	bl	80006c4 <CLCD_SetCursor>
				CLCD_WriteString(&LCD1, "THANH CONG");
 8002bc0:	4918      	ldr	r1, [pc, #96]	; (8002c24 <adduid+0xcc>)
 8002bc2:	4815      	ldr	r0, [pc, #84]	; (8002c18 <adduid+0xc0>)
 8002bc4:	f7fd fde5 	bl	8000792 <CLCD_WriteString>
				HAL_Delay(1000);
 8002bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bcc:	f001 ff48 	bl	8004a60 <HAL_Delay>
				return;
 8002bd0:	e01b      	b.n	8002c0a <adduid+0xb2>
			}
			else
			{
				CLCD_Display(&LCD1, "THE DA TON TAI", "");
 8002bd2:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <adduid+0xd0>)
 8002bd4:	4915      	ldr	r1, [pc, #84]	; (8002c2c <adduid+0xd4>)
 8002bd6:	4810      	ldr	r0, [pc, #64]	; (8002c18 <adduid+0xc0>)
 8002bd8:	f7fd fe10 	bl	80007fc <CLCD_Display>
				HAL_Delay(1000);
 8002bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002be0:	f001 ff3e 	bl	8004a60 <HAL_Delay>
				CLCD_Display(&LCD1, "QUET THE", "=>  BACK ");
 8002be4:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <adduid+0xb8>)
 8002be6:	490b      	ldr	r1, [pc, #44]	; (8002c14 <adduid+0xbc>)
 8002be8:	480b      	ldr	r0, [pc, #44]	; (8002c18 <adduid+0xc0>)
 8002bea:	f7fd fe07 	bl	80007fc <CLCD_Display>
			}
		}
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 8002bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bf2:	480f      	ldr	r0, [pc, #60]	; (8002c30 <adduid+0xd8>)
 8002bf4:	f001 fe22 	bl	800483c <checkbuton>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d004      	beq.n	8002c08 <adduid+0xb0>
	while (exitmenu)
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <adduid+0xdc>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1b5      	bne.n	8002b72 <adduid+0x1a>
 8002c06:	e000      	b.n	8002c0a <adduid+0xb2>
		{
			return;
 8002c08:	bf00      	nop
		}
	}
}
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	0800dc50 	.word	0x0800dc50
 8002c14:	0800dd70 	.word	0x0800dd70
 8002c18:	20000348 	.word	0x20000348
 8002c1c:	200002b8 	.word	0x200002b8
 8002c20:	20000004 	.word	0x20000004
 8002c24:	0800dfbc 	.word	0x0800dfbc
 8002c28:	0800dc5c 	.word	0x0800dc5c
 8002c2c:	0800dfc8 	.word	0x0800dfc8
 8002c30:	40010800 	.word	0x40010800
 8002c34:	20000000 	.word	0x20000000

08002c38 <checkthe>:
void checkthe(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
	exitmenu = 30;
 8002c3e:	4b4e      	ldr	r3, [pc, #312]	; (8002d78 <checkthe+0x140>)
 8002c40:	221e      	movs	r2, #30
 8002c42:	701a      	strb	r2, [r3, #0]
	CLCD_Display(&LCD1, "QUET THE", "=>  BACK");
 8002c44:	4a4d      	ldr	r2, [pc, #308]	; (8002d7c <checkthe+0x144>)
 8002c46:	494e      	ldr	r1, [pc, #312]	; (8002d80 <checkthe+0x148>)
 8002c48:	484e      	ldr	r0, [pc, #312]	; (8002d84 <checkthe+0x14c>)
 8002c4a:	f7fd fdd7 	bl	80007fc <CLCD_Display>
	while (exitmenu )
 8002c4e:	e089      	b.n	8002d64 <checkthe+0x12c>
	{
		if (TM_MFRC522_Check(IDCard) == MI_OK)
 8002c50:	484d      	ldr	r0, [pc, #308]	; (8002d88 <checkthe+0x150>)
 8002c52:	f001 f891 	bl	8003d78 <TM_MFRC522_Check>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d17b      	bne.n	8002d54 <checkthe+0x11c>
		{
			swipesuccess();
 8002c5c:	f001 fd88 	bl	8004770 <swipesuccess>
			if (CheckListUID(IDCard) == 0)
 8002c60:	4849      	ldr	r0, [pc, #292]	; (8002d88 <checkthe+0x150>)
 8002c62:	f001 fd55 	bl	8004710 <CheckListUID>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d112      	bne.n	8002c92 <checkthe+0x5a>
			{
				CLCD_Display(&LCD1, "THE CHUA THEM", "");
 8002c6c:	4a47      	ldr	r2, [pc, #284]	; (8002d8c <checkthe+0x154>)
 8002c6e:	4948      	ldr	r1, [pc, #288]	; (8002d90 <checkthe+0x158>)
 8002c70:	4844      	ldr	r0, [pc, #272]	; (8002d84 <checkthe+0x14c>)
 8002c72:	f7fd fdc3 	bl	80007fc <CLCD_Display>
				HAL_Delay(1000);
 8002c76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c7a:	f001 fef1 	bl	8004a60 <HAL_Delay>
				CLCD_Display(&LCD1, "QUET THE", "=>  BACK");
 8002c7e:	4a3f      	ldr	r2, [pc, #252]	; (8002d7c <checkthe+0x144>)
 8002c80:	493f      	ldr	r1, [pc, #252]	; (8002d80 <checkthe+0x148>)
 8002c82:	4840      	ldr	r0, [pc, #256]	; (8002d84 <checkthe+0x14c>)
 8002c84:	f7fd fdba 	bl	80007fc <CLCD_Display>
				HAL_Delay(1000);
 8002c88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c8c:	f001 fee8 	bl	8004a60 <HAL_Delay>
 8002c90:	e060      	b.n	8002d54 <checkthe+0x11c>
			}
			else
			{
				uint8_t key = CheckListUID(IDCard);
 8002c92:	483d      	ldr	r0, [pc, #244]	; (8002d88 <checkthe+0x150>)
 8002c94:	f001 fd3c 	bl	8004710 <CheckListUID>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	717b      	strb	r3, [r7, #5]
				CLCD_Clear(&LCD1);
 8002caa:	4836      	ldr	r0, [pc, #216]	; (8002d84 <checkthe+0x14c>)
 8002cac:	f7fd fd88 	bl	80007c0 <CLCD_Clear>
				switch (key1)
 8002cb0:	797b      	ldrb	r3, [r7, #5]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d109      	bne.n	8002cca <checkthe+0x92>
				{
				case 1:
					CLCD_SetCursor(&LCD1, 0, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4832      	ldr	r0, [pc, #200]	; (8002d84 <checkthe+0x14c>)
 8002cbc:	f7fd fd02 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE NGUOI LON");
 8002cc0:	4934      	ldr	r1, [pc, #208]	; (8002d94 <checkthe+0x15c>)
 8002cc2:	4830      	ldr	r0, [pc, #192]	; (8002d84 <checkthe+0x14c>)
 8002cc4:	f7fd fd65 	bl	8000792 <CLCD_WriteString>
					break;
 8002cc8:	e009      	b.n	8002cde <checkthe+0xa6>
				default:
					CLCD_SetCursor(&LCD1, 0, 0);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2100      	movs	r1, #0
 8002cce:	482d      	ldr	r0, [pc, #180]	; (8002d84 <checkthe+0x14c>)
 8002cd0:	f7fd fcf8 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE TRE EM");
 8002cd4:	4930      	ldr	r1, [pc, #192]	; (8002d98 <checkthe+0x160>)
 8002cd6:	482b      	ldr	r0, [pc, #172]	; (8002d84 <checkthe+0x14c>)
 8002cd8:	f7fd fd5b 	bl	8000792 <CLCD_WriteString>
					break;
 8002cdc:	bf00      	nop
				}
				switch (key2)
 8002cde:	79bb      	ldrb	r3, [r7, #6]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d01a      	beq.n	8002d1a <checkthe+0xe2>
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	dc22      	bgt.n	8002d2e <checkthe+0xf6>
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d002      	beq.n	8002cf2 <checkthe+0xba>
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d00a      	beq.n	8002d06 <checkthe+0xce>
 8002cf0:	e01d      	b.n	8002d2e <checkthe+0xf6>
				{
				case 1:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4823      	ldr	r0, [pc, #140]	; (8002d84 <checkthe+0x14c>)
 8002cf8:	f7fd fce4 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 1");
 8002cfc:	4927      	ldr	r1, [pc, #156]	; (8002d9c <checkthe+0x164>)
 8002cfe:	4821      	ldr	r0, [pc, #132]	; (8002d84 <checkthe+0x14c>)
 8002d00:	f7fd fd47 	bl	8000792 <CLCD_WriteString>
					break;
 8002d04:	e01d      	b.n	8002d42 <checkthe+0x10a>
				case 2:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002d06:	2201      	movs	r2, #1
 8002d08:	2100      	movs	r1, #0
 8002d0a:	481e      	ldr	r0, [pc, #120]	; (8002d84 <checkthe+0x14c>)
 8002d0c:	f7fd fcda 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 2");
 8002d10:	4923      	ldr	r1, [pc, #140]	; (8002da0 <checkthe+0x168>)
 8002d12:	481c      	ldr	r0, [pc, #112]	; (8002d84 <checkthe+0x14c>)
 8002d14:	f7fd fd3d 	bl	8000792 <CLCD_WriteString>
					break;
 8002d18:	e013      	b.n	8002d42 <checkthe+0x10a>
				case 3:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4819      	ldr	r0, [pc, #100]	; (8002d84 <checkthe+0x14c>)
 8002d20:	f7fd fcd0 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 3");
 8002d24:	491f      	ldr	r1, [pc, #124]	; (8002da4 <checkthe+0x16c>)
 8002d26:	4817      	ldr	r0, [pc, #92]	; (8002d84 <checkthe+0x14c>)
 8002d28:	f7fd fd33 	bl	8000792 <CLCD_WriteString>
					break;
 8002d2c:	e009      	b.n	8002d42 <checkthe+0x10a>
				default:
					CLCD_SetCursor(&LCD1, 0, 1);
 8002d2e:	2201      	movs	r2, #1
 8002d30:	2100      	movs	r1, #0
 8002d32:	4814      	ldr	r0, [pc, #80]	; (8002d84 <checkthe+0x14c>)
 8002d34:	f7fd fcc6 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE 4");
 8002d38:	491b      	ldr	r1, [pc, #108]	; (8002da8 <checkthe+0x170>)
 8002d3a:	4812      	ldr	r0, [pc, #72]	; (8002d84 <checkthe+0x14c>)
 8002d3c:	f7fd fd29 	bl	8000792 <CLCD_WriteString>
					break;
 8002d40:	bf00      	nop
				}
				HAL_Delay(1000);
 8002d42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d46:	f001 fe8b 	bl	8004a60 <HAL_Delay>
				CLCD_Display(&LCD1, "QUET THE", "=>  BACK");
 8002d4a:	4a0c      	ldr	r2, [pc, #48]	; (8002d7c <checkthe+0x144>)
 8002d4c:	490c      	ldr	r1, [pc, #48]	; (8002d80 <checkthe+0x148>)
 8002d4e:	480d      	ldr	r0, [pc, #52]	; (8002d84 <checkthe+0x14c>)
 8002d50:	f7fd fd54 	bl	80007fc <CLCD_Display>
			}
		}
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 8002d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d58:	4814      	ldr	r0, [pc, #80]	; (8002dac <checkthe+0x174>)
 8002d5a:	f001 fd6f 	bl	800483c <checkbuton>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d005      	beq.n	8002d70 <checkthe+0x138>
	while (exitmenu )
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <checkthe+0x140>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f47f af71 	bne.w	8002c50 <checkthe+0x18>
 8002d6e:	e000      	b.n	8002d72 <checkthe+0x13a>
		{
			return;
 8002d70:	bf00      	nop
		}
	}
}
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	0800db7c 	.word	0x0800db7c
 8002d80:	0800dd70 	.word	0x0800dd70
 8002d84:	20000348 	.word	0x20000348
 8002d88:	200002b8 	.word	0x200002b8
 8002d8c:	0800dc5c 	.word	0x0800dc5c
 8002d90:	0800dd7c 	.word	0x0800dd7c
 8002d94:	0800dfd8 	.word	0x0800dfd8
 8002d98:	0800dfe8 	.word	0x0800dfe8
 8002d9c:	0800dff4 	.word	0x0800dff4
 8002da0:	0800dffc 	.word	0x0800dffc
 8002da4:	0800e004 	.word	0x0800e004
 8002da8:	0800e00c 	.word	0x0800e00c
 8002dac:	40010800 	.word	0x40010800

08002db0 <CheckKey>:
uint32_t CheckKey(uint8_t key)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
	uint32_t pt = StartAddressUID;
 8002dba:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <CheckKey+0x58>)
 8002dbc:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002dbe:	e015      	b.n	8002dec <CheckKey+0x3c>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3306      	adds	r3, #6
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd fa24 	bl	8000212 <Flash_Read_2Byte>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d107      	bne.n	8002de6 <CheckKey+0x36>
			if (*(uint8_t *)(pt + 5) == key)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3305      	adds	r3, #5
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	79fa      	ldrb	r2, [r7, #7]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d101      	bne.n	8002de6 <CheckKey+0x36>
				return pt;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	e00b      	b.n	8002dfe <CheckKey+0x4e>
		}
		pt = pt + 8;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3308      	adds	r3, #8
 8002dea:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3305      	adds	r3, #5
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fa02 	bl	80001fa <Flash_Read_Byte>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2bff      	cmp	r3, #255	; 0xff
 8002dfa:	d1e1      	bne.n	8002dc0 <CheckKey+0x10>
	}
	return 0;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	0800f000 	.word	0x0800f000

08002e0c <removeuid>:
void removeuid(uint32_t addressrm)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	Flash_Write_2Byte(addressrm + 6, 0x0000);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3306      	adds	r3, #6
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd f9b2 	bl	8000184 <Flash_Write_2Byte>
}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <startadd>:
void startadd(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
	CLCD_Display(&LCD1, "MOI QUET THE", "THE NGUOI LON");
 8002e2c:	4a24      	ldr	r2, [pc, #144]	; (8002ec0 <startadd+0x98>)
 8002e2e:	4925      	ldr	r1, [pc, #148]	; (8002ec4 <startadd+0x9c>)
 8002e30:	4825      	ldr	r0, [pc, #148]	; (8002ec8 <startadd+0xa0>)
 8002e32:	f7fd fce3 	bl	80007fc <CLCD_Display>
	setaddress();
 8002e36:	f000 f851 	bl	8002edc <setaddress>
	while (1)
		{
			if (TM_MFRC522_Check(IDCard) == MI_OK)
 8002e3a:	4824      	ldr	r0, [pc, #144]	; (8002ecc <startadd+0xa4>)
 8002e3c:	f000 ff9c 	bl	8003d78 <TM_MFRC522_Check>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f9      	bne.n	8002e3a <startadd+0x12>
			{
				swipesuccess();
 8002e46:	f001 fc93 	bl	8004770 <swipesuccess>
				if (CheckListUID(IDCard) == 0)
 8002e4a:	4820      	ldr	r0, [pc, #128]	; (8002ecc <startadd+0xa4>)
 8002e4c:	f001 fc60 	bl	8004710 <CheckListUID>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10f      	bne.n	8002e76 <startadd+0x4e>
				{
					IDCard[5] = 0x11;
 8002e56:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <startadd+0xa4>)
 8002e58:	2211      	movs	r2, #17
 8002e5a:	715a      	strb	r2, [r3, #5]
					Flash_Write_Array(AddressUID, IDCard, 6);
 8002e5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <startadd+0xa8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2206      	movs	r2, #6
 8002e62:	491a      	ldr	r1, [pc, #104]	; (8002ecc <startadd+0xa4>)
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd f9a5 	bl	80001b4 <Flash_Write_Array>
					AddressUID += 8;
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <startadd+0xa8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3308      	adds	r3, #8
 8002e70:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <startadd+0xa8>)
 8002e72:	6013      	str	r3, [r2, #0]
					break;
 8002e74:	e015      	b.n	8002ea2 <startadd+0x7a>
				}
				else
				{
					CLCD_Clear(&LCD1);
 8002e76:	4814      	ldr	r0, [pc, #80]	; (8002ec8 <startadd+0xa0>)
 8002e78:	f7fd fca2 	bl	80007c0 <CLCD_Clear>
					CLCD_SetCursor(&LCD1, 0, 0);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4811      	ldr	r0, [pc, #68]	; (8002ec8 <startadd+0xa0>)
 8002e82:	f7fd fc1f 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "THE DA TON TAI");
 8002e86:	4913      	ldr	r1, [pc, #76]	; (8002ed4 <startadd+0xac>)
 8002e88:	480f      	ldr	r0, [pc, #60]	; (8002ec8 <startadd+0xa0>)
 8002e8a:	f7fd fc82 	bl	8000792 <CLCD_WriteString>
					HAL_Delay(1000);
 8002e8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e92:	f001 fde5 	bl	8004a60 <HAL_Delay>
					CLCD_Display(&LCD1, "MOI QUET THE", "THE NGUOI LON");
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <startadd+0x98>)
 8002e98:	490a      	ldr	r1, [pc, #40]	; (8002ec4 <startadd+0x9c>)
 8002e9a:	480b      	ldr	r0, [pc, #44]	; (8002ec8 <startadd+0xa0>)
 8002e9c:	f7fd fcae 	bl	80007fc <CLCD_Display>
			if (TM_MFRC522_Check(IDCard) == MI_OK)
 8002ea0:	e7cb      	b.n	8002e3a <startadd+0x12>
				}
			}
		}
	CLCD_Display(&LCD1, "THEM THANH CONG", "THE NGUOI LON");
 8002ea2:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <startadd+0x98>)
 8002ea4:	490c      	ldr	r1, [pc, #48]	; (8002ed8 <startadd+0xb0>)
 8002ea6:	4808      	ldr	r0, [pc, #32]	; (8002ec8 <startadd+0xa0>)
 8002ea8:	f7fd fca8 	bl	80007fc <CLCD_Display>
	HAL_Delay(1000);
 8002eac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002eb0:	f001 fdd6 	bl	8004a60 <HAL_Delay>
	CLCD_Clear(&LCD1);
 8002eb4:	4804      	ldr	r0, [pc, #16]	; (8002ec8 <startadd+0xa0>)
 8002eb6:	f7fd fc83 	bl	80007c0 <CLCD_Clear>
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	0800dfd8 	.word	0x0800dfd8
 8002ec4:	0800e014 	.word	0x0800e014
 8002ec8:	20000348 	.word	0x20000348
 8002ecc:	200002b8 	.word	0x200002b8
 8002ed0:	20000004 	.word	0x20000004
 8002ed4:	0800dfc8 	.word	0x0800dfc8
 8002ed8:	0800e024 	.word	0x0800e024

08002edc <setaddress>:
void setaddress(void){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <setaddress+0x30>)
 8002ee4:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002ee6:	e002      	b.n	8002eee <setaddress+0x12>
	{
		pt = pt + 8;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3308      	adds	r3, #8
 8002eec:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3305      	adds	r3, #5
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd f981 	bl	80001fa <Flash_Read_Byte>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2bff      	cmp	r3, #255	; 0xff
 8002efc:	d1f4      	bne.n	8002ee8 <setaddress+0xc>
	}
	AddressUID = pt;
 8002efe:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <setaddress+0x34>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6013      	str	r3, [r2, #0]
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	0800f000 	.word	0x0800f000
 8002f10:	20000004 	.word	0x20000004

08002f14 <remoall>:


void remoall(){
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 8002f1a:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <remoall+0x44>)
 8002f1c:	607b      	str	r3, [r7, #4]
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8002f1e:	e00a      	b.n	8002f36 <remoall+0x22>
		Flash_Erase(pt);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7fd f913 	bl	800014c <Flash_Erase>
		pt = pt + 0x400;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f2c:	607b      	str	r3, [r7, #4]
		if(pt == 0x800FC00)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <remoall+0x48>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00b      	beq.n	8002f4e <remoall+0x3a>
	while(Flash_Read_8Byte(pt) != 0xFFFFFFFFFFFFFFFF){
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd f977 	bl	800022a <Flash_Read_8Byte>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	bf08      	it	eq
 8002f46:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8002f4a:	d1e9      	bne.n	8002f20 <remoall+0xc>
			break;
	}
}
 8002f4c:	e000      	b.n	8002f50 <remoall+0x3c>
			break;
 8002f4e:	bf00      	nop
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	0800f000 	.word	0x0800f000
 8002f5c:	0800fc00 	.word	0x0800fc00

08002f60 <resetflash>:
void resetflash(void){
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	b08e      	sub	sp, #56	; 0x38
 8002f64:	af00      	add	r7, sp, #0
	if(AddressUID == 0x800FC00){
 8002f66:	4b36      	ldr	r3, [pc, #216]	; (8003040 <resetflash+0xe0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a36      	ldr	r2, [pc, #216]	; (8003044 <resetflash+0xe4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d162      	bne.n	8003036 <resetflash+0xd6>
		uint32_t pt = StartAddressUID;
 8002f70:	4b35      	ldr	r3, [pc, #212]	; (8003048 <resetflash+0xe8>)
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
		uint8_t uidcard[8][6];
		uint8_t k = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		while(pt != 0x800FC00){
 8002f7a:	e035      	b.n	8002fe8 <resetflash+0x88>
			if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7e:	3306      	adds	r3, #6
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd f946 	bl	8000212 <Flash_Read_2Byte>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d127      	bne.n	8002fe2 <resetflash+0x82>
				for(uint8_t i = 0; i < 6; i++){
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002f98:	e01a      	b.n	8002fd0 <resetflash+0x70>
					uidcard[k][i] = Flash_Read_Byte(pt+i);
 8002f9a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f897 4033 	ldrb.w	r4, [r7, #51]	; 0x33
 8002fa6:	f897 5032 	ldrb.w	r5, [r7, #50]	; 0x32
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd f925 	bl	80001fa <Flash_Read_Byte>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4423      	add	r3, r4
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	3338      	adds	r3, #56	; 0x38
 8002fbe:	443b      	add	r3, r7
 8002fc0:	442b      	add	r3, r5
 8002fc2:	3b38      	subs	r3, #56	; 0x38
 8002fc4:	701a      	strb	r2, [r3, #0]
				for(uint8_t i = 0; i < 6; i++){
 8002fc6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002fd0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	d9e0      	bls.n	8002f9a <resetflash+0x3a>
				}
				k++;
 8002fd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}

			pt += 8;
 8002fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
		while(pt != 0x800FC00){
 8002fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fea:	4a16      	ldr	r2, [pc, #88]	; (8003044 <resetflash+0xe4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d1c5      	bne.n	8002f7c <resetflash+0x1c>
		}
		remoall();
 8002ff0:	f7ff ff90 	bl	8002f14 <remoall>
		pt = StartAddressUID;
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <resetflash+0xe8>)
 8002ff6:	637b      	str	r3, [r7, #52]	; 0x34
		for(uint8_t i = 0; i < k; i++ ){
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8002ffe:	e014      	b.n	800302a <resetflash+0xca>
			Flash_Write_Array(pt, uidcard[i], 6);
 8003000:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8003004:	4639      	mov	r1, r7
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	440b      	add	r3, r1
 8003010:	2206      	movs	r2, #6
 8003012:	4619      	mov	r1, r3
 8003014:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003016:	f7fd f8cd 	bl	80001b4 <Flash_Write_Array>
			pt += 8;
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	3308      	adds	r3, #8
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
		for(uint8_t i = 0; i < k; i++ ){
 8003020:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003024:	3301      	adds	r3, #1
 8003026:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800302a:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800302e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003032:	429a      	cmp	r2, r3
 8003034:	d3e4      	bcc.n	8003000 <resetflash+0xa0>
		}
	}
}
 8003036:	bf00      	nop
 8003038:	3738      	adds	r7, #56	; 0x38
 800303a:	46bd      	mov	sp, r7
 800303c:	bdb0      	pop	{r4, r5, r7, pc}
 800303e:	bf00      	nop
 8003040:	20000004 	.word	0x20000004
 8003044:	0800fc00 	.word	0x0800fc00
 8003048:	0800f000 	.word	0x0800f000

0800304c <addface>:

void addface(uint8_t key)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
	sprintf(Tx_Buffer , "Add.%2d", key );
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	461a      	mov	r2, r3
 800305a:	491a      	ldr	r1, [pc, #104]	; (80030c4 <addface+0x78>)
 800305c:	481a      	ldr	r0, [pc, #104]	; (80030c8 <addface+0x7c>)
 800305e:	f00a f895 	bl	800d18c <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 6);
 8003062:	2106      	movs	r1, #6
 8003064:	4818      	ldr	r0, [pc, #96]	; (80030c8 <addface+0x7c>)
 8003066:	f009 fc73 	bl	800c950 <CDC_Transmit_FS>
	CLCD_Display(&LCD1, "WAITING....", "");
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <addface+0x80>)
 800306c:	4918      	ldr	r1, [pc, #96]	; (80030d0 <addface+0x84>)
 800306e:	4819      	ldr	r0, [pc, #100]	; (80030d4 <addface+0x88>)
 8003070:	f7fd fbc4 	bl	80007fc <CLCD_Display>
	exitmenu = 60;
 8003074:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <addface+0x8c>)
 8003076:	223c      	movs	r2, #60	; 0x3c
 8003078:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 800307a:	e015      	b.n	80030a8 <addface+0x5c>
		if(Rx_Buffer[0] == 'T'){
 800307c:	4b17      	ldr	r3, [pc, #92]	; (80030dc <addface+0x90>)
 800307e:	f993 3000 	ldrsb.w	r3, [r3]
 8003082:	2b54      	cmp	r3, #84	; 0x54
 8003084:	d105      	bne.n	8003092 <addface+0x46>
			CLCD_Display(&LCD1, "THEM THANH CONG", "");
 8003086:	4a11      	ldr	r2, [pc, #68]	; (80030cc <addface+0x80>)
 8003088:	4915      	ldr	r1, [pc, #84]	; (80030e0 <addface+0x94>)
 800308a:	4812      	ldr	r0, [pc, #72]	; (80030d4 <addface+0x88>)
 800308c:	f7fd fbb6 	bl	80007fc <CLCD_Display>
			break;
 8003090:	e00e      	b.n	80030b0 <addface+0x64>
		}
		else if(Rx_Buffer[0] == 'F'){
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <addface+0x90>)
 8003094:	f993 3000 	ldrsb.w	r3, [r3]
 8003098:	2b46      	cmp	r3, #70	; 0x46
 800309a:	d105      	bne.n	80030a8 <addface+0x5c>
			CLCD_Display(&LCD1, "FACE DA TON TAI", "");
 800309c:	4a0b      	ldr	r2, [pc, #44]	; (80030cc <addface+0x80>)
 800309e:	4911      	ldr	r1, [pc, #68]	; (80030e4 <addface+0x98>)
 80030a0:	480c      	ldr	r0, [pc, #48]	; (80030d4 <addface+0x88>)
 80030a2:	f7fd fbab 	bl	80007fc <CLCD_Display>
			break;
 80030a6:	e003      	b.n	80030b0 <addface+0x64>
	while(exitmenu != 0){
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <addface+0x8c>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e5      	bne.n	800307c <addface+0x30>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80030b0:	2280      	movs	r2, #128	; 0x80
 80030b2:	2100      	movs	r1, #0
 80030b4:	4809      	ldr	r0, [pc, #36]	; (80030dc <addface+0x90>)
 80030b6:	f00a f861 	bl	800d17c <memset>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	0800e034 	.word	0x0800e034
 80030c8:	200003bc 	.word	0x200003bc
 80030cc:	0800dc5c 	.word	0x0800dc5c
 80030d0:	0800dfb0 	.word	0x0800dfb0
 80030d4:	20000348 	.word	0x20000348
 80030d8:	20000000 	.word	0x20000000
 80030dc:	200002c8 	.word	0x200002c8
 80030e0:	0800e024 	.word	0x0800e024
 80030e4:	0800e03c 	.word	0x0800e03c

080030e8 <removeface>:
void removeface(uint8_t key)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
	sprintf(Tx_Buffer , "Rem.%2d", key );
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	461a      	mov	r2, r3
 80030f6:	491a      	ldr	r1, [pc, #104]	; (8003160 <removeface+0x78>)
 80030f8:	481a      	ldr	r0, [pc, #104]	; (8003164 <removeface+0x7c>)
 80030fa:	f00a f847 	bl	800d18c <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 6);
 80030fe:	2106      	movs	r1, #6
 8003100:	4818      	ldr	r0, [pc, #96]	; (8003164 <removeface+0x7c>)
 8003102:	f009 fc25 	bl	800c950 <CDC_Transmit_FS>
	CLCD_Display(&LCD1, "WAITING....", "");
 8003106:	4a18      	ldr	r2, [pc, #96]	; (8003168 <removeface+0x80>)
 8003108:	4918      	ldr	r1, [pc, #96]	; (800316c <removeface+0x84>)
 800310a:	4819      	ldr	r0, [pc, #100]	; (8003170 <removeface+0x88>)
 800310c:	f7fd fb76 	bl	80007fc <CLCD_Display>
	exitmenu = 60;
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <removeface+0x8c>)
 8003112:	223c      	movs	r2, #60	; 0x3c
 8003114:	701a      	strb	r2, [r3, #0]
	while(exitmenu != 0){
 8003116:	e015      	b.n	8003144 <removeface+0x5c>
		if(Rx_Buffer[0] == 'T'){
 8003118:	4b17      	ldr	r3, [pc, #92]	; (8003178 <removeface+0x90>)
 800311a:	f993 3000 	ldrsb.w	r3, [r3]
 800311e:	2b54      	cmp	r3, #84	; 0x54
 8003120:	d105      	bne.n	800312e <removeface+0x46>
			CLCD_Display(&LCD1, "XOA THANH CONG", "");
 8003122:	4a11      	ldr	r2, [pc, #68]	; (8003168 <removeface+0x80>)
 8003124:	4915      	ldr	r1, [pc, #84]	; (800317c <removeface+0x94>)
 8003126:	4812      	ldr	r0, [pc, #72]	; (8003170 <removeface+0x88>)
 8003128:	f7fd fb68 	bl	80007fc <CLCD_Display>
			break;
 800312c:	e00e      	b.n	800314c <removeface+0x64>
		}
		else if(Rx_Buffer[0] == 'F'){
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <removeface+0x90>)
 8003130:	f993 3000 	ldrsb.w	r3, [r3]
 8003134:	2b46      	cmp	r3, #70	; 0x46
 8003136:	d105      	bne.n	8003144 <removeface+0x5c>
			CLCD_Display(&LCD1, "FACE CHUA THEM", "");
 8003138:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <removeface+0x80>)
 800313a:	4911      	ldr	r1, [pc, #68]	; (8003180 <removeface+0x98>)
 800313c:	480c      	ldr	r0, [pc, #48]	; (8003170 <removeface+0x88>)
 800313e:	f7fd fb5d 	bl	80007fc <CLCD_Display>
			break;
 8003142:	e003      	b.n	800314c <removeface+0x64>
	while(exitmenu != 0){
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <removeface+0x8c>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e5      	bne.n	8003118 <removeface+0x30>
		}
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800314c:	2280      	movs	r2, #128	; 0x80
 800314e:	2100      	movs	r1, #0
 8003150:	4809      	ldr	r0, [pc, #36]	; (8003178 <removeface+0x90>)
 8003152:	f00a f813 	bl	800d17c <memset>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	0800e04c 	.word	0x0800e04c
 8003164:	200003bc 	.word	0x200003bc
 8003168:	0800dc5c 	.word	0x0800dc5c
 800316c:	0800dfb0 	.word	0x0800dfb0
 8003170:	20000348 	.word	0x20000348
 8003174:	20000000 	.word	0x20000000
 8003178:	200002c8 	.word	0x200002c8
 800317c:	0800dd30 	.word	0x0800dd30
 8003180:	0800e054 	.word	0x0800e054

08003184 <checkfaceid>:
uint8_t checkfaceid(uint8_t key){
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	71fb      	strb	r3, [r7, #7]
	sprintf(Tx_Buffer , "Che.%2d", key );
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	461a      	mov	r2, r3
 8003192:	4912      	ldr	r1, [pc, #72]	; (80031dc <checkfaceid+0x58>)
 8003194:	4812      	ldr	r0, [pc, #72]	; (80031e0 <checkfaceid+0x5c>)
 8003196:	f009 fff9 	bl	800d18c <siprintf>
	CDC_Transmit_FS(Tx_Buffer, 6);
 800319a:	2106      	movs	r1, #6
 800319c:	4810      	ldr	r0, [pc, #64]	; (80031e0 <checkfaceid+0x5c>)
 800319e:	f009 fbd7 	bl	800c950 <CDC_Transmit_FS>
	while(Rx_Buffer[0] ==0){
 80031a2:	e000      	b.n	80031a6 <checkfaceid+0x22>
		continue;
 80031a4:	bf00      	nop
	while(Rx_Buffer[0] ==0){
 80031a6:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <checkfaceid+0x60>)
 80031a8:	f993 3000 	ldrsb.w	r3, [r3]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f9      	beq.n	80031a4 <checkfaceid+0x20>
	}
	CLCD_Display(&LCD1, Rx_Buffer, "");
 80031b0:	4a0d      	ldr	r2, [pc, #52]	; (80031e8 <checkfaceid+0x64>)
 80031b2:	490c      	ldr	r1, [pc, #48]	; (80031e4 <checkfaceid+0x60>)
 80031b4:	480d      	ldr	r0, [pc, #52]	; (80031ec <checkfaceid+0x68>)
 80031b6:	f7fd fb21 	bl	80007fc <CLCD_Display>
	HAL_Delay(1000);
 80031ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031be:	f001 fc4f 	bl	8004a60 <HAL_Delay>
	if(Rx_Buffer[0] == '0'){
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <checkfaceid+0x60>)
 80031c4:	f993 3000 	ldrsb.w	r3, [r3]
 80031c8:	2b30      	cmp	r3, #48	; 0x30
 80031ca:	d101      	bne.n	80031d0 <checkfaceid+0x4c>
		return 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e000      	b.n	80031d2 <checkfaceid+0x4e>
	}
	return key;
 80031d0:	79fb      	ldrb	r3, [r7, #7]

}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	0800e064 	.word	0x0800e064
 80031e0:	200003bc 	.word	0x200003bc
 80031e4:	200002c8 	.word	0x200002c8
 80031e8:	0800dc5c 	.word	0x0800dc5c
 80031ec:	20000348 	.word	0x20000348

080031f0 <checkface>:

void checkface(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
	CDC_Transmit_FS("Che.00", 6);
 80031f6:	2106      	movs	r1, #6
 80031f8:	4859      	ldr	r0, [pc, #356]	; (8003360 <checkface+0x170>)
 80031fa:	f009 fba9 	bl	800c950 <CDC_Transmit_FS>
	exitmenu = 60;
 80031fe:	4b59      	ldr	r3, [pc, #356]	; (8003364 <checkface+0x174>)
 8003200:	223c      	movs	r2, #60	; 0x3c
 8003202:	701a      	strb	r2, [r3, #0]
	CLCD_Display(&LCD1, "QUET FACE", "=>  BACK");
 8003204:	4a58      	ldr	r2, [pc, #352]	; (8003368 <checkface+0x178>)
 8003206:	4959      	ldr	r1, [pc, #356]	; (800336c <checkface+0x17c>)
 8003208:	4859      	ldr	r0, [pc, #356]	; (8003370 <checkface+0x180>)
 800320a:	f7fd faf7 	bl	80007fc <CLCD_Display>
	while (exitmenu )
 800320e:	e098      	b.n	8003342 <checkface+0x152>
	{
		if (Rx_Buffer[0] != 0)
 8003210:	4b58      	ldr	r3, [pc, #352]	; (8003374 <checkface+0x184>)
 8003212:	f993 3000 	ldrsb.w	r3, [r3]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 808b 	beq.w	8003332 <checkface+0x142>
		{

			if (Rx_Buffer[0] == 'F')
 800321c:	4b55      	ldr	r3, [pc, #340]	; (8003374 <checkface+0x184>)
 800321e:	f993 3000 	ldrsb.w	r3, [r3]
 8003222:	2b46      	cmp	r3, #70	; 0x46
 8003224:	d112      	bne.n	800324c <checkface+0x5c>
			{
				CLCD_Display(&LCD1, "FACE CHUA THEM", "");
 8003226:	4a54      	ldr	r2, [pc, #336]	; (8003378 <checkface+0x188>)
 8003228:	4954      	ldr	r1, [pc, #336]	; (800337c <checkface+0x18c>)
 800322a:	4851      	ldr	r0, [pc, #324]	; (8003370 <checkface+0x180>)
 800322c:	f7fd fae6 	bl	80007fc <CLCD_Display>
				HAL_Delay(1000);
 8003230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003234:	f001 fc14 	bl	8004a60 <HAL_Delay>
				CLCD_Display(&LCD1, "QUET FACE", "=>  BACK");
 8003238:	4a4b      	ldr	r2, [pc, #300]	; (8003368 <checkface+0x178>)
 800323a:	494c      	ldr	r1, [pc, #304]	; (800336c <checkface+0x17c>)
 800323c:	484c      	ldr	r0, [pc, #304]	; (8003370 <checkface+0x180>)
 800323e:	f7fd fadd 	bl	80007fc <CLCD_Display>
				HAL_Delay(1000);
 8003242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003246:	f001 fc0b 	bl	8004a60 <HAL_Delay>
 800324a:	e06d      	b.n	8003328 <checkface+0x138>
			}
			else
			{
				uint8_t key = (Rx_Buffer[5] -48)*10 + (Rx_Buffer[6] -48) ;
 800324c:	4b49      	ldr	r3, [pc, #292]	; (8003374 <checkface+0x184>)
 800324e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8003252:	3b30      	subs	r3, #48	; 0x30
 8003254:	b2db      	uxtb	r3, r3
 8003256:	461a      	mov	r2, r3
 8003258:	0092      	lsls	r2, r2, #2
 800325a:	4413      	add	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	b2da      	uxtb	r2, r3
 8003260:	4b44      	ldr	r3, [pc, #272]	; (8003374 <checkface+0x184>)
 8003262:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	4413      	add	r3, r2
 800326a:	b2db      	uxtb	r3, r3
 800326c:	3b30      	subs	r3, #48	; 0x30
 800326e:	71fb      	strb	r3, [r7, #7]
				uint8_t key2 = key & 0x0f;
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	71bb      	strb	r3, [r7, #6]
				uint8_t key1 = key >> 4;
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	717b      	strb	r3, [r7, #5]
				CLCD_Clear(&LCD1);
 800327e:	483c      	ldr	r0, [pc, #240]	; (8003370 <checkface+0x180>)
 8003280:	f7fd fa9e 	bl	80007c0 <CLCD_Clear>
				switch (key1)
 8003284:	797b      	ldrb	r3, [r7, #5]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d109      	bne.n	800329e <checkface+0xae>
				{
				case 1:
					CLCD_SetCursor(&LCD1, 0, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	2100      	movs	r1, #0
 800328e:	4838      	ldr	r0, [pc, #224]	; (8003370 <checkface+0x180>)
 8003290:	f7fd fa18 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "FACE NGUOI LON");
 8003294:	493a      	ldr	r1, [pc, #232]	; (8003380 <checkface+0x190>)
 8003296:	4836      	ldr	r0, [pc, #216]	; (8003370 <checkface+0x180>)
 8003298:	f7fd fa7b 	bl	8000792 <CLCD_WriteString>
					break;
 800329c:	e009      	b.n	80032b2 <checkface+0xc2>
				default:
					CLCD_SetCursor(&LCD1, 0, 0);
 800329e:	2200      	movs	r2, #0
 80032a0:	2100      	movs	r1, #0
 80032a2:	4833      	ldr	r0, [pc, #204]	; (8003370 <checkface+0x180>)
 80032a4:	f7fd fa0e 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "FACE TRE EM");
 80032a8:	4936      	ldr	r1, [pc, #216]	; (8003384 <checkface+0x194>)
 80032aa:	4831      	ldr	r0, [pc, #196]	; (8003370 <checkface+0x180>)
 80032ac:	f7fd fa71 	bl	8000792 <CLCD_WriteString>
					break;
 80032b0:	bf00      	nop
				}
				switch (key2)
 80032b2:	79bb      	ldrb	r3, [r7, #6]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d01a      	beq.n	80032ee <checkface+0xfe>
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	dc22      	bgt.n	8003302 <checkface+0x112>
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d002      	beq.n	80032c6 <checkface+0xd6>
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d00a      	beq.n	80032da <checkface+0xea>
 80032c4:	e01d      	b.n	8003302 <checkface+0x112>
				{
				case 1:
					CLCD_SetCursor(&LCD1, 0, 1);
 80032c6:	2201      	movs	r2, #1
 80032c8:	2100      	movs	r1, #0
 80032ca:	4829      	ldr	r0, [pc, #164]	; (8003370 <checkface+0x180>)
 80032cc:	f7fd f9fa 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "FACE 1");
 80032d0:	492d      	ldr	r1, [pc, #180]	; (8003388 <checkface+0x198>)
 80032d2:	4827      	ldr	r0, [pc, #156]	; (8003370 <checkface+0x180>)
 80032d4:	f7fd fa5d 	bl	8000792 <CLCD_WriteString>
					break;
 80032d8:	e01d      	b.n	8003316 <checkface+0x126>
				case 2:
					CLCD_SetCursor(&LCD1, 0, 1);
 80032da:	2201      	movs	r2, #1
 80032dc:	2100      	movs	r1, #0
 80032de:	4824      	ldr	r0, [pc, #144]	; (8003370 <checkface+0x180>)
 80032e0:	f7fd f9f0 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "FACE 2");
 80032e4:	4929      	ldr	r1, [pc, #164]	; (800338c <checkface+0x19c>)
 80032e6:	4822      	ldr	r0, [pc, #136]	; (8003370 <checkface+0x180>)
 80032e8:	f7fd fa53 	bl	8000792 <CLCD_WriteString>
					break;
 80032ec:	e013      	b.n	8003316 <checkface+0x126>
				case 3:
					CLCD_SetCursor(&LCD1, 0, 1);
 80032ee:	2201      	movs	r2, #1
 80032f0:	2100      	movs	r1, #0
 80032f2:	481f      	ldr	r0, [pc, #124]	; (8003370 <checkface+0x180>)
 80032f4:	f7fd f9e6 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "FACE 3");
 80032f8:	4925      	ldr	r1, [pc, #148]	; (8003390 <checkface+0x1a0>)
 80032fa:	481d      	ldr	r0, [pc, #116]	; (8003370 <checkface+0x180>)
 80032fc:	f7fd fa49 	bl	8000792 <CLCD_WriteString>
					break;
 8003300:	e009      	b.n	8003316 <checkface+0x126>
				default:
					CLCD_SetCursor(&LCD1, 0, 1);
 8003302:	2201      	movs	r2, #1
 8003304:	2100      	movs	r1, #0
 8003306:	481a      	ldr	r0, [pc, #104]	; (8003370 <checkface+0x180>)
 8003308:	f7fd f9dc 	bl	80006c4 <CLCD_SetCursor>
					CLCD_WriteString(&LCD1, "FACE 4");
 800330c:	4921      	ldr	r1, [pc, #132]	; (8003394 <checkface+0x1a4>)
 800330e:	4818      	ldr	r0, [pc, #96]	; (8003370 <checkface+0x180>)
 8003310:	f7fd fa3f 	bl	8000792 <CLCD_WriteString>
					break;
 8003314:	bf00      	nop
				}
				HAL_Delay(2000);
 8003316:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800331a:	f001 fba1 	bl	8004a60 <HAL_Delay>
				CLCD_Display(&LCD1, "QUET FACE", "=>  BACK");
 800331e:	4a12      	ldr	r2, [pc, #72]	; (8003368 <checkface+0x178>)
 8003320:	4912      	ldr	r1, [pc, #72]	; (800336c <checkface+0x17c>)
 8003322:	4813      	ldr	r0, [pc, #76]	; (8003370 <checkface+0x180>)
 8003324:	f7fd fa6a 	bl	80007fc <CLCD_Display>
			}
			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	2100      	movs	r1, #0
 800332c:	4811      	ldr	r0, [pc, #68]	; (8003374 <checkface+0x184>)
 800332e:	f009 ff25 	bl	800d17c <memset>
		}
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) == 1)
 8003332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003336:	4818      	ldr	r0, [pc, #96]	; (8003398 <checkface+0x1a8>)
 8003338:	f001 fa80 	bl	800483c <checkbuton>
 800333c:	4603      	mov	r3, r0
 800333e:	2b01      	cmp	r3, #1
 8003340:	d005      	beq.n	800334e <checkface+0x15e>
	while (exitmenu )
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <checkface+0x174>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f47f af62 	bne.w	8003210 <checkface+0x20>
 800334c:	e000      	b.n	8003350 <checkface+0x160>
		{
			break;
 800334e:	bf00      	nop
		}
	}
	CDC_Transmit_FS("Exit  ", 6);
 8003350:	2106      	movs	r1, #6
 8003352:	4812      	ldr	r0, [pc, #72]	; (800339c <checkface+0x1ac>)
 8003354:	f009 fafc 	bl	800c950 <CDC_Transmit_FS>
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	0800e06c 	.word	0x0800e06c
 8003364:	20000000 	.word	0x20000000
 8003368:	0800db7c 	.word	0x0800db7c
 800336c:	0800df8c 	.word	0x0800df8c
 8003370:	20000348 	.word	0x20000348
 8003374:	200002c8 	.word	0x200002c8
 8003378:	0800dc5c 	.word	0x0800dc5c
 800337c:	0800e054 	.word	0x0800e054
 8003380:	0800de00 	.word	0x0800de00
 8003384:	0800e074 	.word	0x0800e074
 8003388:	0800e080 	.word	0x0800e080
 800338c:	0800e088 	.word	0x0800e088
 8003390:	0800e090 	.word	0x0800e090
 8003394:	0800e098 	.word	0x0800e098
 8003398:	40010800 	.word	0x40010800
 800339c:	0800dfa0 	.word	0x0800dfa0

080033a0 <opendoor>:

extern CLCD_Name LCD1;
extern char str[20];

void opendoor(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 1);
 80033a4:	2201      	movs	r2, #1
 80033a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033aa:	480a      	ldr	r0, [pc, #40]	; (80033d4 <opendoor+0x34>)
 80033ac:	f002 f857 	bl	800545e <HAL_GPIO_WritePin>
	CLCD_Display(&LCD1, "    WELCOME","");
 80033b0:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <opendoor+0x38>)
 80033b2:	490a      	ldr	r1, [pc, #40]	; (80033dc <opendoor+0x3c>)
 80033b4:	480a      	ldr	r0, [pc, #40]	; (80033e0 <opendoor+0x40>)
 80033b6:	f7fd fa21 	bl	80007fc <CLCD_Display>
	HAL_Delay(5000);
 80033ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80033be:	f001 fb4f 	bl	8004a60 <HAL_Delay>
	HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 0);
 80033c2:	2200      	movs	r2, #0
 80033c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033c8:	4802      	ldr	r0, [pc, #8]	; (80033d4 <opendoor+0x34>)
 80033ca:	f002 f848 	bl	800545e <HAL_GPIO_WritePin>
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40010c00 	.word	0x40010c00
 80033d8:	0800e0a0 	.word	0x0800e0a0
 80033dc:	0800e0a4 	.word	0x0800e0a4
 80033e0:	20000348 	.word	0x20000348

080033e4 <noopendoor>:
void noopendoor(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
	CLCD_Display(&LCD1, "      SAI","");
 80033e8:	4a0d      	ldr	r2, [pc, #52]	; (8003420 <noopendoor+0x3c>)
 80033ea:	490e      	ldr	r1, [pc, #56]	; (8003424 <noopendoor+0x40>)
 80033ec:	480e      	ldr	r0, [pc, #56]	; (8003428 <noopendoor+0x44>)
 80033ee:	f7fd fa05 	bl	80007fc <CLCD_Display>
	HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 80033f2:	2201      	movs	r2, #1
 80033f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033f8:	480c      	ldr	r0, [pc, #48]	; (800342c <noopendoor+0x48>)
 80033fa:	f002 f830 	bl	800545e <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80033fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003402:	f001 fb2d 	bl	8004a60 <HAL_Delay>
	HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 8003406:	2200      	movs	r2, #0
 8003408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800340c:	4807      	ldr	r0, [pc, #28]	; (800342c <noopendoor+0x48>)
 800340e:	f002 f826 	bl	800545e <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8003412:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003416:	f001 fb23 	bl	8004a60 <HAL_Delay>
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	0800e0a0 	.word	0x0800e0a0
 8003424:	0800e0b0 	.word	0x0800e0b0
 8003428:	20000348 	.word	0x20000348
 800342c:	40010c00 	.word	0x40010c00

08003430 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	80fb      	strh	r3, [r7, #6]
	if(states == Free)
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_GPIO_EXTI_Callback+0x24>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d102      	bne.n	8003448 <HAL_GPIO_EXTI_Callback+0x18>
		buton = 0;
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_GPIO_EXTI_Callback+0x28>)
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	200002b4 	.word	0x200002b4
 8003458:	20000001 	.word	0x20000001

0800345c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003464:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003468:	480a      	ldr	r0, [pc, #40]	; (8003494 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800346a:	f002 f810 	bl	800548e <HAL_GPIO_TogglePin>
	if(exitmenu > 0)
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d006      	beq.n	8003484 <HAL_TIM_PeriodElapsedCallback+0x28>
		exitmenu --;
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	3b01      	subs	r3, #1
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003480:	701a      	strb	r2, [r3, #0]
	else exitmenu = 0;
}
 8003482:	e002      	b.n	800348a <HAL_TIM_PeriodElapsedCallback+0x2e>
	else exitmenu = 0;
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40011000 	.word	0x40011000
 8003498:	20000000 	.word	0x20000000

0800349c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08c      	sub	sp, #48	; 0x30
 80034a0:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034a2:	f001 fa7b 	bl	800499c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034a6:	f000 f86f 	bl	8003588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034aa:	f000 f94b 	bl	8003744 <MX_GPIO_Init>
  MX_SPI1_Init();
 80034ae:	f000 f8c5 	bl	800363c <MX_SPI1_Init>
  MX_TIM2_Init();
 80034b2:	f000 f8f9 	bl	80036a8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80034b6:	f009 f97f 	bl	800c7b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	TM_MFRC522_Init();
 80034ba:	f000 fc39 	bl	8003d30 <TM_MFRC522_Init>

	CLCD_4BIT_Init(&LCD1, 16, 2, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin,
 80034be:	2308      	movs	r3, #8
 80034c0:	930a      	str	r3, [sp, #40]	; 0x28
 80034c2:	4b29      	ldr	r3, [pc, #164]	; (8003568 <main+0xcc>)
 80034c4:	9309      	str	r3, [sp, #36]	; 0x24
 80034c6:	2310      	movs	r3, #16
 80034c8:	9308      	str	r3, [sp, #32]
 80034ca:	4b27      	ldr	r3, [pc, #156]	; (8003568 <main+0xcc>)
 80034cc:	9307      	str	r3, [sp, #28]
 80034ce:	2320      	movs	r3, #32
 80034d0:	9306      	str	r3, [sp, #24]
 80034d2:	4b25      	ldr	r3, [pc, #148]	; (8003568 <main+0xcc>)
 80034d4:	9305      	str	r3, [sp, #20]
 80034d6:	2340      	movs	r3, #64	; 0x40
 80034d8:	9304      	str	r3, [sp, #16]
 80034da:	4b23      	ldr	r3, [pc, #140]	; (8003568 <main+0xcc>)
 80034dc:	9303      	str	r3, [sp, #12]
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	9302      	str	r3, [sp, #8]
 80034e2:	4b21      	ldr	r3, [pc, #132]	; (8003568 <main+0xcc>)
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <main+0xcc>)
 80034ee:	2202      	movs	r2, #2
 80034f0:	2110      	movs	r1, #16
 80034f2:	481e      	ldr	r0, [pc, #120]	; (800356c <main+0xd0>)
 80034f4:	f7fd f852 	bl	800059c <CLCD_4BIT_Init>
				   D4_GPIO_Port, D4_Pin, D5_GPIO_Port, D5_Pin,
				   D6_GPIO_Port, D6_Pin, D7_GPIO_Port, D7_Pin);
	states = Free;
 80034f8:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <main+0xd4>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//	writepassword();
	HAL_TIM_Base_Start_IT(&htim2);
 80034fe:	481d      	ldr	r0, [pc, #116]	; (8003574 <main+0xd8>)
 8003500:	f004 fc74 	bl	8007dec <HAL_TIM_Base_Start_IT>
	if (checkcountUID() == 0)
 8003504:	f001 f8a6 	bl	8004654 <checkcountUID>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <main+0x76>
	{
		startadd();
 800350e:	f7ff fc8b 	bl	8002e28 <startadd>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		CLCD_SetCursor(&LCD1, 0, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	4815      	ldr	r0, [pc, #84]	; (800356c <main+0xd0>)
 8003518:	f7fd f8d4 	bl	80006c4 <CLCD_SetCursor>
		CLCD_WriteString(&LCD1, " MOI QUET THE ");
 800351c:	4916      	ldr	r1, [pc, #88]	; (8003578 <main+0xdc>)
 800351e:	4813      	ldr	r0, [pc, #76]	; (800356c <main+0xd0>)
 8003520:	f7fd f937 	bl	8000792 <CLCD_WriteString>
		if(buton == 0){
 8003524:	4b15      	ldr	r3, [pc, #84]	; (800357c <main+0xe0>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d103      	bne.n	8003534 <main+0x98>
			states = Menu;
 800352c:	4b10      	ldr	r3, [pc, #64]	; (8003570 <main+0xd4>)
 800352e:	2201      	movs	r2, #1
 8003530:	701a      	strb	r2, [r3, #0]
 8003532:	e011      	b.n	8003558 <main+0xbc>
		}else if(TM_MFRC522_Check(IDCard) == MI_OK){
 8003534:	4812      	ldr	r0, [pc, #72]	; (8003580 <main+0xe4>)
 8003536:	f000 fc1f 	bl	8003d78 <TM_MFRC522_Check>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d103      	bne.n	8003548 <main+0xac>
			states = CardID;
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <main+0xd4>)
 8003542:	2202      	movs	r2, #2
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e007      	b.n	8003558 <main+0xbc>
		}else if(Rx_Buffer[0] != 0){
 8003548:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <main+0xe8>)
 800354a:	f993 3000 	ldrsb.w	r3, [r3]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <main+0xbc>
			states = FaceID;
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <main+0xd4>)
 8003554:	2203      	movs	r2, #3
 8003556:	701a      	strb	r2, [r3, #0]
		}
		statemachineupdate(&states);
 8003558:	4805      	ldr	r0, [pc, #20]	; (8003570 <main+0xd4>)
 800355a:	f000 fe5f 	bl	800421c <statemachineupdate>
		HAL_Delay(1000);
 800355e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003562:	f001 fa7d 	bl	8004a60 <HAL_Delay>
		CLCD_SetCursor(&LCD1, 0, 0);
 8003566:	e7d4      	b.n	8003512 <main+0x76>
 8003568:	40010c00 	.word	0x40010c00
 800356c:	20000348 	.word	0x20000348
 8003570:	200002b4 	.word	0x200002b4
 8003574:	2000026c 	.word	0x2000026c
 8003578:	0800e0bc 	.word	0x0800e0bc
 800357c:	20000001 	.word	0x20000001
 8003580:	200002b8 	.word	0x200002b8
 8003584:	200002c8 	.word	0x200002c8

08003588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b094      	sub	sp, #80	; 0x50
 800358c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800358e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003592:	2228      	movs	r2, #40	; 0x28
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f009 fdf0 	bl	800d17c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800359c:	f107 0314 	add.w	r3, r7, #20
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80035c2:	2300      	movs	r3, #0
 80035c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035c6:	2301      	movs	r3, #1
 80035c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035ca:	2302      	movs	r3, #2
 80035cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80035d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80035d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035de:	4618      	mov	r0, r3
 80035e0:	f003 fc4a 	bl	8006e78 <HAL_RCC_OscConfig>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80035ea:	f000 f955 	bl	8003898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ee:	230f      	movs	r3, #15
 80035f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035f2:	2302      	movs	r3, #2
 80035f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003600:	2300      	movs	r3, #0
 8003602:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	2102      	movs	r1, #2
 800360a:	4618      	mov	r0, r3
 800360c:	f003 feb6 	bl	800737c <HAL_RCC_ClockConfig>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003616:	f000 f93f 	bl	8003898 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800361a:	2310      	movs	r3, #16
 800361c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	4618      	mov	r0, r3
 8003626:	f004 f80f 	bl	8007648 <HAL_RCCEx_PeriphCLKConfig>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003630:	f000 f932 	bl	8003898 <Error_Handler>
  }
}
 8003634:	bf00      	nop
 8003636:	3750      	adds	r7, #80	; 0x50
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003640:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003642:	4a18      	ldr	r2, [pc, #96]	; (80036a4 <MX_SPI1_Init+0x68>)
 8003644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003648:	f44f 7282 	mov.w	r2, #260	; 0x104
 800364c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800364e:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003650:	2200      	movs	r2, #0
 8003652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003656:	2200      	movs	r2, #0
 8003658:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800365a:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <MX_SPI1_Init+0x64>)
 800365c:	2200      	movs	r2, #0
 800365e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003662:	2200      	movs	r2, #0
 8003664:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003666:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800366c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800366e:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003670:	2230      	movs	r2, #48	; 0x30
 8003672:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003676:	2200      	movs	r2, #0
 8003678:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <MX_SPI1_Init+0x64>)
 800367c:	2200      	movs	r2, #0
 800367e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003680:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003682:	2200      	movs	r2, #0
 8003684:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <MX_SPI1_Init+0x64>)
 8003688:	220a      	movs	r2, #10
 800368a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800368c:	4804      	ldr	r0, [pc, #16]	; (80036a0 <MX_SPI1_Init+0x64>)
 800368e:	f004 f891 	bl	80077b4 <HAL_SPI_Init>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003698:	f000 f8fe 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800369c:	bf00      	nop
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000214 	.word	0x20000214
 80036a4:	40013000 	.word	0x40013000

080036a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ae:	f107 0308 	add.w	r3, r7, #8
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036bc:	463b      	mov	r3, r7
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036c4:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <MX_TIM2_Init+0x98>)
 80036c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80036cc:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <MX_TIM2_Init+0x98>)
 80036ce:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80036d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d4:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <MX_TIM2_Init+0x98>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80036da:	4b19      	ldr	r3, [pc, #100]	; (8003740 <MX_TIM2_Init+0x98>)
 80036dc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80036e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e2:	4b17      	ldr	r3, [pc, #92]	; (8003740 <MX_TIM2_Init+0x98>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <MX_TIM2_Init+0x98>)
 80036ea:	2280      	movs	r2, #128	; 0x80
 80036ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036ee:	4814      	ldr	r0, [pc, #80]	; (8003740 <MX_TIM2_Init+0x98>)
 80036f0:	f004 fb2c 	bl	8007d4c <HAL_TIM_Base_Init>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80036fa:	f000 f8cd 	bl	8003898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003702:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003704:	f107 0308 	add.w	r3, r7, #8
 8003708:	4619      	mov	r1, r3
 800370a:	480d      	ldr	r0, [pc, #52]	; (8003740 <MX_TIM2_Init+0x98>)
 800370c:	f004 fcc8 	bl	80080a0 <HAL_TIM_ConfigClockSource>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003716:	f000 f8bf 	bl	8003898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800371e:	2300      	movs	r3, #0
 8003720:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003722:	463b      	mov	r3, r7
 8003724:	4619      	mov	r1, r3
 8003726:	4806      	ldr	r0, [pc, #24]	; (8003740 <MX_TIM2_Init+0x98>)
 8003728:	f004 fe9a 	bl	8008460 <HAL_TIMEx_MasterConfigSynchronization>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003732:	f000 f8b1 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	2000026c 	.word	0x2000026c

08003744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374a:	f107 0310 	add.w	r3, r7, #16
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003758:	4b4a      	ldr	r3, [pc, #296]	; (8003884 <MX_GPIO_Init+0x140>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	4a49      	ldr	r2, [pc, #292]	; (8003884 <MX_GPIO_Init+0x140>)
 800375e:	f043 0310 	orr.w	r3, r3, #16
 8003762:	6193      	str	r3, [r2, #24]
 8003764:	4b47      	ldr	r3, [pc, #284]	; (8003884 <MX_GPIO_Init+0x140>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003770:	4b44      	ldr	r3, [pc, #272]	; (8003884 <MX_GPIO_Init+0x140>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	4a43      	ldr	r2, [pc, #268]	; (8003884 <MX_GPIO_Init+0x140>)
 8003776:	f043 0320 	orr.w	r3, r3, #32
 800377a:	6193      	str	r3, [r2, #24]
 800377c:	4b41      	ldr	r3, [pc, #260]	; (8003884 <MX_GPIO_Init+0x140>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003788:	4b3e      	ldr	r3, [pc, #248]	; (8003884 <MX_GPIO_Init+0x140>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	4a3d      	ldr	r2, [pc, #244]	; (8003884 <MX_GPIO_Init+0x140>)
 800378e:	f043 0304 	orr.w	r3, r3, #4
 8003792:	6193      	str	r3, [r2, #24]
 8003794:	4b3b      	ldr	r3, [pc, #236]	; (8003884 <MX_GPIO_Init+0x140>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a0:	4b38      	ldr	r3, [pc, #224]	; (8003884 <MX_GPIO_Init+0x140>)
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	4a37      	ldr	r2, [pc, #220]	; (8003884 <MX_GPIO_Init+0x140>)
 80037a6:	f043 0308 	orr.w	r3, r3, #8
 80037aa:	6193      	str	r3, [r2, #24]
 80037ac:	4b35      	ldr	r3, [pc, #212]	; (8003884 <MX_GPIO_Init+0x140>)
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80037b8:	2200      	movs	r2, #0
 80037ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037be:	4832      	ldr	r0, [pc, #200]	; (8003888 <MX_GPIO_Init+0x144>)
 80037c0:	f001 fe4d 	bl	800545e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|QR_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80037c4:	2200      	movs	r2, #0
 80037c6:	f248 4110 	movw	r1, #33808	; 0x8410
 80037ca:	4830      	ldr	r0, [pc, #192]	; (800388c <MX_GPIO_Init+0x148>)
 80037cc:	f001 fe47 	bl	800545e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LOA_Pin|KHOA_Pin|LED_Pin|D7_Pin
 80037d0:	2200      	movs	r2, #0
 80037d2:	f247 31f8 	movw	r1, #29688	; 0x73f8
 80037d6:	482e      	ldr	r0, [pc, #184]	; (8003890 <MX_GPIO_Init+0x14c>)
 80037d8:	f001 fe41 	bl	800545e <HAL_GPIO_WritePin>
                          |D6_Pin|D5_Pin|D4_Pin|EN_Pin
                          |RW_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80037dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037e2:	2301      	movs	r3, #1
 80037e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ea:	2302      	movs	r3, #2
 80037ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ee:	f107 0310 	add.w	r3, r7, #16
 80037f2:	4619      	mov	r1, r3
 80037f4:	4824      	ldr	r0, [pc, #144]	; (8003888 <MX_GPIO_Init+0x144>)
 80037f6:	f001 fc97 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin QR_Pin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|QR_Pin|GPIO_PIN_15;
 80037fa:	f248 4310 	movw	r3, #33808	; 0x8410
 80037fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003800:	2301      	movs	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003804:	2300      	movs	r3, #0
 8003806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003808:	2302      	movs	r3, #2
 800380a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380c:	f107 0310 	add.w	r3, r7, #16
 8003810:	4619      	mov	r1, r3
 8003812:	481e      	ldr	r0, [pc, #120]	; (800388c <MX_GPIO_Init+0x148>)
 8003814:	f001 fc88 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOA_Pin KHOA_Pin LED_Pin D7_Pin
                           D6_Pin D5_Pin D4_Pin EN_Pin
                           RW_Pin RS_Pin */
  GPIO_InitStruct.Pin = LOA_Pin|KHOA_Pin|LED_Pin|D7_Pin
 8003818:	f247 33f8 	movw	r3, #29688	; 0x73f8
 800381c:	613b      	str	r3, [r7, #16]
                          |D6_Pin|D5_Pin|D4_Pin|EN_Pin
                          |RW_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800381e:	2301      	movs	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003826:	2302      	movs	r3, #2
 8003828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800382a:	f107 0310 	add.w	r3, r7, #16
 800382e:	4619      	mov	r1, r3
 8003830:	4817      	ldr	r0, [pc, #92]	; (8003890 <MX_GPIO_Init+0x14c>)
 8003832:	f001 fc79 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pin : SELECCT_Pin */
  GPIO_InitStruct.Pin = SELECCT_Pin;
 8003836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800383a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003840:	2301      	movs	r3, #1
 8003842:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SELECCT_GPIO_Port, &GPIO_InitStruct);
 8003844:	f107 0310 	add.w	r3, r7, #16
 8003848:	4619      	mov	r1, r3
 800384a:	4811      	ldr	r0, [pc, #68]	; (8003890 <MX_GPIO_Init+0x14c>)
 800384c:	f001 fc6c 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_Pin */
  GPIO_InitStruct.Pin = MENU_Pin;
 8003850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003856:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <MX_GPIO_Init+0x150>)
 8003858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	2300      	movs	r3, #0
 800385c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MENU_GPIO_Port, &GPIO_InitStruct);
 800385e:	f107 0310 	add.w	r3, r7, #16
 8003862:	4619      	mov	r1, r3
 8003864:	4809      	ldr	r0, [pc, #36]	; (800388c <MX_GPIO_Init+0x148>)
 8003866:	f001 fc5f 	bl	8005128 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800386a:	2200      	movs	r2, #0
 800386c:	2100      	movs	r1, #0
 800386e:	2017      	movs	r0, #23
 8003870:	f001 fa15 	bl	8004c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003874:	2017      	movs	r0, #23
 8003876:	f001 fa2e 	bl	8004cd6 <HAL_NVIC_EnableIRQ>

}
 800387a:	bf00      	nop
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	40011000 	.word	0x40011000
 800388c:	40010800 	.word	0x40010800
 8003890:	40010c00 	.word	0x40010c00
 8003894:	10110000 	.word	0x10110000

08003898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800389c:	b672      	cpsid	i
}
 800389e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80038a0:	e7fe      	b.n	80038a0 <Error_Handler+0x8>
	...

080038a4 <password>:
extern CLCD_Name LCD1;
extern uint8_t exitmenu;
extern uint8_t PassWord[8];


void password(void){
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
	CLCD_Display(&LCD1, "NHAP PASSWORD :", "");
 80038aa:	4a42      	ldr	r2, [pc, #264]	; (80039b4 <password+0x110>)
 80038ac:	4942      	ldr	r1, [pc, #264]	; (80039b8 <password+0x114>)
 80038ae:	4843      	ldr	r0, [pc, #268]	; (80039bc <password+0x118>)
 80038b0:	f7fc ffa4 	bl	80007fc <CLCD_Display>
	exitmenu =120;
 80038b4:	4b42      	ldr	r3, [pc, #264]	; (80039c0 <password+0x11c>)
 80038b6:	2278      	movs	r2, #120	; 0x78
 80038b8:	701a      	strb	r2, [r3, #0]
	readpassword();
 80038ba:	f000 f951 	bl	8003b60 <readpassword>
	uint8_t pass[8] = {-1};
 80038be:	23ff      	movs	r3, #255	; 0xff
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
	uint8_t k=0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
	uint8_t pas = -1;
 80038ca:	23ff      	movs	r3, #255	; 0xff
 80038cc:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(1000);
 80038ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038d2:	f001 f8c5 	bl	8004a60 <HAL_Delay>
	while(checkbuton(MENU_GPIO_Port, MENU_Pin) != 0){}
 80038d6:	bf00      	nop
 80038d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038dc:	4839      	ldr	r0, [pc, #228]	; (80039c4 <password+0x120>)
 80038de:	f000 ffad 	bl	800483c <checkbuton>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f7      	bne.n	80038d8 <password+0x34>
	CLCD_SetCursor(&LCD1, k, 1);
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2201      	movs	r2, #1
 80038ec:	4619      	mov	r1, r3
 80038ee:	4833      	ldr	r0, [pc, #204]	; (80039bc <password+0x118>)
 80038f0:	f7fc fee8 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteChar(&LCD1, 95);
 80038f4:	215f      	movs	r1, #95	; 0x5f
 80038f6:	4831      	ldr	r0, [pc, #196]	; (80039bc <password+0x118>)
 80038f8:	f7fc ff2c 	bl	8000754 <CLCD_WriteChar>
	while(exitmenu){
 80038fc:	e051      	b.n	80039a2 <password+0xfe>
		if(checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) == 1){
 80038fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003902:	4831      	ldr	r0, [pc, #196]	; (80039c8 <password+0x124>)
 8003904:	f000 ff9a 	bl	800483c <checkbuton>
 8003908:	4603      	mov	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d114      	bne.n	8003938 <password+0x94>
			pas++;
 800390e:	7bbb      	ldrb	r3, [r7, #14]
 8003910:	3301      	adds	r3, #1
 8003912:	73bb      	strb	r3, [r7, #14]
			if(pas >= 10)	pas = 0;
 8003914:	7bbb      	ldrb	r3, [r7, #14]
 8003916:	2b09      	cmp	r3, #9
 8003918:	d901      	bls.n	800391e <password+0x7a>
 800391a:	2300      	movs	r3, #0
 800391c:	73bb      	strb	r3, [r7, #14]
			CLCD_SetCursor(&LCD1, k, 1);
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2201      	movs	r2, #1
 8003922:	4619      	mov	r1, r3
 8003924:	4825      	ldr	r0, [pc, #148]	; (80039bc <password+0x118>)
 8003926:	f7fc fecd 	bl	80006c4 <CLCD_SetCursor>
			CLCD_WriteChar(&LCD1, pas + 0x30);
 800392a:	7bbb      	ldrb	r3, [r7, #14]
 800392c:	3330      	adds	r3, #48	; 0x30
 800392e:	b2db      	uxtb	r3, r3
 8003930:	4619      	mov	r1, r3
 8003932:	4822      	ldr	r0, [pc, #136]	; (80039bc <password+0x118>)
 8003934:	f7fc ff0e 	bl	8000754 <CLCD_WriteChar>
		}
		if(checkbuton(MENU_GPIO_Port, MENU_Pin) == 1){
 8003938:	f44f 7180 	mov.w	r1, #256	; 0x100
 800393c:	4821      	ldr	r0, [pc, #132]	; (80039c4 <password+0x120>)
 800393e:	f000 ff7d 	bl	800483c <checkbuton>
 8003942:	4603      	mov	r3, r0
 8003944:	2b01      	cmp	r3, #1
 8003946:	d12c      	bne.n	80039a2 <password+0xfe>
			pass[k] = pas;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	3310      	adds	r3, #16
 800394c:	443b      	add	r3, r7
 800394e:	7bba      	ldrb	r2, [r7, #14]
 8003950:	f803 2c0c 	strb.w	r2, [r3, #-12]
			k = k+1;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	3301      	adds	r3, #1
 8003958:	73fb      	strb	r3, [r7, #15]
			pas = -1;
 800395a:	23ff      	movs	r3, #255	; 0xff
 800395c:	73bb      	strb	r3, [r7, #14]
			if(k == 8){
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	2b08      	cmp	r3, #8
 8003962:	d114      	bne.n	800398e <password+0xea>
				for(uint8_t i = 0; i<8; i++){
 8003964:	2300      	movs	r3, #0
 8003966:	737b      	strb	r3, [r7, #13]
 8003968:	e00c      	b.n	8003984 <password+0xe0>
					if(pass[i] != PassWord[i]){
 800396a:	7b7b      	ldrb	r3, [r7, #13]
 800396c:	3310      	adds	r3, #16
 800396e:	443b      	add	r3, r7
 8003970:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8003974:	7b7b      	ldrb	r3, [r7, #13]
 8003976:	4915      	ldr	r1, [pc, #84]	; (80039cc <password+0x128>)
 8003978:	5ccb      	ldrb	r3, [r1, r3]
 800397a:	429a      	cmp	r2, r3
 800397c:	d116      	bne.n	80039ac <password+0x108>
				for(uint8_t i = 0; i<8; i++){
 800397e:	7b7b      	ldrb	r3, [r7, #13]
 8003980:	3301      	adds	r3, #1
 8003982:	737b      	strb	r3, [r7, #13]
 8003984:	7b7b      	ldrb	r3, [r7, #13]
 8003986:	2b07      	cmp	r3, #7
 8003988:	d9ef      	bls.n	800396a <password+0xc6>
						return;
					}
				}
				menupass();
 800398a:	f000 f821 	bl	80039d0 <menupass>
			}
			CLCD_SetCursor(&LCD1, k, 1);
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	2201      	movs	r2, #1
 8003992:	4619      	mov	r1, r3
 8003994:	4809      	ldr	r0, [pc, #36]	; (80039bc <password+0x118>)
 8003996:	f7fc fe95 	bl	80006c4 <CLCD_SetCursor>
			CLCD_WriteChar(&LCD1, 95);
 800399a:	215f      	movs	r1, #95	; 0x5f
 800399c:	4807      	ldr	r0, [pc, #28]	; (80039bc <password+0x118>)
 800399e:	f7fc fed9 	bl	8000754 <CLCD_WriteChar>
	while(exitmenu){
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <password+0x11c>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1a9      	bne.n	80038fe <password+0x5a>
 80039aa:	e000      	b.n	80039ae <password+0x10a>
						return;
 80039ac:	bf00      	nop
		}

	}

}
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	0800e0cc 	.word	0x0800e0cc
 80039b8:	0800e0d0 	.word	0x0800e0d0
 80039bc:	20000348 	.word	0x20000348
 80039c0:	20000000 	.word	0x20000000
 80039c4:	40010800 	.word	0x40010800
 80039c8:	40010c00 	.word	0x40010c00
 80039cc:	200003a0 	.word	0x200003a0

080039d0 <menupass>:

void menupass(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
	exitmenu = Delaymenu;
 80039d6:	4b4d      	ldr	r3, [pc, #308]	; (8003b0c <menupass+0x13c>)
 80039d8:	221e      	movs	r2, #30
 80039da:	701a      	strb	r2, [r3, #0]
	uint8_t statusmenu = -1;
 80039dc:	23ff      	movs	r3, #255	; 0xff
 80039de:	71fb      	strb	r3, [r7, #7]
	CLCD_Display(&LCD1, "  PASSWORD", "  OPEN DOOR");
 80039e0:	4a4b      	ldr	r2, [pc, #300]	; (8003b10 <menupass+0x140>)
 80039e2:	494c      	ldr	r1, [pc, #304]	; (8003b14 <menupass+0x144>)
 80039e4:	484c      	ldr	r0, [pc, #304]	; (8003b18 <menupass+0x148>)
 80039e6:	f7fc ff09 	bl	80007fc <CLCD_Display>
	while(exitmenu){
 80039ea:	e084      	b.n	8003af6 <menupass+0x126>
		if (checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) != 0)
 80039ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039f0:	484a      	ldr	r0, [pc, #296]	; (8003b1c <menupass+0x14c>)
 80039f2:	f000 ff23 	bl	800483c <checkbuton>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d02e      	beq.n	8003a5a <menupass+0x8a>
		{
			exitmenu = Delaymenu;
 80039fc:	4b43      	ldr	r3, [pc, #268]	; (8003b0c <menupass+0x13c>)
 80039fe:	221e      	movs	r2, #30
 8003a00:	701a      	strb	r2, [r3, #0]
			statusmenu++;
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	3301      	adds	r3, #1
 8003a06:	71fb      	strb	r3, [r7, #7]
			statusmenu = (statusmenu > 3) ? 0 : statusmenu;
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d801      	bhi.n	8003a12 <menupass+0x42>
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	e000      	b.n	8003a14 <menupass+0x44>
 8003a12:	2300      	movs	r3, #0
 8003a14:	71fb      	strb	r3, [r7, #7]
			switch (statusmenu)
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d012      	beq.n	8003a42 <menupass+0x72>
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	dc16      	bgt.n	8003a4e <menupass+0x7e>
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <menupass+0x5a>
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d006      	beq.n	8003a36 <menupass+0x66>
 8003a28:	e011      	b.n	8003a4e <menupass+0x7e>
			{
			case 0:
				CLCD_Display(&LCD1, "  PASSWORD", "=>OPEN DOOR");
 8003a2a:	4a3d      	ldr	r2, [pc, #244]	; (8003b20 <menupass+0x150>)
 8003a2c:	4939      	ldr	r1, [pc, #228]	; (8003b14 <menupass+0x144>)
 8003a2e:	483a      	ldr	r0, [pc, #232]	; (8003b18 <menupass+0x148>)
 8003a30:	f7fc fee4 	bl	80007fc <CLCD_Display>
				break;
 8003a34:	e012      	b.n	8003a5c <menupass+0x8c>
			case 1:
				CLCD_Display(&LCD1, "  PASSWORD", "=>REMOVEALL");
 8003a36:	4a3b      	ldr	r2, [pc, #236]	; (8003b24 <menupass+0x154>)
 8003a38:	4936      	ldr	r1, [pc, #216]	; (8003b14 <menupass+0x144>)
 8003a3a:	4837      	ldr	r0, [pc, #220]	; (8003b18 <menupass+0x148>)
 8003a3c:	f7fc fede 	bl	80007fc <CLCD_Display>
				break;
 8003a40:	e00c      	b.n	8003a5c <menupass+0x8c>
			case 2:
				CLCD_Display(&LCD1, "  PASSWORD", "=>CHANGEPASSWORD");
 8003a42:	4a39      	ldr	r2, [pc, #228]	; (8003b28 <menupass+0x158>)
 8003a44:	4933      	ldr	r1, [pc, #204]	; (8003b14 <menupass+0x144>)
 8003a46:	4834      	ldr	r0, [pc, #208]	; (8003b18 <menupass+0x148>)
 8003a48:	f7fc fed8 	bl	80007fc <CLCD_Display>
				break;
 8003a4c:	e006      	b.n	8003a5c <menupass+0x8c>
			default:
				CLCD_Display(&LCD1, "  PASSWORD", "=>EXIT        ");
 8003a4e:	4a37      	ldr	r2, [pc, #220]	; (8003b2c <menupass+0x15c>)
 8003a50:	4930      	ldr	r1, [pc, #192]	; (8003b14 <menupass+0x144>)
 8003a52:	4831      	ldr	r0, [pc, #196]	; (8003b18 <menupass+0x148>)
 8003a54:	f7fc fed2 	bl	80007fc <CLCD_Display>
				break;
 8003a58:	e000      	b.n	8003a5c <menupass+0x8c>
			}
		}
 8003a5a:	bf00      	nop
		if (checkbuton(MENU_GPIO_Port, MENU_Pin) != 0)
 8003a5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a60:	4833      	ldr	r0, [pc, #204]	; (8003b30 <menupass+0x160>)
 8003a62:	f000 feeb 	bl	800483c <checkbuton>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d043      	beq.n	8003af4 <menupass+0x124>
		{
			exitmenu = Delaymenu;
 8003a6c:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <menupass+0x13c>)
 8003a6e:	221e      	movs	r2, #30
 8003a70:	701a      	strb	r2, [r3, #0]
			switch (statusmenu)
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d02b      	beq.n	8003ad0 <menupass+0x100>
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	dc34      	bgt.n	8003ae6 <menupass+0x116>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <menupass+0xb6>
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d008      	beq.n	8003a96 <menupass+0xc6>
 8003a84:	e02f      	b.n	8003ae6 <menupass+0x116>
			{
			case 0:
				opendoor();
 8003a86:	f7ff fc8b 	bl	80033a0 <opendoor>
				CLCD_Display(&LCD1, "  PASSWORD", "=>OPEN DOOR");
 8003a8a:	4a25      	ldr	r2, [pc, #148]	; (8003b20 <menupass+0x150>)
 8003a8c:	4921      	ldr	r1, [pc, #132]	; (8003b14 <menupass+0x144>)
 8003a8e:	4822      	ldr	r0, [pc, #136]	; (8003b18 <menupass+0x148>)
 8003a90:	f7fc feb4 	bl	80007fc <CLCD_Display>
				break;
 8003a94:	e02f      	b.n	8003af6 <menupass+0x126>
			case 1:
				HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 1);
 8003a96:	2201      	movs	r2, #1
 8003a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a9c:	481f      	ldr	r0, [pc, #124]	; (8003b1c <menupass+0x14c>)
 8003a9e:	f001 fcde 	bl	800545e <HAL_GPIO_WritePin>
				HAL_Delay(5000);
 8003aa2:	f241 3088 	movw	r0, #5000	; 0x1388
 8003aa6:	f000 ffdb 	bl	8004a60 <HAL_Delay>
				HAL_GPIO_WritePin(KHOA_GPIO_Port, KHOA_Pin, 0);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ab0:	481a      	ldr	r0, [pc, #104]	; (8003b1c <menupass+0x14c>)
 8003ab2:	f001 fcd4 	bl	800545e <HAL_GPIO_WritePin>
				remoall();
 8003ab6:	f7ff fa2d 	bl	8002f14 <remoall>
				startadd();
 8003aba:	f7ff f9b5 	bl	8002e28 <startadd>
				exitmenu =0;
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <menupass+0x13c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
				CLCD_Display(&LCD1, "  PASSWORD", "=>REMOVEALL");
 8003ac4:	4a17      	ldr	r2, [pc, #92]	; (8003b24 <menupass+0x154>)
 8003ac6:	4913      	ldr	r1, [pc, #76]	; (8003b14 <menupass+0x144>)
 8003ac8:	4813      	ldr	r0, [pc, #76]	; (8003b18 <menupass+0x148>)
 8003aca:	f7fc fe97 	bl	80007fc <CLCD_Display>
				break;
 8003ace:	e012      	b.n	8003af6 <menupass+0x126>
			case 2:
				changepass();
 8003ad0:	f000 f868 	bl	8003ba4 <changepass>
				exitmenu = 0;
 8003ad4:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <menupass+0x13c>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
				CLCD_Display(&LCD1, "  PASSWORD", "=>CHANGEPASSWORD");
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <menupass+0x158>)
 8003adc:	490d      	ldr	r1, [pc, #52]	; (8003b14 <menupass+0x144>)
 8003ade:	480e      	ldr	r0, [pc, #56]	; (8003b18 <menupass+0x148>)
 8003ae0:	f7fc fe8c 	bl	80007fc <CLCD_Display>
				break;
 8003ae4:	e007      	b.n	8003af6 <menupass+0x126>
			default:
				CLCD_Clear(&LCD1);
 8003ae6:	480c      	ldr	r0, [pc, #48]	; (8003b18 <menupass+0x148>)
 8003ae8:	f7fc fe6a 	bl	80007c0 <CLCD_Clear>
				exitmenu = 0;
 8003aec:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <menupass+0x13c>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
				break;
 8003af2:	e000      	b.n	8003af6 <menupass+0x126>
			}
		}
 8003af4:	bf00      	nop
	while(exitmenu){
 8003af6:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <menupass+0x13c>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f47f af76 	bne.w	80039ec <menupass+0x1c>
	}

}
 8003b00:	bf00      	nop
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000000 	.word	0x20000000
 8003b10:	0800e0e0 	.word	0x0800e0e0
 8003b14:	0800e0ec 	.word	0x0800e0ec
 8003b18:	20000348 	.word	0x20000348
 8003b1c:	40010c00 	.word	0x40010c00
 8003b20:	0800e0f8 	.word	0x0800e0f8
 8003b24:	0800e104 	.word	0x0800e104
 8003b28:	0800e110 	.word	0x0800e110
 8003b2c:	0800e124 	.word	0x0800e124
 8003b30:	40010800 	.word	0x40010800

08003b34 <writepassword>:

void writepassword(void){
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressPassword;
 8003b3a:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <writepassword+0x24>)
 8003b3c:	607b      	str	r3, [r7, #4]
	Flash_Erase(pt);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fc fb04 	bl	800014c <Flash_Erase>
	Flash_Write_Array(pt, PassWord, 8);
 8003b44:	2208      	movs	r2, #8
 8003b46:	4905      	ldr	r1, [pc, #20]	; (8003b5c <writepassword+0x28>)
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fc fb33 	bl	80001b4 <Flash_Write_Array>
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	0800fc00 	.word	0x0800fc00
 8003b5c:	200003a0 	.word	0x200003a0

08003b60 <readpassword>:

void readpassword(void)
{
 8003b60:	b590      	push	{r4, r7, lr}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressPassword;
 8003b66:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <readpassword+0x3c>)
 8003b68:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 0; i< 8 ; i++ ){
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	71fb      	strb	r3, [r7, #7]
 8003b6e:	e00d      	b.n	8003b8c <readpassword+0x2c>
		PassWord[i] = Flash_Read_Byte(pt +i);
 8003b70:	79fa      	ldrb	r2, [r7, #7]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	4413      	add	r3, r2
 8003b76:	79fc      	ldrb	r4, [r7, #7]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fc fb3e 	bl	80001fa <Flash_Read_Byte>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	461a      	mov	r2, r3
 8003b82:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <readpassword+0x40>)
 8003b84:	551a      	strb	r2, [r3, r4]
	for(uint8_t i = 0; i< 8 ; i++ ){
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	71fb      	strb	r3, [r7, #7]
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	2b07      	cmp	r3, #7
 8003b90:	d9ee      	bls.n	8003b70 <readpassword+0x10>
	}
}
 8003b92:	bf00      	nop
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd90      	pop	{r4, r7, pc}
 8003b9c:	0800fc00 	.word	0x0800fc00
 8003ba0:	200003a0 	.word	0x200003a0

08003ba4 <changepass>:

void changepass(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
	CLCD_Display(&LCD1, "  NEWPASSWORD:", "");
 8003baa:	4a44      	ldr	r2, [pc, #272]	; (8003cbc <changepass+0x118>)
 8003bac:	4944      	ldr	r1, [pc, #272]	; (8003cc0 <changepass+0x11c>)
 8003bae:	4845      	ldr	r0, [pc, #276]	; (8003cc4 <changepass+0x120>)
 8003bb0:	f7fc fe24 	bl	80007fc <CLCD_Display>
	exitmenu =120;
 8003bb4:	4b44      	ldr	r3, [pc, #272]	; (8003cc8 <changepass+0x124>)
 8003bb6:	2278      	movs	r2, #120	; 0x78
 8003bb8:	701a      	strb	r2, [r3, #0]
	uint8_t passs[8] = {0};
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60bb      	str	r3, [r7, #8]
	uint8_t k=0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	73fb      	strb	r3, [r7, #15]
	uint8_t pas = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(1000);
 8003bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bce:	f000 ff47 	bl	8004a60 <HAL_Delay>
	while(checkbuton(MENU_GPIO_Port, MENU_Pin) != 0){}
 8003bd2:	bf00      	nop
 8003bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bd8:	483c      	ldr	r0, [pc, #240]	; (8003ccc <changepass+0x128>)
 8003bda:	f000 fe2f 	bl	800483c <checkbuton>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f7      	bne.n	8003bd4 <changepass+0x30>
	CLCD_SetCursor(&LCD1, k, 1);
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	2201      	movs	r2, #1
 8003be8:	4619      	mov	r1, r3
 8003bea:	4836      	ldr	r0, [pc, #216]	; (8003cc4 <changepass+0x120>)
 8003bec:	f7fc fd6a 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteChar(&LCD1, 0);
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	4834      	ldr	r0, [pc, #208]	; (8003cc4 <changepass+0x120>)
 8003bf4:	f7fc fdae 	bl	8000754 <CLCD_WriteChar>
	while(exitmenu){
 8003bf8:	e059      	b.n	8003cae <changepass+0x10a>
		if(checkbuton(SELECCT_GPIO_Port, SELECCT_Pin) == 1){
 8003bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bfe:	4834      	ldr	r0, [pc, #208]	; (8003cd0 <changepass+0x12c>)
 8003c00:	f000 fe1c 	bl	800483c <checkbuton>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d114      	bne.n	8003c34 <changepass+0x90>
			pas++;
 8003c0a:	7bbb      	ldrb	r3, [r7, #14]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	73bb      	strb	r3, [r7, #14]
			if(pas > 9)	pas = 0;
 8003c10:	7bbb      	ldrb	r3, [r7, #14]
 8003c12:	2b09      	cmp	r3, #9
 8003c14:	d901      	bls.n	8003c1a <changepass+0x76>
 8003c16:	2300      	movs	r3, #0
 8003c18:	73bb      	strb	r3, [r7, #14]
			CLCD_SetCursor(&LCD1, k, 1);
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4828      	ldr	r0, [pc, #160]	; (8003cc4 <changepass+0x120>)
 8003c22:	f7fc fd4f 	bl	80006c4 <CLCD_SetCursor>
			CLCD_WriteChar(&LCD1, pas + 0x30);
 8003c26:	7bbb      	ldrb	r3, [r7, #14]
 8003c28:	3330      	adds	r3, #48	; 0x30
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4825      	ldr	r0, [pc, #148]	; (8003cc4 <changepass+0x120>)
 8003c30:	f7fc fd90 	bl	8000754 <CLCD_WriteChar>
		}
		if(checkbuton(MENU_GPIO_Port, MENU_Pin) == 1){
 8003c34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c38:	4824      	ldr	r0, [pc, #144]	; (8003ccc <changepass+0x128>)
 8003c3a:	f000 fdff 	bl	800483c <checkbuton>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d134      	bne.n	8003cae <changepass+0x10a>
			passs[k] = pas;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	3310      	adds	r3, #16
 8003c48:	443b      	add	r3, r7
 8003c4a:	7bba      	ldrb	r2, [r7, #14]
 8003c4c:	f803 2c0c 	strb.w	r2, [r3, #-12]
			k = k+1;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	3301      	adds	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
			pas = 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	73bb      	strb	r3, [r7, #14]
			if(k == 8){
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d11c      	bne.n	8003c9a <changepass+0xf6>
				for(uint8_t i = 0 ; i < 8; i++){
 8003c60:	2300      	movs	r3, #0
 8003c62:	737b      	strb	r3, [r7, #13]
 8003c64:	e00a      	b.n	8003c7c <changepass+0xd8>
					PassWord[i] = passs[i];
 8003c66:	7b7a      	ldrb	r2, [r7, #13]
 8003c68:	7b7b      	ldrb	r3, [r7, #13]
 8003c6a:	3210      	adds	r2, #16
 8003c6c:	443a      	add	r2, r7
 8003c6e:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8003c72:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <changepass+0x130>)
 8003c74:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i = 0 ; i < 8; i++){
 8003c76:	7b7b      	ldrb	r3, [r7, #13]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	737b      	strb	r3, [r7, #13]
 8003c7c:	7b7b      	ldrb	r3, [r7, #13]
 8003c7e:	2b07      	cmp	r3, #7
 8003c80:	d9f1      	bls.n	8003c66 <changepass+0xc2>
				}
				writepassword();
 8003c82:	f7ff ff57 	bl	8003b34 <writepassword>
				CLCD_Display(&LCD1, "CHANGE PASSWORD", "THANH CONG");
 8003c86:	4a14      	ldr	r2, [pc, #80]	; (8003cd8 <changepass+0x134>)
 8003c88:	4914      	ldr	r1, [pc, #80]	; (8003cdc <changepass+0x138>)
 8003c8a:	480e      	ldr	r0, [pc, #56]	; (8003cc4 <changepass+0x120>)
 8003c8c:	f7fc fdb6 	bl	80007fc <CLCD_Display>
				HAL_Delay(1000);
 8003c90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c94:	f000 fee4 	bl	8004a60 <HAL_Delay>
 8003c98:	e00d      	b.n	8003cb6 <changepass+0x112>
				return;
			}
			CLCD_SetCursor(&LCD1, k, 1);
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4808      	ldr	r0, [pc, #32]	; (8003cc4 <changepass+0x120>)
 8003ca2:	f7fc fd0f 	bl	80006c4 <CLCD_SetCursor>
			CLCD_WriteChar(&LCD1, 48);
 8003ca6:	2130      	movs	r1, #48	; 0x30
 8003ca8:	4806      	ldr	r0, [pc, #24]	; (8003cc4 <changepass+0x120>)
 8003caa:	f7fc fd53 	bl	8000754 <CLCD_WriteChar>
	while(exitmenu){
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <changepass+0x124>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1a1      	bne.n	8003bfa <changepass+0x56>
		}

	}
}
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	0800e0cc 	.word	0x0800e0cc
 8003cc0:	0800e134 	.word	0x0800e134
 8003cc4:	20000348 	.word	0x20000348
 8003cc8:	20000000 	.word	0x20000000
 8003ccc:	40010800 	.word	0x40010800
 8003cd0:	40010c00 	.word	0x40010c00
 8003cd4:	200003a0 	.word	0x200003a0
 8003cd8:	0800e144 	.word	0x0800e144
 8003cdc:	0800e150 	.word	0x0800e150

08003ce0 <TM_SPI_Send>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t back_data[12],m;
RC522_DATA  		rc522;

uint8_t TM_SPI_Send(uint8_t data)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	733b      	strb	r3, [r7, #12]
	while(!__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE));
 8003cee:	bf00      	nop
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <TM_SPI_Send+0x4c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d1f8      	bne.n	8003cf0 <TM_SPI_Send+0x10>
	HAL_SPI_TransmitReceive(&hspi1, data_se, data_re, 1, 10);
 8003cfe:	f107 0208 	add.w	r2, r7, #8
 8003d02:	f107 010c 	add.w	r1, r7, #12
 8003d06:	230a      	movs	r3, #10
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	4807      	ldr	r0, [pc, #28]	; (8003d2c <TM_SPI_Send+0x4c>)
 8003d0e:	f003 fdd5 	bl	80078bc <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 8003d12:	bf00      	nop
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <TM_SPI_Send+0x4c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1e:	2b80      	cmp	r3, #128	; 0x80
 8003d20:	d0f8      	beq.n	8003d14 <TM_SPI_Send+0x34>
	return data_re[0];
 8003d22:	7a3b      	ldrb	r3, [r7, #8]

}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000214 	.word	0x20000214

08003d30 <TM_MFRC522_Init>:


void TM_MFRC522_Init(void)
	{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0

	TM_MFRC522_Reset();
 8003d34:	f000 f8d5 	bl	8003ee2 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8003d38:	218d      	movs	r1, #141	; 0x8d
 8003d3a:	202a      	movs	r0, #42	; 0x2a
 8003d3c:	f000 f836 	bl	8003dac <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8003d40:	213e      	movs	r1, #62	; 0x3e
 8003d42:	202b      	movs	r0, #43	; 0x2b
 8003d44:	f000 f832 	bl	8003dac <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);
 8003d48:	211e      	movs	r1, #30
 8003d4a:	202d      	movs	r0, #45	; 0x2d
 8003d4c:	f000 f82e 	bl	8003dac <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8003d50:	2100      	movs	r1, #0
 8003d52:	202c      	movs	r0, #44	; 0x2c
 8003d54:	f000 f82a 	bl	8003dac <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8003d58:	2170      	movs	r1, #112	; 0x70
 8003d5a:	2026      	movs	r0, #38	; 0x26
 8003d5c:	f000 f826 	bl	8003dac <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8003d60:	2140      	movs	r1, #64	; 0x40
 8003d62:	2015      	movs	r0, #21
 8003d64:	f000 f822 	bl	8003dac <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8003d68:	213d      	movs	r1, #61	; 0x3d
 8003d6a:	2011      	movs	r0, #17
 8003d6c:	f000 f81e 	bl	8003dac <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8003d70:	f000 f8a2 	bl	8003eb8 <TM_MFRC522_AntennaOn>
}
 8003d74:	bf00      	nop
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	status = TM_MFRC522_Request(PICC_REQIDL, id);
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	2026      	movs	r0, #38	; 0x26
 8003d84:	f000 f8b5 	bl	8003ef2 <TM_MFRC522_Request>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d104      	bne.n	8003d9c <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f9a1 	bl	80040da <TM_MFRC522_Anticoll>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation
 8003d9c:	f000 fa23 	bl	80041e6 <TM_MFRC522_Halt>
	return status;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <TM_MFRC522_WriteRegister>:
	}
	return MI_OK;
}


void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	460a      	mov	r2, r1
 8003db6:	71fb      	strb	r3, [r7, #7]
 8003db8:	4613      	mov	r3, r2
 8003dba:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2110      	movs	r1, #16
 8003dc0:	480c      	ldr	r0, [pc, #48]	; (8003df4 <TM_MFRC522_WriteRegister+0x48>)
 8003dc2:	f001 fb4c 	bl	800545e <HAL_GPIO_WritePin>
	//Send address
	TM_SPI_Send((addr << 1) & 0x7E);
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff ff84 	bl	8003ce0 <TM_SPI_Send>
	//Send data
	TM_SPI_Send(val);
 8003dd8:	79bb      	ldrb	r3, [r7, #6]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff ff80 	bl	8003ce0 <TM_SPI_Send>
	//CS high
	MFRC522_CS_HIGH;
 8003de0:	2201      	movs	r2, #1
 8003de2:	2110      	movs	r1, #16
 8003de4:	4803      	ldr	r0, [pc, #12]	; (8003df4 <TM_MFRC522_WriteRegister+0x48>)
 8003de6:	f001 fb3a 	bl	800545e <HAL_GPIO_WritePin>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40010800 	.word	0x40010800

08003df8 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8003e02:	2200      	movs	r2, #0
 8003e04:	2110      	movs	r1, #16
 8003e06:	480f      	ldr	r0, [pc, #60]	; (8003e44 <TM_MFRC522_ReadRegister+0x4c>)
 8003e08:	f001 fb29 	bl	800545e <HAL_GPIO_WritePin>

	TM_SPI_Send(((addr << 1) & 0x7E) | 0x80);
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	b25b      	sxtb	r3, r3
 8003e12:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003e16:	b25b      	sxtb	r3, r3
 8003e18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e1c:	b25b      	sxtb	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff5d 	bl	8003ce0 <TM_SPI_Send>
	val = TM_SPI_Send(MFRC522_DUMMY);
 8003e26:	2000      	movs	r0, #0
 8003e28:	f7ff ff5a 	bl	8003ce0 <TM_SPI_Send>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8003e30:	2201      	movs	r2, #1
 8003e32:	2110      	movs	r1, #16
 8003e34:	4803      	ldr	r0, [pc, #12]	; (8003e44 <TM_MFRC522_ReadRegister+0x4c>)
 8003e36:	f001 fb12 	bl	800545e <HAL_GPIO_WritePin>

	return val;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40010800 	.word	0x40010800

08003e48 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	460a      	mov	r2, r1
 8003e52:	71fb      	strb	r3, [r7, #7]
 8003e54:	4613      	mov	r3, r2
 8003e56:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ffcc 	bl	8003df8 <TM_MFRC522_ReadRegister>
 8003e60:	4603      	mov	r3, r0
 8003e62:	461a      	mov	r2, r3
 8003e64:	79bb      	ldrb	r3, [r7, #6]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff ff9c 	bl	8003dac <TM_MFRC522_WriteRegister>
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	460a      	mov	r2, r1
 8003e86:	71fb      	strb	r3, [r7, #7]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff ffb2 	bl	8003df8 <TM_MFRC522_ReadRegister>
 8003e94:	4603      	mov	r3, r0
 8003e96:	b25a      	sxtb	r2, r3
 8003e98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	b25b      	sxtb	r3, r3
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	b25b      	sxtb	r3, r3
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff ff7e 	bl	8003dac <TM_MFRC522_WriteRegister>
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8003ebe:	2014      	movs	r0, #20
 8003ec0:	f7ff ff9a 	bl	8003df8 <TM_MFRC522_ReadRegister>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d103      	bne.n	8003eda <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8003ed2:	2103      	movs	r1, #3
 8003ed4:	2014      	movs	r0, #20
 8003ed6:	f7ff ffb7 	bl	8003e48 <TM_MFRC522_SetBitMask>
	}
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8003ee6:	210f      	movs	r1, #15
 8003ee8:	2001      	movs	r0, #1
 8003eea:	f7ff ff5f 	bl	8003dac <TM_MFRC522_WriteRegister>
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b086      	sub	sp, #24
 8003ef6:	af02      	add	r7, sp, #8
 8003ef8:	4603      	mov	r3, r0
 8003efa:	6039      	str	r1, [r7, #0]
 8003efc:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8003efe:	2107      	movs	r1, #7
 8003f00:	200d      	movs	r0, #13
 8003f02:	f7ff ff53 	bl	8003dac <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	79fa      	ldrb	r2, [r7, #7]
 8003f0a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8003f0c:	f107 030c 	add.w	r3, r7, #12
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2201      	movs	r2, #1
 8003f16:	6839      	ldr	r1, [r7, #0]
 8003f18:	200c      	movs	r0, #12
 8003f1a:	f000 f80f 	bl	8003f3c <TM_MFRC522_ToCard>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <TM_MFRC522_Request+0x3c>
 8003f28:	89bb      	ldrh	r3, [r7, #12]
 8003f2a:	2b10      	cmp	r3, #16
 8003f2c:	d001      	beq.n	8003f32 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8003f2e:	2302      	movs	r3, #2
 8003f30:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8003f3c:	b590      	push	{r4, r7, lr}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	4603      	mov	r3, r0
 8003f48:	73fb      	strb	r3, [r7, #15]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8003f52:	2300      	movs	r3, #0
 8003f54:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8003f56:	2300      	movs	r3, #0
 8003f58:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b0c      	cmp	r3, #12
 8003f5e:	d006      	beq.n	8003f6e <TM_MFRC522_ToCard+0x32>
 8003f60:	2b0e      	cmp	r3, #14
 8003f62:	d109      	bne.n	8003f78 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8003f64:	2312      	movs	r3, #18
 8003f66:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8003f68:	2310      	movs	r3, #16
 8003f6a:	757b      	strb	r3, [r7, #21]
			break;
 8003f6c:	e005      	b.n	8003f7a <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8003f6e:	2377      	movs	r3, #119	; 0x77
 8003f70:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8003f72:	2330      	movs	r3, #48	; 0x30
 8003f74:	757b      	strb	r3, [r7, #21]
			break;
 8003f76:	e000      	b.n	8003f7a <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8003f78:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8003f7a:	7dbb      	ldrb	r3, [r7, #22]
 8003f7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	4619      	mov	r1, r3
 8003f84:	2002      	movs	r0, #2
 8003f86:	f7ff ff11 	bl	8003dac <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8003f8a:	2180      	movs	r1, #128	; 0x80
 8003f8c:	2004      	movs	r0, #4
 8003f8e:	f7ff ff75 	bl	8003e7c <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8003f92:	2180      	movs	r1, #128	; 0x80
 8003f94:	200a      	movs	r0, #10
 8003f96:	f7ff ff57 	bl	8003e48 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f7ff ff05 	bl	8003dac <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	827b      	strh	r3, [r7, #18]
 8003fa6:	e00a      	b.n	8003fbe <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8003fa8:	8a7b      	ldrh	r3, [r7, #18]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	4413      	add	r3, r2
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	2009      	movs	r0, #9
 8003fb4:	f7ff fefa 	bl	8003dac <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8003fb8:	8a7b      	ldrh	r3, [r7, #18]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	827b      	strh	r3, [r7, #18]
 8003fbe:	7bbb      	ldrb	r3, [r7, #14]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	8a7a      	ldrh	r2, [r7, #18]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d3ef      	bcc.n	8003fa8 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	2001      	movs	r0, #1
 8003fce:	f7ff feed 	bl	8003dac <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	2b0c      	cmp	r3, #12
 8003fd6:	d103      	bne.n	8003fe0 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8003fd8:	2180      	movs	r1, #128	; 0x80
 8003fda:	200d      	movs	r0, #13
 8003fdc:	f7ff ff34 	bl	8003e48 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003fe0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003fe4:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8003fe6:	2004      	movs	r0, #4
 8003fe8:	f7ff ff06 	bl	8003df8 <TM_MFRC522_ReadRegister>
 8003fec:	4603      	mov	r3, r0
 8003fee:	753b      	strb	r3, [r7, #20]
		i--;
 8003ff0:	8a7b      	ldrh	r3, [r7, #18]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003ff6:	8a7b      	ldrh	r3, [r7, #18]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <TM_MFRC522_ToCard+0xd6>
 8003ffc:	7d3b      	ldrb	r3, [r7, #20]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d105      	bne.n	8004012 <TM_MFRC522_ToCard+0xd6>
 8004006:	7d3a      	ldrb	r2, [r7, #20]
 8004008:	7d7b      	ldrb	r3, [r7, #21]
 800400a:	4013      	ands	r3, r2
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0e9      	beq.n	8003fe6 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8004012:	2180      	movs	r1, #128	; 0x80
 8004014:	200d      	movs	r0, #13
 8004016:	f7ff ff31 	bl	8003e7c <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 800401a:	8a7b      	ldrh	r3, [r7, #18]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d057      	beq.n	80040d0 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8004020:	2006      	movs	r0, #6
 8004022:	f7ff fee9 	bl	8003df8 <TM_MFRC522_ReadRegister>
 8004026:	4603      	mov	r3, r0
 8004028:	f003 031b 	and.w	r3, r3, #27
 800402c:	2b00      	cmp	r3, #0
 800402e:	d14d      	bne.n	80040cc <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 8004034:	7d3a      	ldrb	r2, [r7, #20]
 8004036:	7dbb      	ldrb	r3, [r7, #22]
 8004038:	4013      	ands	r3, r2
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;
 8004044:	2301      	movs	r3, #1
 8004046:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b0c      	cmp	r3, #12
 800404c:	d140      	bne.n	80040d0 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800404e:	200a      	movs	r0, #10
 8004050:	f7ff fed2 	bl	8003df8 <TM_MFRC522_ReadRegister>
 8004054:	4603      	mov	r3, r0
 8004056:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8004058:	200c      	movs	r0, #12
 800405a:	f7ff fecd 	bl	8003df8 <TM_MFRC522_ReadRegister>
 800405e:	4603      	mov	r3, r0
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 8004066:	7c7b      	ldrb	r3, [r7, #17]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00b      	beq.n	8004084 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;
 800406c:	7d3b      	ldrb	r3, [r7, #20]
 800406e:	3b01      	subs	r3, #1
 8004070:	b29b      	uxth	r3, r3
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	b29a      	uxth	r2, r3
 8004076:	7c7b      	ldrb	r3, [r7, #17]
 8004078:	b29b      	uxth	r3, r3
 800407a:	4413      	add	r3, r2
 800407c:	b29a      	uxth	r2, r3
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	801a      	strh	r2, [r3, #0]
 8004082:	e005      	b.n	8004090 <TM_MFRC522_ToCard+0x154>
				} else {
					*backLen = n * 8;
 8004084:	7d3b      	ldrb	r3, [r7, #20]
 8004086:	b29b      	uxth	r3, r3
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	b29a      	uxth	r2, r3
 800408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408e:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 8004090:	7d3b      	ldrb	r3, [r7, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <TM_MFRC522_ToCard+0x15e>
					n = 1;
 8004096:	2301      	movs	r3, #1
 8004098:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 800409a:	7d3b      	ldrb	r3, [r7, #20]
 800409c:	2b10      	cmp	r3, #16
 800409e:	d901      	bls.n	80040a4 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;
 80040a0:	2310      	movs	r3, #16
 80040a2:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 80040a4:	2300      	movs	r3, #0
 80040a6:	827b      	strh	r3, [r7, #18]
 80040a8:	e00a      	b.n	80040c0 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 80040aa:	8a7b      	ldrh	r3, [r7, #18]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	18d4      	adds	r4, r2, r3
 80040b0:	2009      	movs	r0, #9
 80040b2:	f7ff fea1 	bl	8003df8 <TM_MFRC522_ReadRegister>
 80040b6:	4603      	mov	r3, r0
 80040b8:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80040ba:	8a7b      	ldrh	r3, [r7, #18]
 80040bc:	3301      	adds	r3, #1
 80040be:	827b      	strh	r3, [r7, #18]
 80040c0:	7d3b      	ldrb	r3, [r7, #20]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8a7a      	ldrh	r2, [r7, #18]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d3ef      	bcc.n	80040aa <TM_MFRC522_ToCard+0x16e>
 80040ca:	e001      	b.n	80040d0 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {
			status = MI_ERR;
 80040cc:	2302      	movs	r3, #2
 80040ce:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd90      	pop	{r4, r7, pc}

080040da <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 80040da:	b580      	push	{r7, lr}
 80040dc:	b086      	sub	sp, #24
 80040de:	af02      	add	r7, sp, #8
 80040e0:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80040e6:	2100      	movs	r1, #0
 80040e8:	200d      	movs	r0, #13
 80040ea:	f7ff fe5f 	bl	8003dac <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2293      	movs	r2, #147	; 0x93
 80040f2:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3301      	adds	r3, #1
 80040f8:	2220      	movs	r2, #32
 80040fa:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80040fc:	f107 030a 	add.w	r3, r7, #10
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2202      	movs	r2, #2
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	200c      	movs	r0, #12
 800410a:	f7ff ff17 	bl	8003f3c <TM_MFRC522_ToCard>
 800410e:	4603      	mov	r3, r0
 8004110:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d118      	bne.n	800414a <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8004118:	2300      	movs	r3, #0
 800411a:	73bb      	strb	r3, [r7, #14]
 800411c:	e009      	b.n	8004132 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 800411e:	7bbb      	ldrb	r3, [r7, #14]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	4413      	add	r3, r2
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	7b7b      	ldrb	r3, [r7, #13]
 8004128:	4053      	eors	r3, r2
 800412a:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 800412c:	7bbb      	ldrb	r3, [r7, #14]
 800412e:	3301      	adds	r3, #1
 8004130:	73bb      	strb	r3, [r7, #14]
 8004132:	7bbb      	ldrb	r3, [r7, #14]
 8004134:	2b03      	cmp	r3, #3
 8004136:	d9f2      	bls.n	800411e <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8004138:	7bbb      	ldrb	r3, [r7, #14]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4413      	add	r3, r2
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	7b7a      	ldrb	r2, [r7, #13]
 8004142:	429a      	cmp	r2, r3
 8004144:	d001      	beq.n	800414a <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 8004146:	2302      	movs	r3, #2
 8004148:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8004154:	b590      	push	{r4, r7, lr}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	460b      	mov	r3, r1
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 8004162:	2104      	movs	r1, #4
 8004164:	2005      	movs	r0, #5
 8004166:	f7ff fe89 	bl	8003e7c <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 800416a:	2180      	movs	r1, #128	; 0x80
 800416c:	200a      	movs	r0, #10
 800416e:	f7ff fe6b 	bl	8003e48 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 8004172:	2300      	movs	r3, #0
 8004174:	75fb      	strb	r3, [r7, #23]
 8004176:	e00a      	b.n	800418e <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4413      	add	r3, r2
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	4619      	mov	r1, r3
 8004182:	2009      	movs	r0, #9
 8004184:	f7ff fe12 	bl	8003dac <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	3301      	adds	r3, #1
 800418c:	75fb      	strb	r3, [r7, #23]
 800418e:	7dfa      	ldrb	r2, [r7, #23]
 8004190:	7afb      	ldrb	r3, [r7, #11]
 8004192:	429a      	cmp	r2, r3
 8004194:	d3f0      	bcc.n	8004178 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8004196:	2103      	movs	r1, #3
 8004198:	2001      	movs	r0, #1
 800419a:	f7ff fe07 	bl	8003dac <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 800419e:	23ff      	movs	r3, #255	; 0xff
 80041a0:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80041a2:	2005      	movs	r0, #5
 80041a4:	f7ff fe28 	bl	8003df8 <TM_MFRC522_ReadRegister>
 80041a8:	4603      	mov	r3, r0
 80041aa:	75bb      	strb	r3, [r7, #22]
		i--;
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d004      	beq.n	80041c2 <TM_MFRC522_CalculateCRC+0x6e>
 80041b8:	7dbb      	ldrb	r3, [r7, #22]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0ef      	beq.n	80041a2 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80041c2:	2022      	movs	r0, #34	; 0x22
 80041c4:	f7ff fe18 	bl	8003df8 <TM_MFRC522_ReadRegister>
 80041c8:	4603      	mov	r3, r0
 80041ca:	461a      	mov	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	1c5c      	adds	r4, r3, #1
 80041d4:	2021      	movs	r0, #33	; 0x21
 80041d6:	f7ff fe0f 	bl	8003df8 <TM_MFRC522_ReadRegister>
 80041da:	4603      	mov	r3, r0
 80041dc:	7023      	strb	r3, [r4, #0]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd90      	pop	{r4, r7, pc}

080041e6 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 80041ec:	2350      	movs	r3, #80	; 0x50
 80041ee:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80041f4:	463b      	mov	r3, r7
 80041f6:	1c9a      	adds	r2, r3, #2
 80041f8:	463b      	mov	r3, r7
 80041fa:	2102      	movs	r1, #2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ffa9 	bl	8004154 <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8004202:	463a      	mov	r2, r7
 8004204:	4639      	mov	r1, r7
 8004206:	1dbb      	adds	r3, r7, #6
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	4613      	mov	r3, r2
 800420c:	2204      	movs	r2, #4
 800420e:	200c      	movs	r0, #12
 8004210:	f7ff fe94 	bl	8003f3c <TM_MFRC522_ToCard>



}
 8004214:	bf00      	nop
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <statemachineupdate>:
#include "stateMenu.h"
#include "stateCardID.h"
#include "stateFaceID.h"


void statemachineupdate(enum Status *state){
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]

	switch(*state){
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d81e      	bhi.n	800426a <statemachineupdate+0x4e>
 800422c:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <statemachineupdate+0x18>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	08004269 	.word	0x08004269
 8004238:	08004245 	.word	0x08004245
 800423c:	08004251 	.word	0x08004251
 8004240:	0800425d 	.word	0x0800425d
	case Menu:
		startmenu();
 8004244:	f000 f86c 	bl	8004320 <startmenu>
		*state = Free;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
		break;
 800424e:	e00c      	b.n	800426a <statemachineupdate+0x4e>
	case CardID:
		startcard();
 8004250:	f000 f810 	bl	8004274 <startcard>
		*state = Free;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]
		break;
 800425a:	e006      	b.n	800426a <statemachineupdate+0x4e>
	case FaceID :
		startface();
 800425c:	f000 f846 	bl	80042ec <startface>
		*state = Free;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
		break;
 8004266:	e000      	b.n	800426a <statemachineupdate+0x4e>
	case Free:
		break;
 8004268:	bf00      	nop
	}

}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop

08004274 <startcard>:
extern CLCD_Name LCD1;
extern uint8_t IDCard[MFRC522_MAX_LEN];
extern char str[20];

void startcard(void)
{
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b085      	sub	sp, #20
 8004278:	af04      	add	r7, sp, #16
	sprintf(str, "ID: 0x%02X%02X%02X%02X%02X", IDCard[0], IDCard[1], IDCard[2], IDCard[3], IDCard[4]);
 800427a:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <startcard+0x60>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <startcard+0x60>)
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	461c      	mov	r4, r3
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <startcard+0x60>)
 8004288:	789b      	ldrb	r3, [r3, #2]
 800428a:	461a      	mov	r2, r3
 800428c:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <startcard+0x60>)
 800428e:	78db      	ldrb	r3, [r3, #3]
 8004290:	4619      	mov	r1, r3
 8004292:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <startcard+0x60>)
 8004294:	791b      	ldrb	r3, [r3, #4]
 8004296:	9302      	str	r3, [sp, #8]
 8004298:	9101      	str	r1, [sp, #4]
 800429a:	9200      	str	r2, [sp, #0]
 800429c:	4623      	mov	r3, r4
 800429e:	4602      	mov	r2, r0
 80042a0:	490d      	ldr	r1, [pc, #52]	; (80042d8 <startcard+0x64>)
 80042a2:	480e      	ldr	r0, [pc, #56]	; (80042dc <startcard+0x68>)
 80042a4:	f008 ff72 	bl	800d18c <siprintf>
	swipesuccess();
 80042a8:	f000 fa62 	bl	8004770 <swipesuccess>
	if (CheckListUID(IDCard) != 0)
 80042ac:	4809      	ldr	r0, [pc, #36]	; (80042d4 <startcard+0x60>)
 80042ae:	f000 fa2f 	bl	8004710 <CheckListUID>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <startcard+0x4a>
	{
		opendoor();
 80042b8:	f7ff f872 	bl	80033a0 <opendoor>
 80042bc:	e001      	b.n	80042c2 <startcard+0x4e>
	}
	else
	{
		noopendoor();
 80042be:	f7ff f891 	bl	80033e4 <noopendoor>
	}
	CLCD_Display(&LCD1, " MOI QUET THE ", "");
 80042c2:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <startcard+0x6c>)
 80042c4:	4907      	ldr	r1, [pc, #28]	; (80042e4 <startcard+0x70>)
 80042c6:	4808      	ldr	r0, [pc, #32]	; (80042e8 <startcard+0x74>)
 80042c8:	f7fc fa98 	bl	80007fc <CLCD_Display>

}
 80042cc:	bf00      	nop
 80042ce:	3704      	adds	r7, #4
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd90      	pop	{r4, r7, pc}
 80042d4:	200002b8 	.word	0x200002b8
 80042d8:	0800e160 	.word	0x0800e160
 80042dc:	200003a8 	.word	0x200003a8
 80042e0:	0800e17c 	.word	0x0800e17c
 80042e4:	0800e180 	.word	0x0800e180
 80042e8:	20000348 	.word	0x20000348

080042ec <startface>:


extern CLCD_Name LCD1;
extern int8_t Rx_Buffer[128];
void startface(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
	if(Rx_Buffer[0] == 'T'){
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <startface+0x30>)
 80042f2:	f993 3000 	ldrsb.w	r3, [r3]
 80042f6:	2b54      	cmp	r3, #84	; 0x54
 80042f8:	d102      	bne.n	8004300 <startface+0x14>
		opendoor();
 80042fa:	f7ff f851 	bl	80033a0 <opendoor>
 80042fe:	e006      	b.n	800430e <startface+0x22>
	}else if(Rx_Buffer[0] == 'F'){
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <startface+0x30>)
 8004302:	f993 3000 	ldrsb.w	r3, [r3]
 8004306:	2b46      	cmp	r3, #70	; 0x46
 8004308:	d101      	bne.n	800430e <startface+0x22>
		noopendoor();
 800430a:	f7ff f86b 	bl	80033e4 <noopendoor>
	}
	memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 800430e:	2280      	movs	r2, #128	; 0x80
 8004310:	2100      	movs	r1, #0
 8004312:	4802      	ldr	r0, [pc, #8]	; (800431c <startface+0x30>)
 8004314:	f008 ff32 	bl	800d17c <memset>
}
 8004318:	bf00      	nop
 800431a:	bd80      	pop	{r7, pc}
 800431c:	200002c8 	.word	0x200002c8

08004320 <startmenu>:
extern uint8_t buton;
extern int8_t Rx_Buffer[128];


void startmenu(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0

	HAL_NVIC_DisableIRQ(MENU_EXTI_IRQn);
 8004326:	2017      	movs	r0, #23
 8004328:	f000 fce3 	bl	8004cf2 <HAL_NVIC_DisableIRQ>
	Set_Pin_Input(MENU_GPIO_Port, MENU_Pin);
 800432c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004330:	484b      	ldr	r0, [pc, #300]	; (8004460 <startmenu+0x140>)
 8004332:	f000 fa43 	bl	80047bc <Set_Pin_Input>
	exitmenu = Delaymenu;
 8004336:	4b4b      	ldr	r3, [pc, #300]	; (8004464 <startmenu+0x144>)
 8004338:	221e      	movs	r2, #30
 800433a:	701a      	strb	r2, [r3, #0]
	CLCD_SetCursor(&LCD1, 0, 1);
 800433c:	2201      	movs	r2, #1
 800433e:	2100      	movs	r1, #0
 8004340:	4849      	ldr	r0, [pc, #292]	; (8004468 <startmenu+0x148>)
 8004342:	f7fc f9bf 	bl	80006c4 <CLCD_SetCursor>
	CLCD_WriteString(&LCD1, "THE NGUOI LON");
 8004346:	4949      	ldr	r1, [pc, #292]	; (800446c <startmenu+0x14c>)
 8004348:	4847      	ldr	r0, [pc, #284]	; (8004468 <startmenu+0x148>)
 800434a:	f7fc fa22 	bl	8000792 <CLCD_WriteString>
	uint8_t key = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	71fb      	strb	r3, [r7, #7]
	uint8_t stat ;
	while (exitmenu )
 8004352:	e053      	b.n	80043fc <startmenu+0xdc>
	{
		if (TM_MFRC522_Check(IDCard) == MI_OK)
 8004354:	4846      	ldr	r0, [pc, #280]	; (8004470 <startmenu+0x150>)
 8004356:	f7ff fd0f 	bl	8003d78 <TM_MFRC522_Check>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10a      	bne.n	8004376 <startmenu+0x56>
		{
			swipesuccess();
 8004360:	f000 fa06 	bl	8004770 <swipesuccess>
			key = CheckListUID(IDCard);
 8004364:	4842      	ldr	r0, [pc, #264]	; (8004470 <startmenu+0x150>)
 8004366:	f000 f9d3 	bl	8004710 <CheckListUID>
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
			key = key >> 4;
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	71fb      	strb	r3, [r7, #7]
			break;
 8004374:	e046      	b.n	8004404 <startmenu+0xe4>
		}
		if(Rx_Buffer[0] != 0){
 8004376:	4b3f      	ldr	r3, [pc, #252]	; (8004474 <startmenu+0x154>)
 8004378:	f993 3000 	ldrsb.w	r3, [r3]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d022      	beq.n	80043c6 <startmenu+0xa6>
			if (Rx_Buffer[0] == 'T')
 8004380:	4b3c      	ldr	r3, [pc, #240]	; (8004474 <startmenu+0x154>)
 8004382:	f993 3000 	ldrsb.w	r3, [r3]
 8004386:	2b54      	cmp	r3, #84	; 0x54
 8004388:	d115      	bne.n	80043b6 <startmenu+0x96>
			{
				key = (Rx_Buffer[5] -48)*10 + (Rx_Buffer[6] -48) ;
 800438a:	4b3a      	ldr	r3, [pc, #232]	; (8004474 <startmenu+0x154>)
 800438c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8004390:	3b30      	subs	r3, #48	; 0x30
 8004392:	b2db      	uxtb	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	0092      	lsls	r2, r2, #2
 8004398:	4413      	add	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	b2da      	uxtb	r2, r3
 800439e:	4b35      	ldr	r3, [pc, #212]	; (8004474 <startmenu+0x154>)
 80043a0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	3b30      	subs	r3, #48	; 0x30
 80043ac:	71fb      	strb	r3, [r7, #7]
				key = key >> 4;
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	71fb      	strb	r3, [r7, #7]
 80043b4:	e001      	b.n	80043ba <startmenu+0x9a>
			} else
			{
				key = 2;
 80043b6:	2302      	movs	r3, #2
 80043b8:	71fb      	strb	r3, [r7, #7]
			}
			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80043ba:	2280      	movs	r2, #128	; 0x80
 80043bc:	2100      	movs	r1, #0
 80043be:	482d      	ldr	r0, [pc, #180]	; (8004474 <startmenu+0x154>)
 80043c0:	f008 fedc 	bl	800d17c <memset>
			break;
 80043c4:	e01e      	b.n	8004404 <startmenu+0xe4>
		}
		stat = checkbuton(MENU_GPIO_Port, MENU_Pin);
 80043c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043ca:	4825      	ldr	r0, [pc, #148]	; (8004460 <startmenu+0x140>)
 80043cc:	f000 fa36 	bl	800483c <checkbuton>
 80043d0:	4603      	mov	r3, r0
 80043d2:	71bb      	strb	r3, [r7, #6]
		switch(stat){
 80043d4:	79bb      	ldrb	r3, [r7, #6]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d010      	beq.n	80043fc <startmenu+0xdc>
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d000      	beq.n	80043e0 <startmenu+0xc0>
 80043de:	e007      	b.n	80043f0 <startmenu+0xd0>
		case 0:
			break;
		case 3:
			password();
 80043e0:	f7ff fa60 	bl	80038a4 <password>
			key = 99;
 80043e4:	2363      	movs	r3, #99	; 0x63
 80043e6:	71fb      	strb	r3, [r7, #7]
			exitmenu = 0;
 80043e8:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <startmenu+0x144>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
			break;
 80043ee:	e005      	b.n	80043fc <startmenu+0xdc>
		default :
			key = 2;
 80043f0:	2302      	movs	r3, #2
 80043f2:	71fb      	strb	r3, [r7, #7]
			exitmenu = 0;
 80043f4:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <startmenu+0x144>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	701a      	strb	r2, [r3, #0]
			break;
 80043fa:	bf00      	nop
	while (exitmenu )
 80043fc:	4b19      	ldr	r3, [pc, #100]	; (8004464 <startmenu+0x144>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1a7      	bne.n	8004354 <startmenu+0x34>
		}
	}
	switch (key){
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d002      	beq.n	8004410 <startmenu+0xf0>
 800440a:	2b63      	cmp	r3, #99	; 0x63
 800440c:	d018      	beq.n	8004440 <startmenu+0x120>
 800440e:	e00a      	b.n	8004426 <startmenu+0x106>
	case 1:
		CDC_Transmit_FS("Stop  ", 6);
 8004410:	2106      	movs	r1, #6
 8004412:	4819      	ldr	r0, [pc, #100]	; (8004478 <startmenu+0x158>)
 8004414:	f008 fa9c 	bl	800c950 <CDC_Transmit_FS>
		selectmenu();
 8004418:	f7fc fa10 	bl	800083c <selectmenu>
		CDC_Transmit_FS("Ready ", 6);
 800441c:	2106      	movs	r1, #6
 800441e:	4817      	ldr	r0, [pc, #92]	; (800447c <startmenu+0x15c>)
 8004420:	f008 fa96 	bl	800c950 <CDC_Transmit_FS>
		break;
 8004424:	e00d      	b.n	8004442 <startmenu+0x122>
	case 99:
		break;
	default:
		CLCD_Display(&LCD1, "      SAI ", "KHONG CO QUYEN");
 8004426:	4a16      	ldr	r2, [pc, #88]	; (8004480 <startmenu+0x160>)
 8004428:	4916      	ldr	r1, [pc, #88]	; (8004484 <startmenu+0x164>)
 800442a:	480f      	ldr	r0, [pc, #60]	; (8004468 <startmenu+0x148>)
 800442c:	f7fc f9e6 	bl	80007fc <CLCD_Display>
		HAL_Delay(1000);
 8004430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004434:	f000 fb14 	bl	8004a60 <HAL_Delay>
		CLCD_Clear(&LCD1);
 8004438:	480b      	ldr	r0, [pc, #44]	; (8004468 <startmenu+0x148>)
 800443a:	f7fc f9c1 	bl	80007c0 <CLCD_Clear>
		break;
 800443e:	e000      	b.n	8004442 <startmenu+0x122>
		break;
 8004440:	bf00      	nop
	}
	buton = 1;
 8004442:	4b11      	ldr	r3, [pc, #68]	; (8004488 <startmenu+0x168>)
 8004444:	2201      	movs	r2, #1
 8004446:	701a      	strb	r2, [r3, #0]
	Set_Pin_IT(MENU_GPIO_Port, MENU_GPIO_Port);
 8004448:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800444c:	4804      	ldr	r0, [pc, #16]	; (8004460 <startmenu+0x140>)
 800444e:	f000 f9d3 	bl	80047f8 <Set_Pin_IT>
	CLCD_Clear(&LCD1);
 8004452:	4805      	ldr	r0, [pc, #20]	; (8004468 <startmenu+0x148>)
 8004454:	f7fc f9b4 	bl	80007c0 <CLCD_Clear>
}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40010800 	.word	0x40010800
 8004464:	20000000 	.word	0x20000000
 8004468:	20000348 	.word	0x20000348
 800446c:	0800e190 	.word	0x0800e190
 8004470:	200002b8 	.word	0x200002b8
 8004474:	200002c8 	.word	0x200002c8
 8004478:	0800e1a0 	.word	0x0800e1a0
 800447c:	0800e1a8 	.word	0x0800e1a8
 8004480:	0800e1b0 	.word	0x0800e1b0
 8004484:	0800e1c0 	.word	0x0800e1c0
 8004488:	20000001 	.word	0x20000001

0800448c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004492:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <HAL_MspInit+0x5c>)
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <HAL_MspInit+0x5c>)
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	6193      	str	r3, [r2, #24]
 800449e:	4b12      	ldr	r3, [pc, #72]	; (80044e8 <HAL_MspInit+0x5c>)
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044aa:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <HAL_MspInit+0x5c>)
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	4a0e      	ldr	r2, [pc, #56]	; (80044e8 <HAL_MspInit+0x5c>)
 80044b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b4:	61d3      	str	r3, [r2, #28]
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <HAL_MspInit+0x5c>)
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044be:	607b      	str	r3, [r7, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_MspInit+0x60>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	4a04      	ldr	r2, [pc, #16]	; (80044ec <HAL_MspInit+0x60>)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044de:	bf00      	nop
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40010000 	.word	0x40010000

080044f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f8:	f107 0310 	add.w	r3, r7, #16
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <HAL_SPI_MspInit+0x88>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d12f      	bne.n	8004570 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004510:	4b1a      	ldr	r3, [pc, #104]	; (800457c <HAL_SPI_MspInit+0x8c>)
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	4a19      	ldr	r2, [pc, #100]	; (800457c <HAL_SPI_MspInit+0x8c>)
 8004516:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800451a:	6193      	str	r3, [r2, #24]
 800451c:	4b17      	ldr	r3, [pc, #92]	; (800457c <HAL_SPI_MspInit+0x8c>)
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004528:	4b14      	ldr	r3, [pc, #80]	; (800457c <HAL_SPI_MspInit+0x8c>)
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	4a13      	ldr	r2, [pc, #76]	; (800457c <HAL_SPI_MspInit+0x8c>)
 800452e:	f043 0304 	orr.w	r3, r3, #4
 8004532:	6193      	str	r3, [r2, #24]
 8004534:	4b11      	ldr	r3, [pc, #68]	; (800457c <HAL_SPI_MspInit+0x8c>)
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004540:	23a0      	movs	r3, #160	; 0xa0
 8004542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004544:	2302      	movs	r3, #2
 8004546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004548:	2303      	movs	r3, #3
 800454a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800454c:	f107 0310 	add.w	r3, r7, #16
 8004550:	4619      	mov	r1, r3
 8004552:	480b      	ldr	r0, [pc, #44]	; (8004580 <HAL_SPI_MspInit+0x90>)
 8004554:	f000 fde8 	bl	8005128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004558:	2340      	movs	r3, #64	; 0x40
 800455a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004564:	f107 0310 	add.w	r3, r7, #16
 8004568:	4619      	mov	r1, r3
 800456a:	4805      	ldr	r0, [pc, #20]	; (8004580 <HAL_SPI_MspInit+0x90>)
 800456c:	f000 fddc 	bl	8005128 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004570:	bf00      	nop
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40013000 	.word	0x40013000
 800457c:	40021000 	.word	0x40021000
 8004580:	40010800 	.word	0x40010800

08004584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004594:	d113      	bne.n	80045be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004596:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <HAL_TIM_Base_MspInit+0x44>)
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	4a0b      	ldr	r2, [pc, #44]	; (80045c8 <HAL_TIM_Base_MspInit+0x44>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	61d3      	str	r3, [r2, #28]
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <HAL_TIM_Base_MspInit+0x44>)
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045ae:	2200      	movs	r2, #0
 80045b0:	2100      	movs	r1, #0
 80045b2:	201c      	movs	r0, #28
 80045b4:	f000 fb73 	bl	8004c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045b8:	201c      	movs	r0, #28
 80045ba:	f000 fb8c 	bl	8004cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40021000 	.word	0x40021000

080045cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045d0:	e7fe      	b.n	80045d0 <NMI_Handler+0x4>

080045d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045d2:	b480      	push	{r7}
 80045d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045d6:	e7fe      	b.n	80045d6 <HardFault_Handler+0x4>

080045d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045dc:	e7fe      	b.n	80045dc <MemManage_Handler+0x4>

080045de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045de:	b480      	push	{r7}
 80045e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045e2:	e7fe      	b.n	80045e2 <BusFault_Handler+0x4>

080045e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045e8:	e7fe      	b.n	80045e8 <UsageFault_Handler+0x4>

080045ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045ea:	b480      	push	{r7}
 80045ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045ee:	bf00      	nop
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045f6:	b480      	push	{r7}
 80045f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045fa:	bf00      	nop
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004602:	b480      	push	{r7}
 8004604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004612:	f000 fa09 	bl	8004a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004616:	bf00      	nop
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004620:	4802      	ldr	r0, [pc, #8]	; (800462c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004622:	f001 f896 	bl	8005752 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	200009b8 	.word	0x200009b8

08004630 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_Pin);
 8004634:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004638:	f000 ff42 	bl	80054c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800463c:	bf00      	nop
 800463e:	bd80      	pop	{r7, pc}

08004640 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004644:	4802      	ldr	r0, [pc, #8]	; (8004650 <TIM2_IRQHandler+0x10>)
 8004646:	f003 fc23 	bl	8007e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800464a:	bf00      	nop
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	2000026c 	.word	0x2000026c

08004654 <checkcountUID>:
#include "subcardid.h"

extern uint32_t delayloa ;

uint8_t checkcountUID(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
	uint32_t pt = StartAddressUID;
 800465a:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <checkcountUID+0x60>)
 800465c:	607b      	str	r3, [r7, #4]
	uint8_t count = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	70fb      	strb	r3, [r7, #3]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8004662:	e01a      	b.n	800469a <checkcountUID+0x46>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3306      	adds	r3, #6
 8004668:	4618      	mov	r0, r3
 800466a:	f7fb fdd2 	bl	8000212 <Flash_Read_2Byte>
 800466e:	4603      	mov	r3, r0
 8004670:	461a      	mov	r2, r3
 8004672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004676:	429a      	cmp	r2, r3
 8004678:	d10c      	bne.n	8004694 <checkcountUID+0x40>
			if ((Flash_Read_Byte(pt + 5) >> 4) == 1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3305      	adds	r3, #5
 800467e:	4618      	mov	r0, r3
 8004680:	f7fb fdbb 	bl	80001fa <Flash_Read_Byte>
 8004684:	4603      	mov	r3, r0
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b01      	cmp	r3, #1
 800468c:	d102      	bne.n	8004694 <checkcountUID+0x40>
			{
				count++;
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	3301      	adds	r3, #1
 8004692:	70fb      	strb	r3, [r7, #3]
			}
		}
		pt = pt + 8;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3308      	adds	r3, #8
 8004698:	607b      	str	r3, [r7, #4]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3305      	adds	r3, #5
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fb fdab 	bl	80001fa <Flash_Read_Byte>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2bff      	cmp	r3, #255	; 0xff
 80046a8:	d1dc      	bne.n	8004664 <checkcountUID+0x10>
	}
	return count;
 80046aa:	78fb      	ldrb	r3, [r7, #3]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	0800f000 	.word	0x0800f000

080046b8 <CheckUID>:
uint8_t CheckUID(uint8_t *data, uint32_t address)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
	uint8_t arr[8];
	Flash_Read_Array(address, arr, 8);
 80046c2:	f107 030c 	add.w	r3, r7, #12
 80046c6:	2208      	movs	r2, #8
 80046c8:	4619      	mov	r1, r3
 80046ca:	6838      	ldr	r0, [r7, #0]
 80046cc:	f7fb fdba 	bl	8000244 <Flash_Read_Array>
	if (arr[6] != 0xFF)
 80046d0:	7cbb      	ldrb	r3, [r7, #18]
 80046d2:	2bff      	cmp	r3, #255	; 0xff
 80046d4:	d001      	beq.n	80046da <CheckUID+0x22>
		return 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e016      	b.n	8004708 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 80046da:	2300      	movs	r3, #0
 80046dc:	75fb      	strb	r3, [r7, #23]
 80046de:	e00f      	b.n	8004700 <CheckUID+0x48>
	{
		if (data[i] != arr[i])
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	4413      	add	r3, r2
 80046e6:	781a      	ldrb	r2, [r3, #0]
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
 80046ea:	3318      	adds	r3, #24
 80046ec:	443b      	add	r3, r7
 80046ee:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d001      	beq.n	80046fa <CheckUID+0x42>
			return 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e006      	b.n	8004708 <CheckUID+0x50>
	for (uint8_t i = 0; i < 5; i++)
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
 80046fc:	3301      	adds	r3, #1
 80046fe:	75fb      	strb	r3, [r7, #23]
 8004700:	7dfb      	ldrb	r3, [r7, #23]
 8004702:	2b04      	cmp	r3, #4
 8004704:	d9ec      	bls.n	80046e0 <CheckUID+0x28>
	}
	return 1;
 8004706:	2301      	movs	r3, #1
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <CheckListUID>:
uint8_t CheckListUID(uint8_t *data)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	uint32_t pt = StartAddressUID;
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <CheckListUID+0x5c>)
 800471a:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 800471c:	e018      	b.n	8004750 <CheckListUID+0x40>
	{
		if(Flash_Read_2Byte(pt + 6) == 0xFFFF){
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3306      	adds	r3, #6
 8004722:	4618      	mov	r0, r3
 8004724:	f7fb fd75 	bl	8000212 <Flash_Read_2Byte>
 8004728:	4603      	mov	r3, r0
 800472a:	461a      	mov	r2, r3
 800472c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004730:	429a      	cmp	r2, r3
 8004732:	d10a      	bne.n	800474a <CheckListUID+0x3a>
			if (CheckUID(data, pt) == 1)
 8004734:	68f9      	ldr	r1, [r7, #12]
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff ffbe 	bl	80046b8 <CheckUID>
 800473c:	4603      	mov	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d103      	bne.n	800474a <CheckListUID+0x3a>
				return *(uint8_t *)(pt + 5);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3305      	adds	r3, #5
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	e00b      	b.n	8004762 <CheckListUID+0x52>
		}
		pt = pt + 8;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3308      	adds	r3, #8
 800474e:	60fb      	str	r3, [r7, #12]
	while (Flash_Read_Byte(pt + 5) != 0xFF)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3305      	adds	r3, #5
 8004754:	4618      	mov	r0, r3
 8004756:	f7fb fd50 	bl	80001fa <Flash_Read_Byte>
 800475a:	4603      	mov	r3, r0
 800475c:	2bff      	cmp	r3, #255	; 0xff
 800475e:	d1de      	bne.n	800471e <CheckListUID+0xe>
	}
	return 0;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	0800f000 	.word	0x0800f000

08004770 <swipesuccess>:
void swipesuccess(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8004774:	2201      	movs	r2, #1
 8004776:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800477a:	480e      	ldr	r0, [pc, #56]	; (80047b4 <swipesuccess+0x44>)
 800477c:	f000 fe6f 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 1);
 8004780:	2201      	movs	r2, #1
 8004782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004786:	480b      	ldr	r0, [pc, #44]	; (80047b4 <swipesuccess+0x44>)
 8004788:	f000 fe69 	bl	800545e <HAL_GPIO_WritePin>
	HAL_Delay(delayloa);
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <swipesuccess+0x48>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 f965 	bl	8004a60 <HAL_Delay>
	HAL_GPIO_WritePin(LOA_GPIO_Port, LOA_Pin, 0);
 8004796:	2200      	movs	r2, #0
 8004798:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800479c:	4805      	ldr	r0, [pc, #20]	; (80047b4 <swipesuccess+0x44>)
 800479e:	f000 fe5e 	bl	800545e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80047a2:	2200      	movs	r2, #0
 80047a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047a8:	4802      	ldr	r0, [pc, #8]	; (80047b4 <swipesuccess+0x44>)
 80047aa:	f000 fe58 	bl	800545e <HAL_GPIO_WritePin>
}
 80047ae:	bf00      	nop
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40010c00 	.word	0x40010c00
 80047b8:	20000008 	.word	0x20000008

080047bc <Set_Pin_Input>:
 */
#include "main.h"
#include "subgpio.h"

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c8:	f107 0308 	add.w	r3, r7, #8
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	605a      	str	r2, [r3, #4]
 80047d2:	609a      	str	r2, [r3, #8]
 80047d4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80047d6:	887b      	ldrh	r3, [r7, #2]
 80047d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80047e2:	f107 0308 	add.w	r3, r7, #8
 80047e6:	4619      	mov	r1, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fc9d 	bl	8005128 <HAL_GPIO_Init>
}
 80047ee:	bf00      	nop
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <Set_Pin_IT>:

void Set_Pin_IT (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004804:	f107 0308 	add.w	r3, r7, #8
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	609a      	str	r2, [r3, #8]
 8004810:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8004812:	887b      	ldrh	r3, [r7, #2]
 8004814:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004816:	4b08      	ldr	r3, [pc, #32]	; (8004838 <Set_Pin_IT+0x40>)
 8004818:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800481a:	2301      	movs	r3, #1
 800481c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800481e:	f107 0308 	add.w	r3, r7, #8
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fc7f 	bl	8005128 <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800482a:	2017      	movs	r0, #23
 800482c:	f000 fa53 	bl	8004cd6 <HAL_NVIC_EnableIRQ>
}
 8004830:	bf00      	nop
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	10210000 	.word	0x10210000

0800483c <checkbuton>:

uint8_t checkbuton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	807b      	strh	r3, [r7, #2]
	if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1)
 8004848:	887b      	ldrh	r3, [r7, #2]
 800484a:	4619      	mov	r1, r3
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fdef 	bl	8005430 <HAL_GPIO_ReadPin>
 8004852:	4603      	mov	r3, r0
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <checkbuton+0x20>
		return 0;
 8004858:	2300      	movs	r3, #0
 800485a:	e039      	b.n	80048d0 <checkbuton+0x94>
	else
	{
		HAL_Delay(50);
 800485c:	2032      	movs	r0, #50	; 0x32
 800485e:	f000 f8ff 	bl	8004a60 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1)	return 0;
 8004862:	887b      	ldrh	r3, [r7, #2]
 8004864:	4619      	mov	r1, r3
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fde2 	bl	8005430 <HAL_GPIO_ReadPin>
 800486c:	4603      	mov	r3, r0
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <checkbuton+0x3a>
 8004872:	2300      	movs	r3, #0
 8004874:	e02c      	b.n	80048d0 <checkbuton+0x94>
		uint8_t i = 50;
 8004876:	2332      	movs	r3, #50	; 0x32
 8004878:	73fb      	strb	r3, [r7, #15]
		while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 800487a:	e020      	b.n	80048be <checkbuton+0x82>
		{
			HAL_Delay(10);
 800487c:	200a      	movs	r0, #10
 800487e:	f000 f8ef 	bl	8004a60 <HAL_Delay>
			i--;
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	3b01      	subs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
			if (i == 0)
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d117      	bne.n	80048be <checkbuton+0x82>
			{
				i = 250;
 800488e:	23fa      	movs	r3, #250	; 0xfa
 8004890:	73fb      	strb	r3, [r7, #15]
				while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8004892:	e00a      	b.n	80048aa <checkbuton+0x6e>
				{
					HAL_Delay(10);
 8004894:	200a      	movs	r0, #10
 8004896:	f000 f8e3 	bl	8004a60 <HAL_Delay>
					i--;
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	3b01      	subs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
					if(i == 0)	return 3;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <checkbuton+0x6e>
 80048a6:	2303      	movs	r3, #3
 80048a8:	e012      	b.n	80048d0 <checkbuton+0x94>
				while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fdbe 	bl	8005430 <HAL_GPIO_ReadPin>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0ec      	beq.n	8004894 <checkbuton+0x58>
				}
				return 2;
 80048ba:	2302      	movs	r3, #2
 80048bc:	e008      	b.n	80048d0 <checkbuton+0x94>
		while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 80048be:	887b      	ldrh	r3, [r7, #2]
 80048c0:	4619      	mov	r1, r3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fdb4 	bl	8005430 <HAL_GPIO_ReadPin>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0d6      	beq.n	800487c <checkbuton+0x40>
			}
		}
		return 1;
 80048ce:	2301      	movs	r3, #1
	}
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048e0:	4a14      	ldr	r2, [pc, #80]	; (8004934 <_sbrk+0x5c>)
 80048e2:	4b15      	ldr	r3, [pc, #84]	; (8004938 <_sbrk+0x60>)
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048ec:	4b13      	ldr	r3, [pc, #76]	; (800493c <_sbrk+0x64>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048f4:	4b11      	ldr	r3, [pc, #68]	; (800493c <_sbrk+0x64>)
 80048f6:	4a12      	ldr	r2, [pc, #72]	; (8004940 <_sbrk+0x68>)
 80048f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048fa:	4b10      	ldr	r3, [pc, #64]	; (800493c <_sbrk+0x64>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4413      	add	r3, r2
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	429a      	cmp	r2, r3
 8004906:	d207      	bcs.n	8004918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004908:	f008 fc00 	bl	800d10c <__errno>
 800490c:	4603      	mov	r3, r0
 800490e:	220c      	movs	r2, #12
 8004910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004912:	f04f 33ff 	mov.w	r3, #4294967295
 8004916:	e009      	b.n	800492c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004918:	4b08      	ldr	r3, [pc, #32]	; (800493c <_sbrk+0x64>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800491e:	4b07      	ldr	r3, [pc, #28]	; (800493c <_sbrk+0x64>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	4a05      	ldr	r2, [pc, #20]	; (800493c <_sbrk+0x64>)
 8004928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800492a:	68fb      	ldr	r3, [r7, #12]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20005000 	.word	0x20005000
 8004938:	00000400 	.word	0x00000400
 800493c:	200003c4 	.word	0x200003c4
 8004940:	20000ed8 	.word	0x20000ed8

08004944 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr

08004950 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004950:	480c      	ldr	r0, [pc, #48]	; (8004984 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004952:	490d      	ldr	r1, [pc, #52]	; (8004988 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004954:	4a0d      	ldr	r2, [pc, #52]	; (800498c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004958:	e002      	b.n	8004960 <LoopCopyDataInit>

0800495a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800495a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800495c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800495e:	3304      	adds	r3, #4

08004960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004964:	d3f9      	bcc.n	800495a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004966:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004968:	4c0a      	ldr	r4, [pc, #40]	; (8004994 <LoopFillZerobss+0x22>)
  movs r3, #0
 800496a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800496c:	e001      	b.n	8004972 <LoopFillZerobss>

0800496e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800496e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004970:	3204      	adds	r2, #4

08004972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004974:	d3fb      	bcc.n	800496e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004976:	f7ff ffe5 	bl	8004944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800497a:	f008 fbcd 	bl	800d118 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800497e:	f7fe fd8d 	bl	800349c <main>
  bx lr
 8004982:	4770      	bx	lr
  ldr r0, =_sdata
 8004984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004988:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800498c:	0800e270 	.word	0x0800e270
  ldr r2, =_sbss
 8004990:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004994:	20000ed4 	.word	0x20000ed4

08004998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004998:	e7fe      	b.n	8004998 <ADC1_2_IRQHandler>
	...

0800499c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049a0:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <HAL_Init+0x28>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a07      	ldr	r2, [pc, #28]	; (80049c4 <HAL_Init+0x28>)
 80049a6:	f043 0310 	orr.w	r3, r3, #16
 80049aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049ac:	2003      	movs	r0, #3
 80049ae:	f000 f96b 	bl	8004c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049b2:	200f      	movs	r0, #15
 80049b4:	f000 f808 	bl	80049c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049b8:	f7ff fd68 	bl	800448c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40022000 	.word	0x40022000

080049c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049d0:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <HAL_InitTick+0x54>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <HAL_InitTick+0x58>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	4619      	mov	r1, r3
 80049da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049de:	fbb3 f3f1 	udiv	r3, r3, r1
 80049e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f991 	bl	8004d0e <HAL_SYSTICK_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e00e      	b.n	8004a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b0f      	cmp	r3, #15
 80049fa:	d80a      	bhi.n	8004a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049fc:	2200      	movs	r2, #0
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	f04f 30ff 	mov.w	r0, #4294967295
 8004a04:	f000 f94b 	bl	8004c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a08:	4a06      	ldr	r2, [pc, #24]	; (8004a24 <HAL_InitTick+0x5c>)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e000      	b.n	8004a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	2000000c 	.word	0x2000000c
 8004a20:	20000014 	.word	0x20000014
 8004a24:	20000010 	.word	0x20000010

08004a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <HAL_IncTick+0x1c>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_IncTick+0x20>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4413      	add	r3, r2
 8004a38:	4a03      	ldr	r2, [pc, #12]	; (8004a48 <HAL_IncTick+0x20>)
 8004a3a:	6013      	str	r3, [r2, #0]
}
 8004a3c:	bf00      	nop
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	20000014 	.word	0x20000014
 8004a48:	200003c8 	.word	0x200003c8

08004a4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8004a50:	4b02      	ldr	r3, [pc, #8]	; (8004a5c <HAL_GetTick+0x10>)
 8004a52:	681b      	ldr	r3, [r3, #0]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	200003c8 	.word	0x200003c8

08004a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a68:	f7ff fff0 	bl	8004a4c <HAL_GetTick>
 8004a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a78:	d005      	beq.n	8004a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <HAL_Delay+0x44>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a86:	bf00      	nop
 8004a88:	f7ff ffe0 	bl	8004a4c <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d8f7      	bhi.n	8004a88 <HAL_Delay+0x28>
  {
  }
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000014 	.word	0x20000014

08004aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <__NVIC_SetPriorityGrouping+0x44>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ada:	4a04      	ldr	r2, [pc, #16]	; (8004aec <__NVIC_SetPriorityGrouping+0x44>)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	60d3      	str	r3, [r2, #12]
}
 8004ae0:	bf00      	nop
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	e000ed00 	.word	0xe000ed00

08004af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <__NVIC_GetPriorityGrouping+0x18>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	0a1b      	lsrs	r3, r3, #8
 8004afa:	f003 0307 	and.w	r3, r3, #7
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	e000ed00 	.word	0xe000ed00

08004b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	db0b      	blt.n	8004b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	f003 021f 	and.w	r2, r3, #31
 8004b24:	4906      	ldr	r1, [pc, #24]	; (8004b40 <__NVIC_EnableIRQ+0x34>)
 8004b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	e000e100 	.word	0xe000e100

08004b44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	db12      	blt.n	8004b7c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	f003 021f 	and.w	r2, r3, #31
 8004b5c:	490a      	ldr	r1, [pc, #40]	; (8004b88 <__NVIC_DisableIRQ+0x44>)
 8004b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	2001      	movs	r0, #1
 8004b66:	fa00 f202 	lsl.w	r2, r0, r2
 8004b6a:	3320      	adds	r3, #32
 8004b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b70:	f3bf 8f4f 	dsb	sy
}
 8004b74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b76:	f3bf 8f6f 	isb	sy
}
 8004b7a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	e000e100 	.word	0xe000e100

08004b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	6039      	str	r1, [r7, #0]
 8004b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	db0a      	blt.n	8004bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	490c      	ldr	r1, [pc, #48]	; (8004bd8 <__NVIC_SetPriority+0x4c>)
 8004ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004baa:	0112      	lsls	r2, r2, #4
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	440b      	add	r3, r1
 8004bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bb4:	e00a      	b.n	8004bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4908      	ldr	r1, [pc, #32]	; (8004bdc <__NVIC_SetPriority+0x50>)
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	3b04      	subs	r3, #4
 8004bc4:	0112      	lsls	r2, r2, #4
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	440b      	add	r3, r1
 8004bca:	761a      	strb	r2, [r3, #24]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	e000e100 	.word	0xe000e100
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	; 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f1c3 0307 	rsb	r3, r3, #7
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	bf28      	it	cs
 8004bfe:	2304      	movcs	r3, #4
 8004c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	3304      	adds	r3, #4
 8004c06:	2b06      	cmp	r3, #6
 8004c08:	d902      	bls.n	8004c10 <NVIC_EncodePriority+0x30>
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	3b03      	subs	r3, #3
 8004c0e:	e000      	b.n	8004c12 <NVIC_EncodePriority+0x32>
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c14:	f04f 32ff 	mov.w	r2, #4294967295
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43da      	mvns	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	401a      	ands	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c28:	f04f 31ff 	mov.w	r1, #4294967295
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	43d9      	mvns	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c38:	4313      	orrs	r3, r2
         );
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3724      	adds	r7, #36	; 0x24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c54:	d301      	bcc.n	8004c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c56:	2301      	movs	r3, #1
 8004c58:	e00f      	b.n	8004c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c5a:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <SysTick_Config+0x40>)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c62:	210f      	movs	r1, #15
 8004c64:	f04f 30ff 	mov.w	r0, #4294967295
 8004c68:	f7ff ff90 	bl	8004b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <SysTick_Config+0x40>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c72:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <SysTick_Config+0x40>)
 8004c74:	2207      	movs	r2, #7
 8004c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	e000e010 	.word	0xe000e010

08004c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff ff09 	bl	8004aa8 <__NVIC_SetPriorityGrouping>
}
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b086      	sub	sp, #24
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cb0:	f7ff ff1e 	bl	8004af0 <__NVIC_GetPriorityGrouping>
 8004cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	6978      	ldr	r0, [r7, #20]
 8004cbc:	f7ff ff90 	bl	8004be0 <NVIC_EncodePriority>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff ff5f 	bl	8004b8c <__NVIC_SetPriority>
}
 8004cce:	bf00      	nop
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b082      	sub	sp, #8
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	4603      	mov	r3, r0
 8004cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff ff11 	bl	8004b0c <__NVIC_EnableIRQ>
}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff ff1f 	bl	8004b44 <__NVIC_DisableIRQ>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff ff94 	bl	8004c44 <SysTick_Config>
 8004d1c:	4603      	mov	r3, r0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d42:	4b2f      	ldr	r3, [pc, #188]	; (8004e00 <HAL_FLASH_Program+0xd8>)
 8004d44:	7e1b      	ldrb	r3, [r3, #24]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_FLASH_Program+0x26>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e054      	b.n	8004df8 <HAL_FLASH_Program+0xd0>
 8004d4e:	4b2c      	ldr	r3, [pc, #176]	; (8004e00 <HAL_FLASH_Program+0xd8>)
 8004d50:	2201      	movs	r2, #1
 8004d52:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d58:	f000 f8a8 	bl	8004eac <FLASH_WaitForLastOperation>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004d60:	7dfb      	ldrb	r3, [r7, #23]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d144      	bne.n	8004df0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d102      	bne.n	8004d72 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	757b      	strb	r3, [r7, #21]
 8004d70:	e007      	b.n	8004d82 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d102      	bne.n	8004d7e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004d78:	2302      	movs	r3, #2
 8004d7a:	757b      	strb	r3, [r7, #21]
 8004d7c:	e001      	b.n	8004d82 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004d7e:	2304      	movs	r3, #4
 8004d80:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004d82:	2300      	movs	r3, #0
 8004d84:	75bb      	strb	r3, [r7, #22]
 8004d86:	e02d      	b.n	8004de4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004d88:	7dbb      	ldrb	r3, [r7, #22]
 8004d8a:	005a      	lsls	r2, r3, #1
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	eb02 0c03 	add.w	ip, r2, r3
 8004d92:	7dbb      	ldrb	r3, [r7, #22]
 8004d94:	0119      	lsls	r1, r3, #4
 8004d96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d9a:	f1c1 0620 	rsb	r6, r1, #32
 8004d9e:	f1a1 0020 	sub.w	r0, r1, #32
 8004da2:	fa22 f401 	lsr.w	r4, r2, r1
 8004da6:	fa03 f606 	lsl.w	r6, r3, r6
 8004daa:	4334      	orrs	r4, r6
 8004dac:	fa23 f000 	lsr.w	r0, r3, r0
 8004db0:	4304      	orrs	r4, r0
 8004db2:	fa23 f501 	lsr.w	r5, r3, r1
 8004db6:	b2a3      	uxth	r3, r4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4660      	mov	r0, ip
 8004dbc:	f000 f85a 	bl	8004e74 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004dc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004dc4:	f000 f872 	bl	8004eac <FLASH_WaitForLastOperation>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004dcc:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <HAL_FLASH_Program+0xdc>)
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	4a0c      	ldr	r2, [pc, #48]	; (8004e04 <HAL_FLASH_Program+0xdc>)
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d107      	bne.n	8004dee <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004dde:	7dbb      	ldrb	r3, [r7, #22]
 8004de0:	3301      	adds	r3, #1
 8004de2:	75bb      	strb	r3, [r7, #22]
 8004de4:	7dba      	ldrb	r2, [r7, #22]
 8004de6:	7d7b      	ldrb	r3, [r7, #21]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d3cd      	bcc.n	8004d88 <HAL_FLASH_Program+0x60>
 8004dec:	e000      	b.n	8004df0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004dee:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <HAL_FLASH_Program+0xd8>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	761a      	strb	r2, [r3, #24]

  return status;
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e00:	200003d0 	.word	0x200003d0
 8004e04:	40022000 	.word	0x40022000

08004e08 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004e12:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <HAL_FLASH_Unlock+0x40>)
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <HAL_FLASH_Unlock+0x40>)
 8004e20:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <HAL_FLASH_Unlock+0x44>)
 8004e22:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004e24:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <HAL_FLASH_Unlock+0x40>)
 8004e26:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <HAL_FLASH_Unlock+0x48>)
 8004e28:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004e2a:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <HAL_FLASH_Unlock+0x40>)
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40022000 	.word	0x40022000
 8004e4c:	45670123 	.word	0x45670123
 8004e50:	cdef89ab 	.word	0xcdef89ab

08004e54 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <HAL_FLASH_Lock+0x1c>)
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	4a04      	ldr	r2, [pc, #16]	; (8004e70 <HAL_FLASH_Lock+0x1c>)
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e62:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40022000 	.word	0x40022000

08004e74 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e80:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <FLASH_Program_HalfWord+0x30>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004e86:	4b08      	ldr	r3, [pc, #32]	; (8004ea8 <FLASH_Program_HalfWord+0x34>)
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	4a07      	ldr	r2, [pc, #28]	; (8004ea8 <FLASH_Program_HalfWord+0x34>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	887a      	ldrh	r2, [r7, #2]
 8004e96:	801a      	strh	r2, [r3, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	200003d0 	.word	0x200003d0
 8004ea8:	40022000 	.word	0x40022000

08004eac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004eb4:	f7ff fdca 	bl	8004a4c <HAL_GetTick>
 8004eb8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004eba:	e010      	b.n	8004ede <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d00c      	beq.n	8004ede <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d007      	beq.n	8004eda <FLASH_WaitForLastOperation+0x2e>
 8004eca:	f7ff fdbf 	bl	8004a4c <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d201      	bcs.n	8004ede <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e025      	b.n	8004f2a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004ede:	4b15      	ldr	r3, [pc, #84]	; (8004f34 <FLASH_WaitForLastOperation+0x88>)
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e8      	bne.n	8004ebc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004eea:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <FLASH_WaitForLastOperation+0x88>)
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <FLASH_WaitForLastOperation+0x88>)
 8004ef8:	2220      	movs	r2, #32
 8004efa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004efc:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <FLASH_WaitForLastOperation+0x88>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004f08:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <FLASH_WaitForLastOperation+0x88>)
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d105      	bne.n	8004f20 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004f14:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <FLASH_WaitForLastOperation+0x88>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004f20:	f000 f80a 	bl	8004f38 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40022000 	.word	0x40022000

08004f38 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004f42:	4b23      	ldr	r3, [pc, #140]	; (8004fd0 <FLASH_SetErrorCode+0x98>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004f4e:	4b21      	ldr	r3, [pc, #132]	; (8004fd4 <FLASH_SetErrorCode+0x9c>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f043 0302 	orr.w	r3, r3, #2
 8004f56:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <FLASH_SetErrorCode+0x9c>)
 8004f58:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f043 0310 	orr.w	r3, r3, #16
 8004f60:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004f62:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <FLASH_SetErrorCode+0x98>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d009      	beq.n	8004f82 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004f6e:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <FLASH_SetErrorCode+0x9c>)
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	4a17      	ldr	r2, [pc, #92]	; (8004fd4 <FLASH_SetErrorCode+0x9c>)
 8004f78:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f043 0304 	orr.w	r3, r3, #4
 8004f80:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004f82:	4b13      	ldr	r3, [pc, #76]	; (8004fd0 <FLASH_SetErrorCode+0x98>)
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00b      	beq.n	8004fa6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004f8e:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <FLASH_SetErrorCode+0x9c>)
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	f043 0304 	orr.w	r3, r3, #4
 8004f96:	4a0f      	ldr	r2, [pc, #60]	; (8004fd4 <FLASH_SetErrorCode+0x9c>)
 8004f98:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <FLASH_SetErrorCode+0x98>)
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	4a0c      	ldr	r2, [pc, #48]	; (8004fd0 <FLASH_SetErrorCode+0x98>)
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f240 1201 	movw	r2, #257	; 0x101
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d106      	bne.n	8004fbe <FLASH_SetErrorCode+0x86>
 8004fb0:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <FLASH_SetErrorCode+0x98>)
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	4a06      	ldr	r2, [pc, #24]	; (8004fd0 <FLASH_SetErrorCode+0x98>)
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	61d3      	str	r3, [r2, #28]
}  
 8004fbc:	e002      	b.n	8004fc4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004fbe:	4a04      	ldr	r2, [pc, #16]	; (8004fd0 <FLASH_SetErrorCode+0x98>)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60d3      	str	r3, [r2, #12]
}  
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40022000 	.word	0x40022000
 8004fd4:	200003d0 	.word	0x200003d0

08004fd8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004fea:	4b2f      	ldr	r3, [pc, #188]	; (80050a8 <HAL_FLASHEx_Erase+0xd0>)
 8004fec:	7e1b      	ldrb	r3, [r3, #24]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_FLASHEx_Erase+0x1e>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e053      	b.n	800509e <HAL_FLASHEx_Erase+0xc6>
 8004ff6:	4b2c      	ldr	r3, [pc, #176]	; (80050a8 <HAL_FLASHEx_Erase+0xd0>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b02      	cmp	r3, #2
 8005002:	d116      	bne.n	8005032 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005004:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005008:	f7ff ff50 	bl	8004eac <FLASH_WaitForLastOperation>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d141      	bne.n	8005096 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005012:	2001      	movs	r0, #1
 8005014:	f000 f84c 	bl	80050b0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005018:	f24c 3050 	movw	r0, #50000	; 0xc350
 800501c:	f7ff ff46 	bl	8004eac <FLASH_WaitForLastOperation>
 8005020:	4603      	mov	r3, r0
 8005022:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005024:	4b21      	ldr	r3, [pc, #132]	; (80050ac <HAL_FLASHEx_Erase+0xd4>)
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	4a20      	ldr	r2, [pc, #128]	; (80050ac <HAL_FLASHEx_Erase+0xd4>)
 800502a:	f023 0304 	bic.w	r3, r3, #4
 800502e:	6113      	str	r3, [r2, #16]
 8005030:	e031      	b.n	8005096 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005032:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005036:	f7ff ff39 	bl	8004eac <FLASH_WaitForLastOperation>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d12a      	bne.n	8005096 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	f04f 32ff 	mov.w	r2, #4294967295
 8005046:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	e019      	b.n	8005084 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005050:	68b8      	ldr	r0, [r7, #8]
 8005052:	f000 f849 	bl	80050e8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005056:	f24c 3050 	movw	r0, #50000	; 0xc350
 800505a:	f7ff ff27 	bl	8004eac <FLASH_WaitForLastOperation>
 800505e:	4603      	mov	r3, r0
 8005060:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005062:	4b12      	ldr	r3, [pc, #72]	; (80050ac <HAL_FLASHEx_Erase+0xd4>)
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	4a11      	ldr	r2, [pc, #68]	; (80050ac <HAL_FLASHEx_Erase+0xd4>)
 8005068:	f023 0302 	bic.w	r3, r3, #2
 800506c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	601a      	str	r2, [r3, #0]
            break;
 800507a:	e00c      	b.n	8005096 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005082:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	029a      	lsls	r2, r3, #10
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	429a      	cmp	r2, r3
 8005094:	d3dc      	bcc.n	8005050 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005096:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <HAL_FLASHEx_Erase+0xd0>)
 8005098:	2200      	movs	r2, #0
 800509a:	761a      	strb	r2, [r3, #24]

  return status;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	200003d0 	.word	0x200003d0
 80050ac:	40022000 	.word	0x40022000

080050b0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80050b8:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <FLASH_MassErase+0x30>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80050be:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <FLASH_MassErase+0x34>)
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <FLASH_MassErase+0x34>)
 80050c4:	f043 0304 	orr.w	r3, r3, #4
 80050c8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <FLASH_MassErase+0x34>)
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	4a05      	ldr	r2, [pc, #20]	; (80050e4 <FLASH_MassErase+0x34>)
 80050d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050d4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	200003d0 	.word	0x200003d0
 80050e4:	40022000 	.word	0x40022000

080050e8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <FLASH_PageErase+0x38>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80050f6:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <FLASH_PageErase+0x3c>)
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <FLASH_PageErase+0x3c>)
 80050fc:	f043 0302 	orr.w	r3, r3, #2
 8005100:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005102:	4a08      	ldr	r2, [pc, #32]	; (8005124 <FLASH_PageErase+0x3c>)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <FLASH_PageErase+0x3c>)
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	4a05      	ldr	r2, [pc, #20]	; (8005124 <FLASH_PageErase+0x3c>)
 800510e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005112:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	200003d0 	.word	0x200003d0
 8005124:	40022000 	.word	0x40022000

08005128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005128:	b480      	push	{r7}
 800512a:	b08b      	sub	sp, #44	; 0x2c
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005132:	2300      	movs	r3, #0
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005136:	2300      	movs	r3, #0
 8005138:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800513a:	e169      	b.n	8005410 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800513c:	2201      	movs	r2, #1
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	4013      	ands	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	429a      	cmp	r2, r3
 8005156:	f040 8158 	bne.w	800540a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4a9a      	ldr	r2, [pc, #616]	; (80053c8 <HAL_GPIO_Init+0x2a0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d05e      	beq.n	8005222 <HAL_GPIO_Init+0xfa>
 8005164:	4a98      	ldr	r2, [pc, #608]	; (80053c8 <HAL_GPIO_Init+0x2a0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d875      	bhi.n	8005256 <HAL_GPIO_Init+0x12e>
 800516a:	4a98      	ldr	r2, [pc, #608]	; (80053cc <HAL_GPIO_Init+0x2a4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d058      	beq.n	8005222 <HAL_GPIO_Init+0xfa>
 8005170:	4a96      	ldr	r2, [pc, #600]	; (80053cc <HAL_GPIO_Init+0x2a4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d86f      	bhi.n	8005256 <HAL_GPIO_Init+0x12e>
 8005176:	4a96      	ldr	r2, [pc, #600]	; (80053d0 <HAL_GPIO_Init+0x2a8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d052      	beq.n	8005222 <HAL_GPIO_Init+0xfa>
 800517c:	4a94      	ldr	r2, [pc, #592]	; (80053d0 <HAL_GPIO_Init+0x2a8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d869      	bhi.n	8005256 <HAL_GPIO_Init+0x12e>
 8005182:	4a94      	ldr	r2, [pc, #592]	; (80053d4 <HAL_GPIO_Init+0x2ac>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d04c      	beq.n	8005222 <HAL_GPIO_Init+0xfa>
 8005188:	4a92      	ldr	r2, [pc, #584]	; (80053d4 <HAL_GPIO_Init+0x2ac>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d863      	bhi.n	8005256 <HAL_GPIO_Init+0x12e>
 800518e:	4a92      	ldr	r2, [pc, #584]	; (80053d8 <HAL_GPIO_Init+0x2b0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d046      	beq.n	8005222 <HAL_GPIO_Init+0xfa>
 8005194:	4a90      	ldr	r2, [pc, #576]	; (80053d8 <HAL_GPIO_Init+0x2b0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d85d      	bhi.n	8005256 <HAL_GPIO_Init+0x12e>
 800519a:	2b12      	cmp	r3, #18
 800519c:	d82a      	bhi.n	80051f4 <HAL_GPIO_Init+0xcc>
 800519e:	2b12      	cmp	r3, #18
 80051a0:	d859      	bhi.n	8005256 <HAL_GPIO_Init+0x12e>
 80051a2:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <HAL_GPIO_Init+0x80>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	08005223 	.word	0x08005223
 80051ac:	080051fd 	.word	0x080051fd
 80051b0:	0800520f 	.word	0x0800520f
 80051b4:	08005251 	.word	0x08005251
 80051b8:	08005257 	.word	0x08005257
 80051bc:	08005257 	.word	0x08005257
 80051c0:	08005257 	.word	0x08005257
 80051c4:	08005257 	.word	0x08005257
 80051c8:	08005257 	.word	0x08005257
 80051cc:	08005257 	.word	0x08005257
 80051d0:	08005257 	.word	0x08005257
 80051d4:	08005257 	.word	0x08005257
 80051d8:	08005257 	.word	0x08005257
 80051dc:	08005257 	.word	0x08005257
 80051e0:	08005257 	.word	0x08005257
 80051e4:	08005257 	.word	0x08005257
 80051e8:	08005257 	.word	0x08005257
 80051ec:	08005205 	.word	0x08005205
 80051f0:	08005219 	.word	0x08005219
 80051f4:	4a79      	ldr	r2, [pc, #484]	; (80053dc <HAL_GPIO_Init+0x2b4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d013      	beq.n	8005222 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80051fa:	e02c      	b.n	8005256 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	623b      	str	r3, [r7, #32]
          break;
 8005202:	e029      	b.n	8005258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	3304      	adds	r3, #4
 800520a:	623b      	str	r3, [r7, #32]
          break;
 800520c:	e024      	b.n	8005258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	3308      	adds	r3, #8
 8005214:	623b      	str	r3, [r7, #32]
          break;
 8005216:	e01f      	b.n	8005258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	330c      	adds	r3, #12
 800521e:	623b      	str	r3, [r7, #32]
          break;
 8005220:	e01a      	b.n	8005258 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d102      	bne.n	8005230 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800522a:	2304      	movs	r3, #4
 800522c:	623b      	str	r3, [r7, #32]
          break;
 800522e:	e013      	b.n	8005258 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d105      	bne.n	8005244 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005238:	2308      	movs	r3, #8
 800523a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	611a      	str	r2, [r3, #16]
          break;
 8005242:	e009      	b.n	8005258 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005244:	2308      	movs	r3, #8
 8005246:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	615a      	str	r2, [r3, #20]
          break;
 800524e:	e003      	b.n	8005258 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005250:	2300      	movs	r3, #0
 8005252:	623b      	str	r3, [r7, #32]
          break;
 8005254:	e000      	b.n	8005258 <HAL_GPIO_Init+0x130>
          break;
 8005256:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2bff      	cmp	r3, #255	; 0xff
 800525c:	d801      	bhi.n	8005262 <HAL_GPIO_Init+0x13a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	e001      	b.n	8005266 <HAL_GPIO_Init+0x13e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2bff      	cmp	r3, #255	; 0xff
 800526c:	d802      	bhi.n	8005274 <HAL_GPIO_Init+0x14c>
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	e002      	b.n	800527a <HAL_GPIO_Init+0x152>
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	3b08      	subs	r3, #8
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	210f      	movs	r1, #15
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	fa01 f303 	lsl.w	r3, r1, r3
 8005288:	43db      	mvns	r3, r3
 800528a:	401a      	ands	r2, r3
 800528c:	6a39      	ldr	r1, [r7, #32]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	fa01 f303 	lsl.w	r3, r1, r3
 8005294:	431a      	orrs	r2, r3
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80b1 	beq.w	800540a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80052a8:	4b4d      	ldr	r3, [pc, #308]	; (80053e0 <HAL_GPIO_Init+0x2b8>)
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	4a4c      	ldr	r2, [pc, #304]	; (80053e0 <HAL_GPIO_Init+0x2b8>)
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	6193      	str	r3, [r2, #24]
 80052b4:	4b4a      	ldr	r3, [pc, #296]	; (80053e0 <HAL_GPIO_Init+0x2b8>)
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80052c0:	4a48      	ldr	r2, [pc, #288]	; (80053e4 <HAL_GPIO_Init+0x2bc>)
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	089b      	lsrs	r3, r3, #2
 80052c6:	3302      	adds	r3, #2
 80052c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	220f      	movs	r2, #15
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	43db      	mvns	r3, r3
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4013      	ands	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a40      	ldr	r2, [pc, #256]	; (80053e8 <HAL_GPIO_Init+0x2c0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d013      	beq.n	8005314 <HAL_GPIO_Init+0x1ec>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a3f      	ldr	r2, [pc, #252]	; (80053ec <HAL_GPIO_Init+0x2c4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00d      	beq.n	8005310 <HAL_GPIO_Init+0x1e8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a3e      	ldr	r2, [pc, #248]	; (80053f0 <HAL_GPIO_Init+0x2c8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d007      	beq.n	800530c <HAL_GPIO_Init+0x1e4>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a3d      	ldr	r2, [pc, #244]	; (80053f4 <HAL_GPIO_Init+0x2cc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d101      	bne.n	8005308 <HAL_GPIO_Init+0x1e0>
 8005304:	2303      	movs	r3, #3
 8005306:	e006      	b.n	8005316 <HAL_GPIO_Init+0x1ee>
 8005308:	2304      	movs	r3, #4
 800530a:	e004      	b.n	8005316 <HAL_GPIO_Init+0x1ee>
 800530c:	2302      	movs	r3, #2
 800530e:	e002      	b.n	8005316 <HAL_GPIO_Init+0x1ee>
 8005310:	2301      	movs	r3, #1
 8005312:	e000      	b.n	8005316 <HAL_GPIO_Init+0x1ee>
 8005314:	2300      	movs	r3, #0
 8005316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005318:	f002 0203 	and.w	r2, r2, #3
 800531c:	0092      	lsls	r2, r2, #2
 800531e:	4093      	lsls	r3, r2
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005326:	492f      	ldr	r1, [pc, #188]	; (80053e4 <HAL_GPIO_Init+0x2bc>)
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	089b      	lsrs	r3, r3, #2
 800532c:	3302      	adds	r3, #2
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d006      	beq.n	800534e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005340:	4b2d      	ldr	r3, [pc, #180]	; (80053f8 <HAL_GPIO_Init+0x2d0>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	492c      	ldr	r1, [pc, #176]	; (80053f8 <HAL_GPIO_Init+0x2d0>)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	4313      	orrs	r3, r2
 800534a:	600b      	str	r3, [r1, #0]
 800534c:	e006      	b.n	800535c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800534e:	4b2a      	ldr	r3, [pc, #168]	; (80053f8 <HAL_GPIO_Init+0x2d0>)
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	43db      	mvns	r3, r3
 8005356:	4928      	ldr	r1, [pc, #160]	; (80053f8 <HAL_GPIO_Init+0x2d0>)
 8005358:	4013      	ands	r3, r2
 800535a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d006      	beq.n	8005376 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005368:	4b23      	ldr	r3, [pc, #140]	; (80053f8 <HAL_GPIO_Init+0x2d0>)
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	4922      	ldr	r1, [pc, #136]	; (80053f8 <HAL_GPIO_Init+0x2d0>)
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	4313      	orrs	r3, r2
 8005372:	604b      	str	r3, [r1, #4]
 8005374:	e006      	b.n	8005384 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005376:	4b20      	ldr	r3, [pc, #128]	; (80053f8 <HAL_GPIO_Init+0x2d0>)
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	43db      	mvns	r3, r3
 800537e:	491e      	ldr	r1, [pc, #120]	; (80053f8 <HAL_GPIO_Init+0x2d0>)
 8005380:	4013      	ands	r3, r2
 8005382:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d006      	beq.n	800539e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005390:	4b19      	ldr	r3, [pc, #100]	; (80053f8 <HAL_GPIO_Init+0x2d0>)
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	4918      	ldr	r1, [pc, #96]	; (80053f8 <HAL_GPIO_Init+0x2d0>)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	4313      	orrs	r3, r2
 800539a:	608b      	str	r3, [r1, #8]
 800539c:	e006      	b.n	80053ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800539e:	4b16      	ldr	r3, [pc, #88]	; (80053f8 <HAL_GPIO_Init+0x2d0>)
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	43db      	mvns	r3, r3
 80053a6:	4914      	ldr	r1, [pc, #80]	; (80053f8 <HAL_GPIO_Init+0x2d0>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d021      	beq.n	80053fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80053b8:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <HAL_GPIO_Init+0x2d0>)
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	490e      	ldr	r1, [pc, #56]	; (80053f8 <HAL_GPIO_Init+0x2d0>)
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60cb      	str	r3, [r1, #12]
 80053c4:	e021      	b.n	800540a <HAL_GPIO_Init+0x2e2>
 80053c6:	bf00      	nop
 80053c8:	10320000 	.word	0x10320000
 80053cc:	10310000 	.word	0x10310000
 80053d0:	10220000 	.word	0x10220000
 80053d4:	10210000 	.word	0x10210000
 80053d8:	10120000 	.word	0x10120000
 80053dc:	10110000 	.word	0x10110000
 80053e0:	40021000 	.word	0x40021000
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40010800 	.word	0x40010800
 80053ec:	40010c00 	.word	0x40010c00
 80053f0:	40011000 	.word	0x40011000
 80053f4:	40011400 	.word	0x40011400
 80053f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80053fc:	4b0b      	ldr	r3, [pc, #44]	; (800542c <HAL_GPIO_Init+0x304>)
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	43db      	mvns	r3, r3
 8005404:	4909      	ldr	r1, [pc, #36]	; (800542c <HAL_GPIO_Init+0x304>)
 8005406:	4013      	ands	r3, r2
 8005408:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	3301      	adds	r3, #1
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	fa22 f303 	lsr.w	r3, r2, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	f47f ae8e 	bne.w	800513c <HAL_GPIO_Init+0x14>
  }
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	372c      	adds	r7, #44	; 0x2c
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr
 800542c:	40010400 	.word	0x40010400

08005430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	887b      	ldrh	r3, [r7, #2]
 8005442:	4013      	ands	r3, r2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005448:	2301      	movs	r3, #1
 800544a:	73fb      	strb	r3, [r7, #15]
 800544c:	e001      	b.n	8005452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800544e:	2300      	movs	r3, #0
 8005450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005452:	7bfb      	ldrb	r3, [r7, #15]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr

0800545e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	460b      	mov	r3, r1
 8005468:	807b      	strh	r3, [r7, #2]
 800546a:	4613      	mov	r3, r2
 800546c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800546e:	787b      	ldrb	r3, [r7, #1]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005474:	887a      	ldrh	r2, [r7, #2]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800547a:	e003      	b.n	8005484 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800547c:	887b      	ldrh	r3, [r7, #2]
 800547e:	041a      	lsls	r2, r3, #16
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	611a      	str	r2, [r3, #16]
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr

0800548e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	460b      	mov	r3, r1
 8005498:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054a0:	887a      	ldrh	r2, [r7, #2]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4013      	ands	r3, r2
 80054a6:	041a      	lsls	r2, r3, #16
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	43d9      	mvns	r1, r3
 80054ac:	887b      	ldrh	r3, [r7, #2]
 80054ae:	400b      	ands	r3, r1
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	611a      	str	r2, [r3, #16]
}
 80054b6:	bf00      	nop
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr

080054c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	4603      	mov	r3, r0
 80054c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80054ca:	4b08      	ldr	r3, [pc, #32]	; (80054ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054cc:	695a      	ldr	r2, [r3, #20]
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d006      	beq.n	80054e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054d6:	4a05      	ldr	r2, [pc, #20]	; (80054ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054d8:	88fb      	ldrh	r3, [r7, #6]
 80054da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fd ffa6 	bl	8003430 <HAL_GPIO_EXTI_Callback>
  }
}
 80054e4:	bf00      	nop
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40010400 	.word	0x40010400

080054f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80054f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054f2:	b08b      	sub	sp, #44	; 0x2c
 80054f4:	af06      	add	r7, sp, #24
 80054f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e0fd      	b.n	80056fe <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f007 fb4e 	bl	800cbb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2203      	movs	r2, #3
 8005520:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f003 f82f 	bl	800858c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	687e      	ldr	r6, [r7, #4]
 8005536:	466d      	mov	r5, sp
 8005538:	f106 0410 	add.w	r4, r6, #16
 800553c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800553e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	1d33      	adds	r3, r6, #4
 8005546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005548:	6838      	ldr	r0, [r7, #0]
 800554a:	f002 fff9 	bl	8008540 <USB_CoreInit>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e0ce      	b.n	80056fe <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2100      	movs	r1, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f003 f82a 	bl	80085c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800556c:	2300      	movs	r3, #0
 800556e:	73fb      	strb	r3, [r7, #15]
 8005570:	e04c      	b.n	800560c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	440b      	add	r3, r1
 8005582:	3301      	adds	r3, #1
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	440b      	add	r3, r1
 8005598:	7bfa      	ldrb	r2, [r7, #15]
 800559a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800559c:	7bfa      	ldrb	r2, [r7, #15]
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	b298      	uxth	r0, r3
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	440b      	add	r3, r1
 80055ae:	3336      	adds	r3, #54	; 0x36
 80055b0:	4602      	mov	r2, r0
 80055b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	440b      	add	r3, r1
 80055c4:	3303      	adds	r3, #3
 80055c6:	2200      	movs	r2, #0
 80055c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80055ca:	7bfa      	ldrb	r2, [r7, #15]
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	440b      	add	r3, r1
 80055d8:	3338      	adds	r3, #56	; 0x38
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055de:	7bfa      	ldrb	r2, [r7, #15]
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	440b      	add	r3, r1
 80055ec:	333c      	adds	r3, #60	; 0x3c
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055f2:	7bfa      	ldrb	r2, [r7, #15]
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	440b      	add	r3, r1
 8005600:	3340      	adds	r3, #64	; 0x40
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	3301      	adds	r3, #1
 800560a:	73fb      	strb	r3, [r7, #15]
 800560c:	7bfa      	ldrb	r2, [r7, #15]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	429a      	cmp	r2, r3
 8005614:	d3ad      	bcc.n	8005572 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005616:	2300      	movs	r3, #0
 8005618:	73fb      	strb	r3, [r7, #15]
 800561a:	e044      	b.n	80056a6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800561c:	7bfa      	ldrb	r2, [r7, #15]
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	440b      	add	r3, r1
 800562a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005632:	7bfa      	ldrb	r2, [r7, #15]
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	440b      	add	r3, r1
 8005640:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005644:	7bfa      	ldrb	r2, [r7, #15]
 8005646:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005648:	7bfa      	ldrb	r2, [r7, #15]
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	440b      	add	r3, r1
 8005656:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800565a:	2200      	movs	r2, #0
 800565c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800565e:	7bfa      	ldrb	r2, [r7, #15]
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	440b      	add	r3, r1
 800566c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005674:	7bfa      	ldrb	r2, [r7, #15]
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	440b      	add	r3, r1
 8005682:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800568a:	7bfa      	ldrb	r2, [r7, #15]
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	440b      	add	r3, r1
 8005698:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
 80056a2:	3301      	adds	r3, #1
 80056a4:	73fb      	strb	r3, [r7, #15]
 80056a6:	7bfa      	ldrb	r2, [r7, #15]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d3b5      	bcc.n	800561c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	603b      	str	r3, [r7, #0]
 80056b6:	687e      	ldr	r6, [r7, #4]
 80056b8:	466d      	mov	r5, sp
 80056ba:	f106 0410 	add.w	r4, r6, #16
 80056be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	602b      	str	r3, [r5, #0]
 80056c6:	1d33      	adds	r3, r6, #4
 80056c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056ca:	6838      	ldr	r0, [r7, #0]
 80056cc:	f002 ff84 	bl	80085d8 <USB_DevInit>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e00d      	b.n	80056fe <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f005 fc36 	bl	800af68 <USB_DevDisconnect>

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005706 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_PCD_Start+0x16>
 8005718:	2302      	movs	r3, #2
 800571a:	e016      	b.n	800574a <HAL_PCD_Start+0x44>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f002 ff19 	bl	8008560 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800572e:	2101      	movs	r1, #1
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f007 fcb4 	bl	800d09e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f005 fc0a 	bl	800af54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b088      	sub	sp, #32
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f005 fc0c 	bl	800af7c <USB_ReadInterrupts>
 8005764:	4603      	mov	r3, r0
 8005766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800576a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800576e:	d102      	bne.n	8005776 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fb5f 	bl	8005e34 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f005 fbfe 	bl	800af7c <USB_ReadInterrupts>
 8005780:	4603      	mov	r3, r0
 8005782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578a:	d112      	bne.n	80057b2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800579e:	b292      	uxth	r2, r2
 80057a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f007 fa82 	bl	800ccae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80057aa:	2100      	movs	r1, #0
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f923 	bl	80059f8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f005 fbe0 	bl	800af7c <USB_ReadInterrupts>
 80057bc:	4603      	mov	r3, r0
 80057be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057c6:	d10b      	bne.n	80057e0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057da:	b292      	uxth	r2, r2
 80057dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f005 fbc9 	bl	800af7c <USB_ReadInterrupts>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f4:	d10b      	bne.n	800580e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80057fe:	b29a      	uxth	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005808:	b292      	uxth	r2, r2
 800580a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f005 fbb2 	bl	800af7c <USB_ReadInterrupts>
 8005818:	4603      	mov	r3, r0
 800581a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800581e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005822:	d126      	bne.n	8005872 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800582c:	b29a      	uxth	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0204 	bic.w	r2, r2, #4
 8005836:	b292      	uxth	r2, r2
 8005838:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005844:	b29a      	uxth	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0208 	bic.w	r2, r2, #8
 800584e:	b292      	uxth	r2, r2
 8005850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f007 fa63 	bl	800cd20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005862:	b29a      	uxth	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800586c:	b292      	uxth	r2, r2
 800586e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f005 fb80 	bl	800af7c <USB_ReadInterrupts>
 800587c:	4603      	mov	r3, r0
 800587e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005886:	f040 8082 	bne.w	800598e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800588a:	2300      	movs	r3, #0
 800588c:	77fb      	strb	r3, [r7, #31]
 800588e:	e010      	b.n	80058b2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	7ffb      	ldrb	r3, [r7, #31]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	441a      	add	r2, r3
 800589c:	7ffb      	ldrb	r3, [r7, #31]
 800589e:	8812      	ldrh	r2, [r2, #0]
 80058a0:	b292      	uxth	r2, r2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	3320      	adds	r3, #32
 80058a6:	443b      	add	r3, r7
 80058a8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80058ac:	7ffb      	ldrb	r3, [r7, #31]
 80058ae:	3301      	adds	r3, #1
 80058b0:	77fb      	strb	r3, [r7, #31]
 80058b2:	7ffb      	ldrb	r3, [r7, #31]
 80058b4:	2b07      	cmp	r3, #7
 80058b6:	d9eb      	bls.n	8005890 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	b292      	uxth	r2, r2
 80058cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80058d8:	b29a      	uxth	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0201 	bic.w	r2, r2, #1
 80058e2:	b292      	uxth	r2, r2
 80058e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80058e8:	bf00      	nop
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0f6      	beq.n	80058ea <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005904:	b29a      	uxth	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800590e:	b292      	uxth	r2, r2
 8005910:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005914:	2300      	movs	r3, #0
 8005916:	77fb      	strb	r3, [r7, #31]
 8005918:	e00f      	b.n	800593a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800591a:	7ffb      	ldrb	r3, [r7, #31]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	4611      	mov	r1, r2
 8005922:	7ffa      	ldrb	r2, [r7, #31]
 8005924:	0092      	lsls	r2, r2, #2
 8005926:	440a      	add	r2, r1
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	3320      	adds	r3, #32
 800592c:	443b      	add	r3, r7
 800592e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005932:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005934:	7ffb      	ldrb	r3, [r7, #31]
 8005936:	3301      	adds	r3, #1
 8005938:	77fb      	strb	r3, [r7, #31]
 800593a:	7ffb      	ldrb	r3, [r7, #31]
 800593c:	2b07      	cmp	r3, #7
 800593e:	d9ec      	bls.n	800591a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005948:	b29a      	uxth	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0208 	orr.w	r2, r2, #8
 8005952:	b292      	uxth	r2, r2
 8005954:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005960:	b29a      	uxth	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800596a:	b292      	uxth	r2, r2
 800596c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005978:	b29a      	uxth	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0204 	orr.w	r2, r2, #4
 8005982:	b292      	uxth	r2, r2
 8005984:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f007 f9af 	bl	800ccec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f005 faf2 	bl	800af7c <USB_ReadInterrupts>
 8005998:	4603      	mov	r3, r0
 800599a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800599e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a2:	d10e      	bne.n	80059c2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059b6:	b292      	uxth	r2, r2
 80059b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f007 f968 	bl	800cc92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f005 fad8 	bl	800af7c <USB_ReadInterrupts>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d6:	d10b      	bne.n	80059f0 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059ea:	b292      	uxth	r2, r2
 80059ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80059f0:	bf00      	nop
 80059f2:	3720      	adds	r7, #32
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_PCD_SetAddress+0x1a>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e013      	b.n	8005a3a <HAL_PCD_SetAddress+0x42>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	78fa      	ldrb	r2, [r7, #3]
 8005a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	78fa      	ldrb	r2, [r7, #3]
 8005a28:	4611      	mov	r1, r2
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f005 fa7f 	bl	800af2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	4608      	mov	r0, r1
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4603      	mov	r3, r0
 8005a52:	70fb      	strb	r3, [r7, #3]
 8005a54:	460b      	mov	r3, r1
 8005a56:	803b      	strh	r3, [r7, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	da0e      	bge.n	8005a86 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	705a      	strb	r2, [r3, #1]
 8005a84:	e00e      	b.n	8005aa4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	f003 0207 	and.w	r2, r3, #7
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005aa4:	78fb      	ldrb	r3, [r7, #3]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005ab0:	883a      	ldrh	r2, [r7, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	78ba      	ldrb	r2, [r7, #2]
 8005aba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	785b      	ldrb	r3, [r3, #1]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d004      	beq.n	8005ace <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005ace:	78bb      	ldrb	r3, [r7, #2]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d102      	bne.n	8005ada <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_PCD_EP_Open+0xa6>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e00e      	b.n	8005b06 <HAL_PCD_EP_Open+0xc4>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68f9      	ldr	r1, [r7, #12]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f002 fd8e 	bl	8008618 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005b04:	7afb      	ldrb	r3, [r7, #11]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	460b      	mov	r3, r1
 8005b18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	da0e      	bge.n	8005b40 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b22:	78fb      	ldrb	r3, [r7, #3]
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	4413      	add	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	705a      	strb	r2, [r3, #1]
 8005b3e:	e00e      	b.n	8005b5e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	f003 0207 	and.w	r2, r3, #7
 8005b46:	4613      	mov	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	4413      	add	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_PCD_EP_Close+0x6a>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e00e      	b.n	8005b96 <HAL_PCD_EP_Close+0x88>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68f9      	ldr	r1, [r7, #12]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f003 f8b0 	bl	8008cec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b086      	sub	sp, #24
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
 8005baa:	460b      	mov	r3, r1
 8005bac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bae:	7afb      	ldrb	r3, [r7, #11]
 8005bb0:	f003 0207 	and.w	r2, r3, #7
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bde:	7afb      	ldrb	r3, [r7, #11]
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005bea:	7afb      	ldrb	r3, [r7, #11]
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d106      	bne.n	8005c02 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6979      	ldr	r1, [r7, #20]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f003 fa62 	bl	80090c4 <USB_EPStartXfer>
 8005c00:	e005      	b.n	8005c0e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6979      	ldr	r1, [r7, #20]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f003 fa5b 	bl	80090c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	f003 0207 	and.w	r2, r3, #7
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	440b      	add	r3, r1
 8005c36:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005c3a:	681b      	ldr	r3, [r3, #0]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr

08005c46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b086      	sub	sp, #24
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	460b      	mov	r3, r1
 8005c54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c56:	7afb      	ldrb	r3, [r7, #11]
 8005c58:	f003 0307 	and.w	r3, r3, #7
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4413      	add	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c92:	7afb      	ldrb	r3, [r7, #11]
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d106      	bne.n	8005cb6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6979      	ldr	r1, [r7, #20]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f003 fa08 	bl	80090c4 <USB_EPStartXfer>
 8005cb4:	e005      	b.n	8005cc2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6979      	ldr	r1, [r7, #20]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f003 fa01 	bl	80090c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	f003 0207 	and.w	r2, r3, #7
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d901      	bls.n	8005cea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e04c      	b.n	8005d84 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	da0e      	bge.n	8005d10 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	4413      	add	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	705a      	strb	r2, [r3, #1]
 8005d0e:	e00c      	b.n	8005d2a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d10:	78fa      	ldrb	r2, [r7, #3]
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	4413      	add	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_PCD_EP_SetStall+0x7e>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e01c      	b.n	8005d84 <HAL_PCD_EP_SetStall+0xb8>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68f9      	ldr	r1, [r7, #12]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f004 ffeb 	bl	800ad34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	f003 0307 	and.w	r3, r3, #7
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d108      	bne.n	8005d7a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f005 f910 	bl	800af9a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	f003 020f 	and.w	r2, r3, #15
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d901      	bls.n	8005daa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e040      	b.n	8005e2c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	da0e      	bge.n	8005dd0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	705a      	strb	r2, [r3, #1]
 8005dce:	e00e      	b.n	8005dee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	f003 0207 	and.w	r2, r3, #7
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	4413      	add	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d101      	bne.n	8005e0e <HAL_PCD_EP_ClrStall+0x82>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e00e      	b.n	8005e2c <HAL_PCD_EP_ClrStall+0xa0>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68f9      	ldr	r1, [r7, #12]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f004 ffd9 	bl	800add4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08e      	sub	sp, #56	; 0x38
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005e3c:	e2ec      	b.n	8006418 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e46:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005e48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005e54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f040 8161 	bne.w	8006120 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005e5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d152      	bne.n	8005f0e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e78:	81fb      	strh	r3, [r7, #14]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	89fb      	ldrh	r3, [r7, #14]
 8005e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3328      	adds	r3, #40	; 0x28
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3302      	adds	r3, #2
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	695a      	ldr	r2, [r3, #20]
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	441a      	add	r2, r3
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005ecc:	2100      	movs	r1, #0
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f006 fec5 	bl	800cc5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 829b 	beq.w	8006418 <PCD_EP_ISR_Handler+0x5e4>
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f040 8296 	bne.w	8006418 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	b292      	uxth	r2, r2
 8005f00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f0c:	e284      	b.n	8006418 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005f1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d034      	beq.n	8005f92 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3306      	adds	r3, #6
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f005 f867 	bl	800b03a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005f78:	4013      	ands	r3, r2
 8005f7a:	823b      	strh	r3, [r7, #16]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	8a3a      	ldrh	r2, [r7, #16]
 8005f82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f86:	b292      	uxth	r2, r2
 8005f88:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f006 fe3a 	bl	800cc04 <HAL_PCD_SetupStageCallback>
 8005f90:	e242      	b.n	8006418 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005f92:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f280 823e 	bge.w	8006418 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005fa8:	4013      	ands	r3, r2
 8005faa:	83bb      	strh	r3, [r7, #28]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	8bba      	ldrh	r2, [r7, #28]
 8005fb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fb6:	b292      	uxth	r2, r2
 8005fb8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	4413      	add	r3, r2
 8005fce:	3306      	adds	r3, #6
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d019      	beq.n	8006022 <PCD_EP_ISR_Handler+0x1ee>
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d015      	beq.n	8006022 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6818      	ldr	r0, [r3, #0]
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	6959      	ldr	r1, [r3, #20]
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006006:	b29b      	uxth	r3, r3
 8006008:	f005 f817 	bl	800b03a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	695a      	ldr	r2, [r3, #20]
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	441a      	add	r2, r3
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800601a:	2100      	movs	r1, #0
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f006 fe03 	bl	800cc28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602e:	2b00      	cmp	r3, #0
 8006030:	f040 81f2 	bne.w	8006418 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006042:	b29b      	uxth	r3, r3
 8006044:	461a      	mov	r2, r3
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	4413      	add	r3, r2
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d112      	bne.n	8006082 <PCD_EP_ISR_Handler+0x24e>
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006066:	b29a      	uxth	r2, r3
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	801a      	strh	r2, [r3, #0]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800607a:	b29a      	uxth	r2, r3
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	801a      	strh	r2, [r3, #0]
 8006080:	e02f      	b.n	80060e2 <PCD_EP_ISR_Handler+0x2ae>
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b3e      	cmp	r3, #62	; 0x3e
 8006088:	d813      	bhi.n	80060b2 <PCD_EP_ISR_Handler+0x27e>
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	633b      	str	r3, [r7, #48]	; 0x30
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <PCD_EP_ISR_Handler+0x270>
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	3301      	adds	r3, #1
 80060a2:	633b      	str	r3, [r7, #48]	; 0x30
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	029b      	lsls	r3, r3, #10
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	801a      	strh	r2, [r3, #0]
 80060b0:	e017      	b.n	80060e2 <PCD_EP_ISR_Handler+0x2ae>
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	633b      	str	r3, [r7, #48]	; 0x30
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d102      	bne.n	80060cc <PCD_EP_ISR_Handler+0x298>
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	3b01      	subs	r3, #1
 80060ca:	633b      	str	r3, [r7, #48]	; 0x30
 80060cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	029b      	lsls	r3, r3, #10
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060dc:	b29a      	uxth	r2, r3
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f2:	827b      	strh	r3, [r7, #18]
 80060f4:	8a7b      	ldrh	r3, [r7, #18]
 80060f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060fa:	827b      	strh	r3, [r7, #18]
 80060fc:	8a7b      	ldrh	r3, [r7, #18]
 80060fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006102:	827b      	strh	r3, [r7, #18]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	8a7b      	ldrh	r3, [r7, #18]
 800610a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800610e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611a:	b29b      	uxth	r3, r3
 800611c:	8013      	strh	r3, [r2, #0]
 800611e:	e17b      	b.n	8006418 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	461a      	mov	r2, r3
 8006126:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006132:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006136:	2b00      	cmp	r3, #0
 8006138:	f280 80ea 	bge.w	8006310 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29a      	uxth	r2, r3
 800614e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006152:	4013      	ands	r3, r2
 8006154:	853b      	strh	r3, [r7, #40]	; 0x28
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006166:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800616a:	b292      	uxth	r2, r2
 800616c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800616e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006172:	4613      	mov	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	4413      	add	r3, r2
 8006182:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	7b1b      	ldrb	r3, [r3, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d122      	bne.n	80061d2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006194:	b29b      	uxth	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	4413      	add	r3, r2
 80061a0:	3306      	adds	r3, #6
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6812      	ldr	r2, [r2, #0]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061b4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80061b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 8087 	beq.w	80062cc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	6959      	ldr	r1, [r3, #20]
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	88da      	ldrh	r2, [r3, #6]
 80061ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061cc:	f004 ff35 	bl	800b03a <USB_ReadPMA>
 80061d0:	e07c      	b.n	80062cc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	78db      	ldrb	r3, [r3, #3]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d108      	bne.n	80061ec <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80061da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80061dc:	461a      	mov	r2, r3
 80061de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f927 	bl	8006434 <HAL_PCD_EP_DB_Receive>
 80061e6:	4603      	mov	r3, r0
 80061e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80061ea:	e06f      	b.n	80062cc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006206:	847b      	strh	r3, [r7, #34]	; 0x22
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	441a      	add	r2, r3
 8006216:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800621c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006224:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006228:	b29b      	uxth	r3, r3
 800622a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d021      	beq.n	800628a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624e:	b29b      	uxth	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	4413      	add	r3, r2
 800625a:	3302      	adds	r3, #2
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6812      	ldr	r2, [r2, #0]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800626e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006270:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006272:	2b00      	cmp	r3, #0
 8006274:	d02a      	beq.n	80062cc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6818      	ldr	r0, [r3, #0]
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	6959      	ldr	r1, [r3, #20]
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	891a      	ldrh	r2, [r3, #8]
 8006282:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006284:	f004 fed9 	bl	800b03a <USB_ReadPMA>
 8006288:	e020      	b.n	80062cc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006292:	b29b      	uxth	r3, r3
 8006294:	461a      	mov	r2, r3
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	4413      	add	r3, r2
 800629e:	3306      	adds	r3, #6
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80062b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d008      	beq.n	80062cc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	6959      	ldr	r1, [r3, #20]
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	895a      	ldrh	r2, [r3, #10]
 80062c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062c8:	f004 feb7 	bl	800b03a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	69da      	ldr	r2, [r3, #28]
 80062d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062d2:	441a      	add	r2, r3
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062de:	441a      	add	r2, r3
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <PCD_EP_ISR_Handler+0x4c2>
 80062ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d206      	bcs.n	8006304 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f006 fc93 	bl	800cc28 <HAL_PCD_DataOutStageCallback>
 8006302:	e005      	b.n	8006310 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800630a:	4618      	mov	r0, r3
 800630c:	f002 feda 	bl	80090c4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006310:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006316:	2b00      	cmp	r3, #0
 8006318:	d07e      	beq.n	8006418 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800631a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	4613      	mov	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	4413      	add	r3, r2
 800632c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29b      	uxth	r3, r3
 8006340:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006348:	843b      	strh	r3, [r7, #32]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	441a      	add	r2, r3
 8006358:	8c3b      	ldrh	r3, [r7, #32]
 800635a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800635e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006362:	b29b      	uxth	r3, r3
 8006364:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	78db      	ldrb	r3, [r3, #3]
 800636a:	2b03      	cmp	r3, #3
 800636c:	d00c      	beq.n	8006388 <PCD_EP_ISR_Handler+0x554>
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	78db      	ldrb	r3, [r3, #3]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d008      	beq.n	8006388 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800637a:	2b02      	cmp	r3, #2
 800637c:	d146      	bne.n	800640c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800637e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006384:	2b00      	cmp	r3, #0
 8006386:	d141      	bne.n	800640c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006390:	b29b      	uxth	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	4413      	add	r3, r2
 800639c:	3302      	adds	r3, #2
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6812      	ldr	r2, [r2, #0]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063b0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	8bfb      	ldrh	r3, [r7, #30]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d906      	bls.n	80063ca <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	699a      	ldr	r2, [r3, #24]
 80063c0:	8bfb      	ldrh	r3, [r7, #30]
 80063c2:	1ad2      	subs	r2, r2, r3
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	619a      	str	r2, [r3, #24]
 80063c8:	e002      	b.n	80063d0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	2200      	movs	r2, #0
 80063ce:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d106      	bne.n	80063e6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f006 fc3d 	bl	800cc5e <HAL_PCD_DataInStageCallback>
 80063e4:	e018      	b.n	8006418 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	695a      	ldr	r2, [r3, #20]
 80063ea:	8bfb      	ldrh	r3, [r7, #30]
 80063ec:	441a      	add	r2, r3
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	8bfb      	ldrh	r3, [r7, #30]
 80063f8:	441a      	add	r2, r3
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006404:	4618      	mov	r0, r3
 8006406:	f002 fe5d 	bl	80090c4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800640a:	e005      	b.n	8006418 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800640c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800640e:	461a      	mov	r2, r3
 8006410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f91b 	bl	800664e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006420:	b29b      	uxth	r3, r3
 8006422:	b21b      	sxth	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	f6ff ad0a 	blt.w	8005e3e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3738      	adds	r7, #56	; 0x38
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	4613      	mov	r3, r2
 8006440:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d07e      	beq.n	800654a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006454:	b29b      	uxth	r3, r3
 8006456:	461a      	mov	r2, r3
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	00db      	lsls	r3, r3, #3
 800645e:	4413      	add	r3, r2
 8006460:	3302      	adds	r3, #2
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006474:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	8b7b      	ldrh	r3, [r7, #26]
 800647c:	429a      	cmp	r2, r3
 800647e:	d306      	bcc.n	800648e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	699a      	ldr	r2, [r3, #24]
 8006484:	8b7b      	ldrh	r3, [r7, #26]
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	619a      	str	r2, [r3, #24]
 800648c:	e002      	b.n	8006494 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2200      	movs	r2, #0
 8006492:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d123      	bne.n	80064e4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	461a      	mov	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b6:	833b      	strh	r3, [r7, #24]
 80064b8:	8b3b      	ldrh	r3, [r7, #24]
 80064ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064be:	833b      	strh	r3, [r7, #24]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	441a      	add	r2, r3
 80064ce:	8b3b      	ldrh	r3, [r7, #24]
 80064d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d01f      	beq.n	800652e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006508:	82fb      	strh	r3, [r7, #22]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	441a      	add	r2, r3
 8006518:	8afb      	ldrh	r3, [r7, #22]
 800651a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006526:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800652a:	b29b      	uxth	r3, r3
 800652c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800652e:	8b7b      	ldrh	r3, [r7, #26]
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 8087 	beq.w	8006644 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6818      	ldr	r0, [r3, #0]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	6959      	ldr	r1, [r3, #20]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	891a      	ldrh	r2, [r3, #8]
 8006542:	8b7b      	ldrh	r3, [r7, #26]
 8006544:	f004 fd79 	bl	800b03a <USB_ReadPMA>
 8006548:	e07c      	b.n	8006644 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006552:	b29b      	uxth	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	4413      	add	r3, r2
 800655e:	3306      	adds	r3, #6
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	6812      	ldr	r2, [r2, #0]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006572:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	699a      	ldr	r2, [r3, #24]
 8006578:	8b7b      	ldrh	r3, [r7, #26]
 800657a:	429a      	cmp	r2, r3
 800657c:	d306      	bcc.n	800658c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	8b7b      	ldrh	r3, [r7, #26]
 8006584:	1ad2      	subs	r2, r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	619a      	str	r2, [r3, #24]
 800658a:	e002      	b.n	8006592 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2200      	movs	r2, #0
 8006590:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d123      	bne.n	80065e2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	461a      	mov	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b4:	83fb      	strh	r3, [r7, #30]
 80065b6:	8bfb      	ldrh	r3, [r7, #30]
 80065b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065bc:	83fb      	strh	r3, [r7, #30]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	441a      	add	r2, r3
 80065cc:	8bfb      	ldrh	r3, [r7, #30]
 80065ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065de:	b29b      	uxth	r3, r3
 80065e0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80065e2:	88fb      	ldrh	r3, [r7, #6]
 80065e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d11f      	bne.n	800662c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006606:	83bb      	strh	r3, [r7, #28]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	441a      	add	r2, r3
 8006616:	8bbb      	ldrh	r3, [r7, #28]
 8006618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800661c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006624:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006628:	b29b      	uxth	r3, r3
 800662a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800662c:	8b7b      	ldrh	r3, [r7, #26]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d008      	beq.n	8006644 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6959      	ldr	r1, [r3, #20]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	895a      	ldrh	r2, [r3, #10]
 800663e:	8b7b      	ldrh	r3, [r7, #26]
 8006640:	f004 fcfb 	bl	800b03a <USB_ReadPMA>
    }
  }

  return count;
 8006644:	8b7b      	ldrh	r3, [r7, #26]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3720      	adds	r7, #32
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b0a2      	sub	sp, #136	; 0x88
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	4613      	mov	r3, r2
 800665a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800665c:	88fb      	ldrh	r3, [r7, #6]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 81c7 	beq.w	80069f6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006670:	b29b      	uxth	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	4413      	add	r3, r2
 800667c:	3302      	adds	r3, #2
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	6812      	ldr	r2, [r2, #0]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006690:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	699a      	ldr	r2, [r3, #24]
 8006698:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800669c:	429a      	cmp	r2, r3
 800669e:	d907      	bls.n	80066b0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	699a      	ldr	r2, [r3, #24]
 80066a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80066a8:	1ad2      	subs	r2, r2, r3
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	619a      	str	r2, [r3, #24]
 80066ae:	e002      	b.n	80066b6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2200      	movs	r2, #0
 80066b4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f040 80b9 	bne.w	8006832 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	785b      	ldrb	r3, [r3, #1]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d126      	bne.n	8006716 <HAL_PCD_EP_DB_Transmit+0xc8>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	4413      	add	r3, r2
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	011a      	lsls	r2, r3, #4
 80066e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e8:	4413      	add	r3, r2
 80066ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670e:	b29a      	uxth	r2, r3
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	e01a      	b.n	800674c <HAL_PCD_EP_DB_Transmit+0xfe>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d116      	bne.n	800674c <HAL_PCD_EP_DB_Transmit+0xfe>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	633b      	str	r3, [r7, #48]	; 0x30
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800672c:	b29b      	uxth	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	4413      	add	r3, r2
 8006734:	633b      	str	r3, [r7, #48]	; 0x30
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	011a      	lsls	r2, r3, #4
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	4413      	add	r3, r2
 8006740:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006748:	2200      	movs	r2, #0
 800674a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	623b      	str	r3, [r7, #32]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	785b      	ldrb	r3, [r3, #1]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d126      	bne.n	80067a8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	61bb      	str	r3, [r7, #24]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006768:	b29b      	uxth	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	4413      	add	r3, r2
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	011a      	lsls	r2, r3, #4
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	4413      	add	r3, r2
 800677c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	b29b      	uxth	r3, r3
 8006788:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800678c:	b29a      	uxth	r2, r3
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	801a      	strh	r2, [r3, #0]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	801a      	strh	r2, [r3, #0]
 80067a6:	e017      	b.n	80067d8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	785b      	ldrb	r3, [r3, #1]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d113      	bne.n	80067d8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	4413      	add	r3, r2
 80067c0:	623b      	str	r3, [r7, #32]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	011a      	lsls	r2, r3, #4
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	4413      	add	r3, r2
 80067cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067d0:	61fb      	str	r3, [r7, #28]
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	2200      	movs	r2, #0
 80067d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	4619      	mov	r1, r3
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f006 fa3d 	bl	800cc5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80067e4:	88fb      	ldrh	r3, [r7, #6]
 80067e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 82d4 	beq.w	8006d98 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680a:	827b      	strh	r3, [r7, #18]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	441a      	add	r2, r3
 800681a:	8a7b      	ldrh	r3, [r7, #18]
 800681c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682c:	b29b      	uxth	r3, r3
 800682e:	8013      	strh	r3, [r2, #0]
 8006830:	e2b2      	b.n	8006d98 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d021      	beq.n	8006880 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	461a      	mov	r2, r3
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006856:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	441a      	add	r2, r3
 8006868:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800686c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687c:	b29b      	uxth	r3, r3
 800687e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006886:	2b01      	cmp	r3, #1
 8006888:	f040 8286 	bne.w	8006d98 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	695a      	ldr	r2, [r3, #20]
 8006890:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006894:	441a      	add	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	69da      	ldr	r2, [r3, #28]
 800689e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80068a2:	441a      	add	r2, r3
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	6a1a      	ldr	r2, [r3, #32]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d309      	bcc.n	80068c8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6a1a      	ldr	r2, [r3, #32]
 80068be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068c0:	1ad2      	subs	r2, r2, r3
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	621a      	str	r2, [r3, #32]
 80068c6:	e015      	b.n	80068f4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d107      	bne.n	80068e0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80068d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80068d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80068de:	e009      	b.n	80068f4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2200      	movs	r2, #0
 80068f2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d155      	bne.n	80069a8 <HAL_PCD_EP_DB_Transmit+0x35a>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	63bb      	str	r3, [r7, #56]	; 0x38
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800690a:	b29b      	uxth	r3, r3
 800690c:	461a      	mov	r2, r3
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	4413      	add	r3, r2
 8006912:	63bb      	str	r3, [r7, #56]	; 0x38
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	011a      	lsls	r2, r3, #4
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	4413      	add	r3, r2
 800691e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
 8006924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006926:	2b00      	cmp	r3, #0
 8006928:	d112      	bne.n	8006950 <HAL_PCD_EP_DB_Transmit+0x302>
 800692a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	b29b      	uxth	r3, r3
 8006930:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006934:	b29a      	uxth	r2, r3
 8006936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006938:	801a      	strh	r2, [r3, #0]
 800693a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006948:	b29a      	uxth	r2, r3
 800694a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800694c:	801a      	strh	r2, [r3, #0]
 800694e:	e047      	b.n	80069e0 <HAL_PCD_EP_DB_Transmit+0x392>
 8006950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006952:	2b3e      	cmp	r3, #62	; 0x3e
 8006954:	d811      	bhi.n	800697a <HAL_PCD_EP_DB_Transmit+0x32c>
 8006956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006958:	085b      	lsrs	r3, r3, #1
 800695a:	64bb      	str	r3, [r7, #72]	; 0x48
 800695c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <HAL_PCD_EP_DB_Transmit+0x31e>
 8006966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006968:	3301      	adds	r3, #1
 800696a:	64bb      	str	r3, [r7, #72]	; 0x48
 800696c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800696e:	b29b      	uxth	r3, r3
 8006970:	029b      	lsls	r3, r3, #10
 8006972:	b29a      	uxth	r2, r3
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	801a      	strh	r2, [r3, #0]
 8006978:	e032      	b.n	80069e0 <HAL_PCD_EP_DB_Transmit+0x392>
 800697a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800697c:	095b      	lsrs	r3, r3, #5
 800697e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006982:	f003 031f 	and.w	r3, r3, #31
 8006986:	2b00      	cmp	r3, #0
 8006988:	d102      	bne.n	8006990 <HAL_PCD_EP_DB_Transmit+0x342>
 800698a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800698c:	3b01      	subs	r3, #1
 800698e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006992:	b29b      	uxth	r3, r3
 8006994:	029b      	lsls	r3, r3, #10
 8006996:	b29b      	uxth	r3, r3
 8006998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800699c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a4:	801a      	strh	r2, [r3, #0]
 80069a6:	e01b      	b.n	80069e0 <HAL_PCD_EP_DB_Transmit+0x392>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	785b      	ldrb	r3, [r3, #1]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d117      	bne.n	80069e0 <HAL_PCD_EP_DB_Transmit+0x392>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	643b      	str	r3, [r7, #64]	; 0x40
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069be:	b29b      	uxth	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c4:	4413      	add	r3, r2
 80069c6:	643b      	str	r3, [r7, #64]	; 0x40
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	011a      	lsls	r2, r3, #4
 80069ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069d0:	4413      	add	r3, r2
 80069d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069da:	b29a      	uxth	r2, r3
 80069dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069de:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6959      	ldr	r1, [r3, #20]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	891a      	ldrh	r2, [r3, #8]
 80069ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f004 fade 	bl	800afb0 <USB_WritePMA>
 80069f4:	e1d0      	b.n	8006d98 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	461a      	mov	r2, r3
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	4413      	add	r3, r2
 8006a0a:	3306      	adds	r3, #6
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	6812      	ldr	r2, [r2, #0]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	699a      	ldr	r2, [r3, #24]
 8006a26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d307      	bcc.n	8006a3e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	699a      	ldr	r2, [r3, #24]
 8006a32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a36:	1ad2      	subs	r2, r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	619a      	str	r2, [r3, #24]
 8006a3c:	e002      	b.n	8006a44 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2200      	movs	r2, #0
 8006a42:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f040 80c4 	bne.w	8006bd6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d126      	bne.n	8006aa4 <HAL_PCD_EP_DB_Transmit+0x456>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	461a      	mov	r2, r3
 8006a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6a:	4413      	add	r3, r2
 8006a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	011a      	lsls	r2, r3, #4
 8006a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a76:	4413      	add	r3, r2
 8006a78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a8c:	801a      	strh	r2, [r3, #0]
 8006a8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006aa0:	801a      	strh	r2, [r3, #0]
 8006aa2:	e01a      	b.n	8006ada <HAL_PCD_EP_DB_Transmit+0x48c>
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	785b      	ldrb	r3, [r3, #1]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d116      	bne.n	8006ada <HAL_PCD_EP_DB_Transmit+0x48c>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	677b      	str	r3, [r7, #116]	; 0x74
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	461a      	mov	r2, r3
 8006abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ac0:	4413      	add	r3, r2
 8006ac2:	677b      	str	r3, [r7, #116]	; 0x74
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	011a      	lsls	r2, r3, #4
 8006aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006acc:	4413      	add	r3, r2
 8006ace:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ad2:	673b      	str	r3, [r7, #112]	; 0x70
 8006ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	785b      	ldrb	r3, [r3, #1]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d12f      	bne.n	8006b48 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	461a      	mov	r2, r3
 8006afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b00:	4413      	add	r3, r2
 8006b02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	011a      	lsls	r2, r3, #4
 8006b0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b10:	4413      	add	r3, r2
 8006b12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b2c:	801a      	strh	r2, [r3, #0]
 8006b2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b44:	801a      	strh	r2, [r3, #0]
 8006b46:	e017      	b.n	8006b78 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	785b      	ldrb	r3, [r3, #1]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d113      	bne.n	8006b78 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b5e:	4413      	add	r3, r2
 8006b60:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	011a      	lsls	r2, r3, #4
 8006b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b74:	2200      	movs	r2, #0
 8006b76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f006 f86d 	bl	800cc5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006b84:	88fb      	ldrh	r3, [r7, #6]
 8006b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f040 8104 	bne.w	8006d98 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006baa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	441a      	add	r2, r3
 8006bbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	8013      	strh	r3, [r2, #0]
 8006bd4:	e0e0      	b.n	8006d98 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006bd6:	88fb      	ldrh	r3, [r7, #6]
 8006bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d121      	bne.n	8006c24 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	461a      	mov	r2, r3
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	441a      	add	r2, r3
 8006c0c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	f040 80b4 	bne.w	8006d98 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	695a      	ldr	r2, [r3, #20]
 8006c34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006c38:	441a      	add	r2, r3
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	69da      	ldr	r2, [r3, #28]
 8006c42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006c46:	441a      	add	r2, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	6a1a      	ldr	r2, [r3, #32]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d309      	bcc.n	8006c6c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	6a1a      	ldr	r2, [r3, #32]
 8006c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c64:	1ad2      	subs	r2, r2, r3
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	621a      	str	r2, [r3, #32]
 8006c6a:	e015      	b.n	8006c98 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d107      	bne.n	8006c84 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8006c74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006c78:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006c82:	e009      	b.n	8006c98 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d155      	bne.n	8006d52 <HAL_PCD_EP_DB_Transmit+0x704>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cba:	4413      	add	r3, r2
 8006cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	011a      	lsls	r2, r3, #4
 8006cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ccc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d112      	bne.n	8006cfa <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ce2:	801a      	strh	r2, [r3, #0]
 8006ce4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cf6:	801a      	strh	r2, [r3, #0]
 8006cf8:	e044      	b.n	8006d84 <HAL_PCD_EP_DB_Transmit+0x736>
 8006cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cfc:	2b3e      	cmp	r3, #62	; 0x3e
 8006cfe:	d811      	bhi.n	8006d24 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	657b      	str	r3, [r7, #84]	; 0x54
 8006d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d12:	3301      	adds	r3, #1
 8006d14:	657b      	str	r3, [r7, #84]	; 0x54
 8006d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	029b      	lsls	r3, r3, #10
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d20:	801a      	strh	r2, [r3, #0]
 8006d22:	e02f      	b.n	8006d84 <HAL_PCD_EP_DB_Transmit+0x736>
 8006d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	657b      	str	r3, [r7, #84]	; 0x54
 8006d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d2c:	f003 031f 	and.w	r3, r3, #31
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d36:	3b01      	subs	r3, #1
 8006d38:	657b      	str	r3, [r7, #84]	; 0x54
 8006d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	029b      	lsls	r3, r3, #10
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d4e:	801a      	strh	r2, [r3, #0]
 8006d50:	e018      	b.n	8006d84 <HAL_PCD_EP_DB_Transmit+0x736>
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	785b      	ldrb	r3, [r3, #1]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d114      	bne.n	8006d84 <HAL_PCD_EP_DB_Transmit+0x736>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d68:	4413      	add	r3, r2
 8006d6a:	667b      	str	r3, [r7, #100]	; 0x64
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	011a      	lsls	r2, r3, #4
 8006d72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d74:	4413      	add	r3, r2
 8006d76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d7a:	663b      	str	r3, [r7, #96]	; 0x60
 8006d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d82:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	6959      	ldr	r1, [r3, #20]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	895a      	ldrh	r2, [r3, #10]
 8006d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	f004 f90c 	bl	800afb0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db2:	823b      	strh	r3, [r7, #16]
 8006db4:	8a3b      	ldrh	r3, [r7, #16]
 8006db6:	f083 0310 	eor.w	r3, r3, #16
 8006dba:	823b      	strh	r3, [r7, #16]
 8006dbc:	8a3b      	ldrh	r3, [r7, #16]
 8006dbe:	f083 0320 	eor.w	r3, r3, #32
 8006dc2:	823b      	strh	r3, [r7, #16]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	441a      	add	r2, r3
 8006dd2:	8a3b      	ldrh	r3, [r7, #16]
 8006dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3788      	adds	r7, #136	; 0x88
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b087      	sub	sp, #28
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	607b      	str	r3, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	817b      	strh	r3, [r7, #10]
 8006e00:	4613      	mov	r3, r2
 8006e02:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006e04:	897b      	ldrh	r3, [r7, #10]
 8006e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e10:	897b      	ldrh	r3, [r7, #10]
 8006e12:	f003 0307 	and.w	r3, r3, #7
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	e009      	b.n	8006e3c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006e28:	897a      	ldrh	r2, [r7, #10]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4413      	add	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006e3c:	893b      	ldrh	r3, [r7, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d107      	bne.n	8006e52 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2200      	movs	r2, #0
 8006e46:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	80da      	strh	r2, [r3, #6]
 8006e50:	e00b      	b.n	8006e6a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2201      	movs	r2, #1
 8006e56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	0c1b      	lsrs	r3, r3, #16
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	371c      	adds	r7, #28
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bc80      	pop	{r7}
 8006e74:	4770      	bx	lr
	...

08006e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e272      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 8087 	beq.w	8006fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e98:	4b92      	ldr	r3, [pc, #584]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f003 030c 	and.w	r3, r3, #12
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d00c      	beq.n	8006ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006ea4:	4b8f      	ldr	r3, [pc, #572]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f003 030c 	and.w	r3, r3, #12
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d112      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x5e>
 8006eb0:	4b8c      	ldr	r3, [pc, #560]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ebc:	d10b      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ebe:	4b89      	ldr	r3, [pc, #548]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d06c      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x12c>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d168      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e24c      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ede:	d106      	bne.n	8006eee <HAL_RCC_OscConfig+0x76>
 8006ee0:	4b80      	ldr	r3, [pc, #512]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a7f      	ldr	r2, [pc, #508]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	e02e      	b.n	8006f4c <HAL_RCC_OscConfig+0xd4>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10c      	bne.n	8006f10 <HAL_RCC_OscConfig+0x98>
 8006ef6:	4b7b      	ldr	r3, [pc, #492]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a7a      	ldr	r2, [pc, #488]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	4b78      	ldr	r3, [pc, #480]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a77      	ldr	r2, [pc, #476]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	e01d      	b.n	8006f4c <HAL_RCC_OscConfig+0xd4>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f18:	d10c      	bne.n	8006f34 <HAL_RCC_OscConfig+0xbc>
 8006f1a:	4b72      	ldr	r3, [pc, #456]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a71      	ldr	r2, [pc, #452]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	4b6f      	ldr	r3, [pc, #444]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a6e      	ldr	r2, [pc, #440]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	e00b      	b.n	8006f4c <HAL_RCC_OscConfig+0xd4>
 8006f34:	4b6b      	ldr	r3, [pc, #428]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a6a      	ldr	r2, [pc, #424]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	4b68      	ldr	r3, [pc, #416]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a67      	ldr	r2, [pc, #412]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d013      	beq.n	8006f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f54:	f7fd fd7a 	bl	8004a4c <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f5c:	f7fd fd76 	bl	8004a4c <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b64      	cmp	r3, #100	; 0x64
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e200      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f6e:	4b5d      	ldr	r3, [pc, #372]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f0      	beq.n	8006f5c <HAL_RCC_OscConfig+0xe4>
 8006f7a:	e014      	b.n	8006fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f7c:	f7fd fd66 	bl	8004a4c <HAL_GetTick>
 8006f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f82:	e008      	b.n	8006f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f84:	f7fd fd62 	bl	8004a4c <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b64      	cmp	r3, #100	; 0x64
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e1ec      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f96:	4b53      	ldr	r3, [pc, #332]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1f0      	bne.n	8006f84 <HAL_RCC_OscConfig+0x10c>
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d063      	beq.n	800707a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fb2:	4b4c      	ldr	r3, [pc, #304]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f003 030c 	and.w	r3, r3, #12
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006fbe:	4b49      	ldr	r3, [pc, #292]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f003 030c 	and.w	r3, r3, #12
 8006fc6:	2b08      	cmp	r3, #8
 8006fc8:	d11c      	bne.n	8007004 <HAL_RCC_OscConfig+0x18c>
 8006fca:	4b46      	ldr	r3, [pc, #280]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d116      	bne.n	8007004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fd6:	4b43      	ldr	r3, [pc, #268]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d005      	beq.n	8006fee <HAL_RCC_OscConfig+0x176>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d001      	beq.n	8006fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e1c0      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fee:	4b3d      	ldr	r3, [pc, #244]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	4939      	ldr	r1, [pc, #228]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007002:	e03a      	b.n	800707a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d020      	beq.n	800704e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800700c:	4b36      	ldr	r3, [pc, #216]	; (80070e8 <HAL_RCC_OscConfig+0x270>)
 800700e:	2201      	movs	r2, #1
 8007010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007012:	f7fd fd1b 	bl	8004a4c <HAL_GetTick>
 8007016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007018:	e008      	b.n	800702c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800701a:	f7fd fd17 	bl	8004a4c <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e1a1      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800702c:	4b2d      	ldr	r3, [pc, #180]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0f0      	beq.n	800701a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007038:	4b2a      	ldr	r3, [pc, #168]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	4927      	ldr	r1, [pc, #156]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8007048:	4313      	orrs	r3, r2
 800704a:	600b      	str	r3, [r1, #0]
 800704c:	e015      	b.n	800707a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800704e:	4b26      	ldr	r3, [pc, #152]	; (80070e8 <HAL_RCC_OscConfig+0x270>)
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007054:	f7fd fcfa 	bl	8004a4c <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800705c:	f7fd fcf6 	bl	8004a4c <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e180      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800706e:	4b1d      	ldr	r3, [pc, #116]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1f0      	bne.n	800705c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d03a      	beq.n	80070fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d019      	beq.n	80070c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800708e:	4b17      	ldr	r3, [pc, #92]	; (80070ec <HAL_RCC_OscConfig+0x274>)
 8007090:	2201      	movs	r2, #1
 8007092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007094:	f7fd fcda 	bl	8004a4c <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800709c:	f7fd fcd6 	bl	8004a4c <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e160      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070ae:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <HAL_RCC_OscConfig+0x26c>)
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0f0      	beq.n	800709c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80070ba:	2001      	movs	r0, #1
 80070bc:	f000 faa6 	bl	800760c <RCC_Delay>
 80070c0:	e01c      	b.n	80070fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070c2:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <HAL_RCC_OscConfig+0x274>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070c8:	f7fd fcc0 	bl	8004a4c <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070ce:	e00f      	b.n	80070f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070d0:	f7fd fcbc 	bl	8004a4c <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d908      	bls.n	80070f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e146      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
 80070e2:	bf00      	nop
 80070e4:	40021000 	.word	0x40021000
 80070e8:	42420000 	.word	0x42420000
 80070ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070f0:	4b92      	ldr	r3, [pc, #584]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e9      	bne.n	80070d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80a6 	beq.w	8007256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800710a:	2300      	movs	r3, #0
 800710c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800710e:	4b8b      	ldr	r3, [pc, #556]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10d      	bne.n	8007136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800711a:	4b88      	ldr	r3, [pc, #544]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	4a87      	ldr	r2, [pc, #540]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 8007120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007124:	61d3      	str	r3, [r2, #28]
 8007126:	4b85      	ldr	r3, [pc, #532]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800712e:	60bb      	str	r3, [r7, #8]
 8007130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007132:	2301      	movs	r3, #1
 8007134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007136:	4b82      	ldr	r3, [pc, #520]	; (8007340 <HAL_RCC_OscConfig+0x4c8>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713e:	2b00      	cmp	r3, #0
 8007140:	d118      	bne.n	8007174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007142:	4b7f      	ldr	r3, [pc, #508]	; (8007340 <HAL_RCC_OscConfig+0x4c8>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a7e      	ldr	r2, [pc, #504]	; (8007340 <HAL_RCC_OscConfig+0x4c8>)
 8007148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800714c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800714e:	f7fd fc7d 	bl	8004a4c <HAL_GetTick>
 8007152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007154:	e008      	b.n	8007168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007156:	f7fd fc79 	bl	8004a4c <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	2b64      	cmp	r3, #100	; 0x64
 8007162:	d901      	bls.n	8007168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e103      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007168:	4b75      	ldr	r3, [pc, #468]	; (8007340 <HAL_RCC_OscConfig+0x4c8>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0f0      	beq.n	8007156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d106      	bne.n	800718a <HAL_RCC_OscConfig+0x312>
 800717c:	4b6f      	ldr	r3, [pc, #444]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	4a6e      	ldr	r2, [pc, #440]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 8007182:	f043 0301 	orr.w	r3, r3, #1
 8007186:	6213      	str	r3, [r2, #32]
 8007188:	e02d      	b.n	80071e6 <HAL_RCC_OscConfig+0x36e>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10c      	bne.n	80071ac <HAL_RCC_OscConfig+0x334>
 8007192:	4b6a      	ldr	r3, [pc, #424]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	4a69      	ldr	r2, [pc, #420]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 8007198:	f023 0301 	bic.w	r3, r3, #1
 800719c:	6213      	str	r3, [r2, #32]
 800719e:	4b67      	ldr	r3, [pc, #412]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	4a66      	ldr	r2, [pc, #408]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80071a4:	f023 0304 	bic.w	r3, r3, #4
 80071a8:	6213      	str	r3, [r2, #32]
 80071aa:	e01c      	b.n	80071e6 <HAL_RCC_OscConfig+0x36e>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	2b05      	cmp	r3, #5
 80071b2:	d10c      	bne.n	80071ce <HAL_RCC_OscConfig+0x356>
 80071b4:	4b61      	ldr	r3, [pc, #388]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	4a60      	ldr	r2, [pc, #384]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80071ba:	f043 0304 	orr.w	r3, r3, #4
 80071be:	6213      	str	r3, [r2, #32]
 80071c0:	4b5e      	ldr	r3, [pc, #376]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	4a5d      	ldr	r2, [pc, #372]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80071c6:	f043 0301 	orr.w	r3, r3, #1
 80071ca:	6213      	str	r3, [r2, #32]
 80071cc:	e00b      	b.n	80071e6 <HAL_RCC_OscConfig+0x36e>
 80071ce:	4b5b      	ldr	r3, [pc, #364]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	4a5a      	ldr	r2, [pc, #360]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80071d4:	f023 0301 	bic.w	r3, r3, #1
 80071d8:	6213      	str	r3, [r2, #32]
 80071da:	4b58      	ldr	r3, [pc, #352]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	4a57      	ldr	r2, [pc, #348]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80071e0:	f023 0304 	bic.w	r3, r3, #4
 80071e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d015      	beq.n	800721a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071ee:	f7fd fc2d 	bl	8004a4c <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071f4:	e00a      	b.n	800720c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071f6:	f7fd fc29 	bl	8004a4c <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	f241 3288 	movw	r2, #5000	; 0x1388
 8007204:	4293      	cmp	r3, r2
 8007206:	d901      	bls.n	800720c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e0b1      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800720c:	4b4b      	ldr	r3, [pc, #300]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0ee      	beq.n	80071f6 <HAL_RCC_OscConfig+0x37e>
 8007218:	e014      	b.n	8007244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800721a:	f7fd fc17 	bl	8004a4c <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007220:	e00a      	b.n	8007238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007222:	f7fd fc13 	bl	8004a4c <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007230:	4293      	cmp	r3, r2
 8007232:	d901      	bls.n	8007238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e09b      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007238:	4b40      	ldr	r3, [pc, #256]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1ee      	bne.n	8007222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007244:	7dfb      	ldrb	r3, [r7, #23]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d105      	bne.n	8007256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800724a:	4b3c      	ldr	r3, [pc, #240]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	4a3b      	ldr	r2, [pc, #236]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 8007250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	2b00      	cmp	r3, #0
 800725c:	f000 8087 	beq.w	800736e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007260:	4b36      	ldr	r3, [pc, #216]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f003 030c 	and.w	r3, r3, #12
 8007268:	2b08      	cmp	r3, #8
 800726a:	d061      	beq.n	8007330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	2b02      	cmp	r3, #2
 8007272:	d146      	bne.n	8007302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007274:	4b33      	ldr	r3, [pc, #204]	; (8007344 <HAL_RCC_OscConfig+0x4cc>)
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800727a:	f7fd fbe7 	bl	8004a4c <HAL_GetTick>
 800727e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007280:	e008      	b.n	8007294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007282:	f7fd fbe3 	bl	8004a4c <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	2b02      	cmp	r3, #2
 800728e:	d901      	bls.n	8007294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e06d      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007294:	4b29      	ldr	r3, [pc, #164]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1f0      	bne.n	8007282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a8:	d108      	bne.n	80072bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80072aa:	4b24      	ldr	r3, [pc, #144]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	4921      	ldr	r1, [pc, #132]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072bc:	4b1f      	ldr	r3, [pc, #124]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a19      	ldr	r1, [r3, #32]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	430b      	orrs	r3, r1
 80072ce:	491b      	ldr	r1, [pc, #108]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072d4:	4b1b      	ldr	r3, [pc, #108]	; (8007344 <HAL_RCC_OscConfig+0x4cc>)
 80072d6:	2201      	movs	r2, #1
 80072d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072da:	f7fd fbb7 	bl	8004a4c <HAL_GetTick>
 80072de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072e0:	e008      	b.n	80072f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072e2:	f7fd fbb3 	bl	8004a4c <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d901      	bls.n	80072f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e03d      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072f4:	4b11      	ldr	r3, [pc, #68]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0f0      	beq.n	80072e2 <HAL_RCC_OscConfig+0x46a>
 8007300:	e035      	b.n	800736e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007302:	4b10      	ldr	r3, [pc, #64]	; (8007344 <HAL_RCC_OscConfig+0x4cc>)
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007308:	f7fd fba0 	bl	8004a4c <HAL_GetTick>
 800730c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800730e:	e008      	b.n	8007322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007310:	f7fd fb9c 	bl	8004a4c <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	2b02      	cmp	r3, #2
 800731c:	d901      	bls.n	8007322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e026      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007322:	4b06      	ldr	r3, [pc, #24]	; (800733c <HAL_RCC_OscConfig+0x4c4>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1f0      	bne.n	8007310 <HAL_RCC_OscConfig+0x498>
 800732e:	e01e      	b.n	800736e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d107      	bne.n	8007348 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e019      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
 800733c:	40021000 	.word	0x40021000
 8007340:	40007000 	.word	0x40007000
 8007344:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007348:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <HAL_RCC_OscConfig+0x500>)
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	429a      	cmp	r2, r3
 800735a:	d106      	bne.n	800736a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007366:	429a      	cmp	r2, r3
 8007368:	d001      	beq.n	800736e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e000      	b.n	8007370 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	40021000 	.word	0x40021000

0800737c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e0d0      	b.n	8007532 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007390:	4b6a      	ldr	r3, [pc, #424]	; (800753c <HAL_RCC_ClockConfig+0x1c0>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0307 	and.w	r3, r3, #7
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	429a      	cmp	r2, r3
 800739c:	d910      	bls.n	80073c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800739e:	4b67      	ldr	r3, [pc, #412]	; (800753c <HAL_RCC_ClockConfig+0x1c0>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f023 0207 	bic.w	r2, r3, #7
 80073a6:	4965      	ldr	r1, [pc, #404]	; (800753c <HAL_RCC_ClockConfig+0x1c0>)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ae:	4b63      	ldr	r3, [pc, #396]	; (800753c <HAL_RCC_ClockConfig+0x1c0>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d001      	beq.n	80073c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e0b8      	b.n	8007532 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d020      	beq.n	800740e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0304 	and.w	r3, r3, #4
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073d8:	4b59      	ldr	r3, [pc, #356]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	4a58      	ldr	r2, [pc, #352]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 80073de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80073e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0308 	and.w	r3, r3, #8
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d005      	beq.n	80073fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073f0:	4b53      	ldr	r3, [pc, #332]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	4a52      	ldr	r2, [pc, #328]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 80073f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80073fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073fc:	4b50      	ldr	r3, [pc, #320]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	494d      	ldr	r1, [pc, #308]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 800740a:	4313      	orrs	r3, r2
 800740c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d040      	beq.n	800749c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d107      	bne.n	8007432 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007422:	4b47      	ldr	r3, [pc, #284]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d115      	bne.n	800745a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e07f      	b.n	8007532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	2b02      	cmp	r3, #2
 8007438:	d107      	bne.n	800744a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800743a:	4b41      	ldr	r3, [pc, #260]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d109      	bne.n	800745a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e073      	b.n	8007532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800744a:	4b3d      	ldr	r3, [pc, #244]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e06b      	b.n	8007532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800745a:	4b39      	ldr	r3, [pc, #228]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f023 0203 	bic.w	r2, r3, #3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	4936      	ldr	r1, [pc, #216]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 8007468:	4313      	orrs	r3, r2
 800746a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800746c:	f7fd faee 	bl	8004a4c <HAL_GetTick>
 8007470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007472:	e00a      	b.n	800748a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007474:	f7fd faea 	bl	8004a4c <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007482:	4293      	cmp	r3, r2
 8007484:	d901      	bls.n	800748a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e053      	b.n	8007532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800748a:	4b2d      	ldr	r3, [pc, #180]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f003 020c 	and.w	r2, r3, #12
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	429a      	cmp	r2, r3
 800749a:	d1eb      	bne.n	8007474 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800749c:	4b27      	ldr	r3, [pc, #156]	; (800753c <HAL_RCC_ClockConfig+0x1c0>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0307 	and.w	r3, r3, #7
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d210      	bcs.n	80074cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074aa:	4b24      	ldr	r3, [pc, #144]	; (800753c <HAL_RCC_ClockConfig+0x1c0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f023 0207 	bic.w	r2, r3, #7
 80074b2:	4922      	ldr	r1, [pc, #136]	; (800753c <HAL_RCC_ClockConfig+0x1c0>)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ba:	4b20      	ldr	r3, [pc, #128]	; (800753c <HAL_RCC_ClockConfig+0x1c0>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d001      	beq.n	80074cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e032      	b.n	8007532 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d008      	beq.n	80074ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074d8:	4b19      	ldr	r3, [pc, #100]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	4916      	ldr	r1, [pc, #88]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0308 	and.w	r3, r3, #8
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80074f6:	4b12      	ldr	r3, [pc, #72]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	490e      	ldr	r1, [pc, #56]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 8007506:	4313      	orrs	r3, r2
 8007508:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800750a:	f000 f821 	bl	8007550 <HAL_RCC_GetSysClockFreq>
 800750e:	4602      	mov	r2, r0
 8007510:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <HAL_RCC_ClockConfig+0x1c4>)
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	091b      	lsrs	r3, r3, #4
 8007516:	f003 030f 	and.w	r3, r3, #15
 800751a:	490a      	ldr	r1, [pc, #40]	; (8007544 <HAL_RCC_ClockConfig+0x1c8>)
 800751c:	5ccb      	ldrb	r3, [r1, r3]
 800751e:	fa22 f303 	lsr.w	r3, r2, r3
 8007522:	4a09      	ldr	r2, [pc, #36]	; (8007548 <HAL_RCC_ClockConfig+0x1cc>)
 8007524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007526:	4b09      	ldr	r3, [pc, #36]	; (800754c <HAL_RCC_ClockConfig+0x1d0>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f7fd fa4c 	bl	80049c8 <HAL_InitTick>

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	40022000 	.word	0x40022000
 8007540:	40021000 	.word	0x40021000
 8007544:	0800e224 	.word	0x0800e224
 8007548:	2000000c 	.word	0x2000000c
 800754c:	20000010 	.word	0x20000010

08007550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007550:	b490      	push	{r4, r7}
 8007552:	b08a      	sub	sp, #40	; 0x28
 8007554:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007556:	4b29      	ldr	r3, [pc, #164]	; (80075fc <HAL_RCC_GetSysClockFreq+0xac>)
 8007558:	1d3c      	adds	r4, r7, #4
 800755a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800755c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007560:	f240 2301 	movw	r3, #513	; 0x201
 8007564:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	61fb      	str	r3, [r7, #28]
 800756a:	2300      	movs	r3, #0
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	2300      	movs	r3, #0
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800757a:	4b21      	ldr	r3, [pc, #132]	; (8007600 <HAL_RCC_GetSysClockFreq+0xb0>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	f003 030c 	and.w	r3, r3, #12
 8007586:	2b04      	cmp	r3, #4
 8007588:	d002      	beq.n	8007590 <HAL_RCC_GetSysClockFreq+0x40>
 800758a:	2b08      	cmp	r3, #8
 800758c:	d003      	beq.n	8007596 <HAL_RCC_GetSysClockFreq+0x46>
 800758e:	e02b      	b.n	80075e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007590:	4b1c      	ldr	r3, [pc, #112]	; (8007604 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007592:	623b      	str	r3, [r7, #32]
      break;
 8007594:	e02b      	b.n	80075ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	0c9b      	lsrs	r3, r3, #18
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	3328      	adds	r3, #40	; 0x28
 80075a0:	443b      	add	r3, r7
 80075a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80075a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d012      	beq.n	80075d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80075b2:	4b13      	ldr	r3, [pc, #76]	; (8007600 <HAL_RCC_GetSysClockFreq+0xb0>)
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	0c5b      	lsrs	r3, r3, #17
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	3328      	adds	r3, #40	; 0x28
 80075be:	443b      	add	r3, r7
 80075c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80075c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	4a0e      	ldr	r2, [pc, #56]	; (8007604 <HAL_RCC_GetSysClockFreq+0xb4>)
 80075ca:	fb03 f202 	mul.w	r2, r3, r2
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d4:	627b      	str	r3, [r7, #36]	; 0x24
 80075d6:	e004      	b.n	80075e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	4a0b      	ldr	r2, [pc, #44]	; (8007608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075dc:	fb02 f303 	mul.w	r3, r2, r3
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	623b      	str	r3, [r7, #32]
      break;
 80075e6:	e002      	b.n	80075ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80075e8:	4b06      	ldr	r3, [pc, #24]	; (8007604 <HAL_RCC_GetSysClockFreq+0xb4>)
 80075ea:	623b      	str	r3, [r7, #32]
      break;
 80075ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075ee:	6a3b      	ldr	r3, [r7, #32]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3728      	adds	r7, #40	; 0x28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bc90      	pop	{r4, r7}
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	0800e1cc 	.word	0x0800e1cc
 8007600:	40021000 	.word	0x40021000
 8007604:	007a1200 	.word	0x007a1200
 8007608:	003d0900 	.word	0x003d0900

0800760c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007614:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <RCC_Delay+0x34>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a0a      	ldr	r2, [pc, #40]	; (8007644 <RCC_Delay+0x38>)
 800761a:	fba2 2303 	umull	r2, r3, r2, r3
 800761e:	0a5b      	lsrs	r3, r3, #9
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	fb02 f303 	mul.w	r3, r2, r3
 8007626:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007628:	bf00      	nop
  }
  while (Delay --);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	1e5a      	subs	r2, r3, #1
 800762e:	60fa      	str	r2, [r7, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1f9      	bne.n	8007628 <RCC_Delay+0x1c>
}
 8007634:	bf00      	nop
 8007636:	bf00      	nop
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	bc80      	pop	{r7}
 800763e:	4770      	bx	lr
 8007640:	2000000c 	.word	0x2000000c
 8007644:	10624dd3 	.word	0x10624dd3

08007648 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	613b      	str	r3, [r7, #16]
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	d07d      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007664:	2300      	movs	r3, #0
 8007666:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007668:	4b4f      	ldr	r3, [pc, #316]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10d      	bne.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007674:	4b4c      	ldr	r3, [pc, #304]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	4a4b      	ldr	r2, [pc, #300]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800767a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800767e:	61d3      	str	r3, [r2, #28]
 8007680:	4b49      	ldr	r3, [pc, #292]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007688:	60bb      	str	r3, [r7, #8]
 800768a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800768c:	2301      	movs	r3, #1
 800768e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007690:	4b46      	ldr	r3, [pc, #280]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007698:	2b00      	cmp	r3, #0
 800769a:	d118      	bne.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800769c:	4b43      	ldr	r3, [pc, #268]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a42      	ldr	r2, [pc, #264]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076a8:	f7fd f9d0 	bl	8004a4c <HAL_GetTick>
 80076ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076ae:	e008      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076b0:	f7fd f9cc 	bl	8004a4c <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b64      	cmp	r3, #100	; 0x64
 80076bc:	d901      	bls.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e06d      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076c2:	4b3a      	ldr	r3, [pc, #232]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d0f0      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076ce:	4b36      	ldr	r3, [pc, #216]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d02e      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d027      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076ec:	4b2e      	ldr	r3, [pc, #184]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076f6:	4b2e      	ldr	r3, [pc, #184]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80076f8:	2201      	movs	r2, #1
 80076fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076fc:	4b2c      	ldr	r3, [pc, #176]	; (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007702:	4a29      	ldr	r2, [pc, #164]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	2b00      	cmp	r3, #0
 8007710:	d014      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007712:	f7fd f99b 	bl	8004a4c <HAL_GetTick>
 8007716:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007718:	e00a      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800771a:	f7fd f997 	bl	8004a4c <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	f241 3288 	movw	r2, #5000	; 0x1388
 8007728:	4293      	cmp	r3, r2
 800772a:	d901      	bls.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e036      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007730:	4b1d      	ldr	r3, [pc, #116]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007732:	6a1b      	ldr	r3, [r3, #32]
 8007734:	f003 0302 	and.w	r3, r3, #2
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0ee      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800773c:	4b1a      	ldr	r3, [pc, #104]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	4917      	ldr	r1, [pc, #92]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800774a:	4313      	orrs	r3, r2
 800774c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d105      	bne.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007754:	4b14      	ldr	r3, [pc, #80]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	4a13      	ldr	r2, [pc, #76]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800775a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800775e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d008      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800776c:	4b0e      	ldr	r3, [pc, #56]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	490b      	ldr	r1, [pc, #44]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800777a:	4313      	orrs	r3, r2
 800777c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0310 	and.w	r3, r3, #16
 8007786:	2b00      	cmp	r3, #0
 8007788:	d008      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800778a:	4b07      	ldr	r3, [pc, #28]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	4904      	ldr	r1, [pc, #16]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007798:	4313      	orrs	r3, r2
 800779a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	40021000 	.word	0x40021000
 80077ac:	40007000 	.word	0x40007000
 80077b0:	42420440 	.word	0x42420440

080077b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e076      	b.n	80078b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d108      	bne.n	80077e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077d6:	d009      	beq.n	80077ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	61da      	str	r2, [r3, #28]
 80077de:	e005      	b.n	80077ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d106      	bne.n	800780c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7fc fe72 	bl	80044f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007822:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007834:	431a      	orrs	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	431a      	orrs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	431a      	orrs	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800785c:	431a      	orrs	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007870:	ea42 0103 	orr.w	r1, r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	0c1a      	lsrs	r2, r3, #16
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f002 0204 	and.w	r2, r2, #4
 8007892:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	69da      	ldr	r2, [r3, #28]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08c      	sub	sp, #48	; 0x30
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078ca:	2301      	movs	r3, #1
 80078cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_SPI_TransmitReceive+0x26>
 80078de:	2302      	movs	r3, #2
 80078e0:	e18a      	b.n	8007bf8 <HAL_SPI_TransmitReceive+0x33c>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078ea:	f7fd f8af 	bl	8004a4c <HAL_GetTick>
 80078ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007900:	887b      	ldrh	r3, [r7, #2]
 8007902:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007904:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007908:	2b01      	cmp	r3, #1
 800790a:	d00f      	beq.n	800792c <HAL_SPI_TransmitReceive+0x70>
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007912:	d107      	bne.n	8007924 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d103      	bne.n	8007924 <HAL_SPI_TransmitReceive+0x68>
 800791c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007920:	2b04      	cmp	r3, #4
 8007922:	d003      	beq.n	800792c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007924:	2302      	movs	r3, #2
 8007926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800792a:	e15b      	b.n	8007be4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <HAL_SPI_TransmitReceive+0x82>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <HAL_SPI_TransmitReceive+0x82>
 8007938:	887b      	ldrh	r3, [r7, #2]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d103      	bne.n	8007946 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007944:	e14e      	b.n	8007be4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b04      	cmp	r3, #4
 8007950:	d003      	beq.n	800795a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2205      	movs	r2, #5
 8007956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	887a      	ldrh	r2, [r7, #2]
 800796a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	887a      	ldrh	r2, [r7, #2]
 8007970:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	887a      	ldrh	r2, [r7, #2]
 800797c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	887a      	ldrh	r2, [r7, #2]
 8007982:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799a:	2b40      	cmp	r3, #64	; 0x40
 800799c:	d007      	beq.n	80079ae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b6:	d178      	bne.n	8007aaa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_SPI_TransmitReceive+0x10a>
 80079c0:	8b7b      	ldrh	r3, [r7, #26]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d166      	bne.n	8007a94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	881a      	ldrh	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d6:	1c9a      	adds	r2, r3, #2
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079ea:	e053      	b.n	8007a94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d11b      	bne.n	8007a32 <HAL_SPI_TransmitReceive+0x176>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d016      	beq.n	8007a32 <HAL_SPI_TransmitReceive+0x176>
 8007a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d113      	bne.n	8007a32 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0e:	881a      	ldrh	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1a:	1c9a      	adds	r2, r3, #2
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	3b01      	subs	r3, #1
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d119      	bne.n	8007a74 <HAL_SPI_TransmitReceive+0x1b8>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d014      	beq.n	8007a74 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	b292      	uxth	r2, r2
 8007a56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5c:	1c9a      	adds	r2, r3, #2
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a70:	2301      	movs	r3, #1
 8007a72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a74:	f7fc ffea 	bl	8004a4c <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d807      	bhi.n	8007a94 <HAL_SPI_TransmitReceive+0x1d8>
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8a:	d003      	beq.n	8007a94 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a92:	e0a7      	b.n	8007be4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1a6      	bne.n	80079ec <HAL_SPI_TransmitReceive+0x130>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1a1      	bne.n	80079ec <HAL_SPI_TransmitReceive+0x130>
 8007aa8:	e07c      	b.n	8007ba4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <HAL_SPI_TransmitReceive+0x1fc>
 8007ab2:	8b7b      	ldrh	r3, [r7, #26]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d16b      	bne.n	8007b90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	7812      	ldrb	r2, [r2, #0]
 8007ac4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ade:	e057      	b.n	8007b90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d11c      	bne.n	8007b28 <HAL_SPI_TransmitReceive+0x26c>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d017      	beq.n	8007b28 <HAL_SPI_TransmitReceive+0x26c>
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d114      	bne.n	8007b28 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	330c      	adds	r3, #12
 8007b08:	7812      	ldrb	r2, [r2, #0]
 8007b0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b10:	1c5a      	adds	r2, r3, #1
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d119      	bne.n	8007b6a <HAL_SPI_TransmitReceive+0x2ae>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d014      	beq.n	8007b6a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4a:	b2d2      	uxtb	r2, r2
 8007b4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b52:	1c5a      	adds	r2, r3, #1
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b66:	2301      	movs	r3, #1
 8007b68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b6a:	f7fc ff6f 	bl	8004a4c <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d803      	bhi.n	8007b82 <HAL_SPI_TransmitReceive+0x2c6>
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b80:	d102      	bne.n	8007b88 <HAL_SPI_TransmitReceive+0x2cc>
 8007b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d103      	bne.n	8007b90 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b8e:	e029      	b.n	8007be4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1a2      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x224>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d19d      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f8b1 	bl	8007d10 <SPI_EndRxTxTransaction>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d006      	beq.n	8007bc2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007bc0:	e010      	b.n	8007be4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10b      	bne.n	8007be2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bca:	2300      	movs	r3, #0
 8007bcc:	617b      	str	r3, [r7, #20]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	e000      	b.n	8007be4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007be2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3730      	adds	r7, #48	; 0x30
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b088      	sub	sp, #32
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c10:	f7fc ff1c 	bl	8004a4c <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c18:	1a9b      	subs	r3, r3, r2
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c20:	f7fc ff14 	bl	8004a4c <HAL_GetTick>
 8007c24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c26:	4b39      	ldr	r3, [pc, #228]	; (8007d0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	015b      	lsls	r3, r3, #5
 8007c2c:	0d1b      	lsrs	r3, r3, #20
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	fb02 f303 	mul.w	r3, r2, r3
 8007c34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c36:	e054      	b.n	8007ce2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3e:	d050      	beq.n	8007ce2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c40:	f7fc ff04 	bl	8004a4c <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d902      	bls.n	8007c56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d13d      	bne.n	8007cd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c6e:	d111      	bne.n	8007c94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c78:	d004      	beq.n	8007c84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c82:	d107      	bne.n	8007c94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c9c:	d10f      	bne.n	8007cbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e017      	b.n	8007d02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689a      	ldr	r2, [r3, #8]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4013      	ands	r3, r2
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	bf0c      	ite	eq
 8007cf2:	2301      	moveq	r3, #1
 8007cf4:	2300      	movne	r3, #0
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d19b      	bne.n	8007c38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3720      	adds	r7, #32
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	2000000c 	.word	0x2000000c

08007d10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af02      	add	r7, sp, #8
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2200      	movs	r2, #0
 8007d24:	2180      	movs	r1, #128	; 0x80
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f7ff ff6a 	bl	8007c00 <SPI_WaitFlagStateUntilTimeout>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d007      	beq.n	8007d42 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d36:	f043 0220 	orr.w	r2, r3, #32
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e000      	b.n	8007d44 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e041      	b.n	8007de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d106      	bne.n	8007d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7fc fc06 	bl	8004584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	f000 fa70 	bl	8008270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d001      	beq.n	8007e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e03a      	b.n	8007e7a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0201 	orr.w	r2, r2, #1
 8007e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a18      	ldr	r2, [pc, #96]	; (8007e84 <HAL_TIM_Base_Start_IT+0x98>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d00e      	beq.n	8007e44 <HAL_TIM_Base_Start_IT+0x58>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2e:	d009      	beq.n	8007e44 <HAL_TIM_Base_Start_IT+0x58>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a14      	ldr	r2, [pc, #80]	; (8007e88 <HAL_TIM_Base_Start_IT+0x9c>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d004      	beq.n	8007e44 <HAL_TIM_Base_Start_IT+0x58>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a13      	ldr	r2, [pc, #76]	; (8007e8c <HAL_TIM_Base_Start_IT+0xa0>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d111      	bne.n	8007e68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2b06      	cmp	r3, #6
 8007e54:	d010      	beq.n	8007e78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f042 0201 	orr.w	r2, r2, #1
 8007e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e66:	e007      	b.n	8007e78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0201 	orr.w	r2, r2, #1
 8007e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bc80      	pop	{r7}
 8007e82:	4770      	bx	lr
 8007e84:	40012c00 	.word	0x40012c00
 8007e88:	40000400 	.word	0x40000400
 8007e8c:	40000800 	.word	0x40000800

08007e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d122      	bne.n	8007eec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d11b      	bne.n	8007eec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f06f 0202 	mvn.w	r2, #2
 8007ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f9b1 	bl	800823a <HAL_TIM_IC_CaptureCallback>
 8007ed8:	e005      	b.n	8007ee6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f9a4 	bl	8008228 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f9b3 	bl	800824c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	f003 0304 	and.w	r3, r3, #4
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	d122      	bne.n	8007f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d11b      	bne.n	8007f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f06f 0204 	mvn.w	r2, #4
 8007f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2202      	movs	r2, #2
 8007f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f987 	bl	800823a <HAL_TIM_IC_CaptureCallback>
 8007f2c:	e005      	b.n	8007f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f97a 	bl	8008228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f989 	bl	800824c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f003 0308 	and.w	r3, r3, #8
 8007f4a:	2b08      	cmp	r3, #8
 8007f4c:	d122      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f003 0308 	and.w	r3, r3, #8
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d11b      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f06f 0208 	mvn.w	r2, #8
 8007f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2204      	movs	r2, #4
 8007f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	f003 0303 	and.w	r3, r3, #3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f95d 	bl	800823a <HAL_TIM_IC_CaptureCallback>
 8007f80:	e005      	b.n	8007f8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f950 	bl	8008228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f95f 	bl	800824c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	f003 0310 	and.w	r3, r3, #16
 8007f9e:	2b10      	cmp	r3, #16
 8007fa0:	d122      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f003 0310 	and.w	r3, r3, #16
 8007fac:	2b10      	cmp	r3, #16
 8007fae:	d11b      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f06f 0210 	mvn.w	r2, #16
 8007fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2208      	movs	r2, #8
 8007fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f933 	bl	800823a <HAL_TIM_IC_CaptureCallback>
 8007fd4:	e005      	b.n	8007fe2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f926 	bl	8008228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f935 	bl	800824c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d10e      	bne.n	8008014 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b01      	cmp	r3, #1
 8008002:	d107      	bne.n	8008014 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f06f 0201 	mvn.w	r2, #1
 800800c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7fb fa24 	bl	800345c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800801e:	2b80      	cmp	r3, #128	; 0x80
 8008020:	d10e      	bne.n	8008040 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802c:	2b80      	cmp	r3, #128	; 0x80
 800802e:	d107      	bne.n	8008040 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa77 	bl	800852e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804a:	2b40      	cmp	r3, #64	; 0x40
 800804c:	d10e      	bne.n	800806c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008058:	2b40      	cmp	r3, #64	; 0x40
 800805a:	d107      	bne.n	800806c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f8f9 	bl	800825e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f003 0320 	and.w	r3, r3, #32
 8008076:	2b20      	cmp	r3, #32
 8008078:	d10e      	bne.n	8008098 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f003 0320 	and.w	r3, r3, #32
 8008084:	2b20      	cmp	r3, #32
 8008086:	d107      	bne.n	8008098 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f06f 0220 	mvn.w	r2, #32
 8008090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fa42 	bl	800851c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008098:	bf00      	nop
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d101      	bne.n	80080b8 <HAL_TIM_ConfigClockSource+0x18>
 80080b4:	2302      	movs	r3, #2
 80080b6:	e0b3      	b.n	8008220 <HAL_TIM_ConfigClockSource+0x180>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080f0:	d03e      	beq.n	8008170 <HAL_TIM_ConfigClockSource+0xd0>
 80080f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080f6:	f200 8087 	bhi.w	8008208 <HAL_TIM_ConfigClockSource+0x168>
 80080fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080fe:	f000 8085 	beq.w	800820c <HAL_TIM_ConfigClockSource+0x16c>
 8008102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008106:	d87f      	bhi.n	8008208 <HAL_TIM_ConfigClockSource+0x168>
 8008108:	2b70      	cmp	r3, #112	; 0x70
 800810a:	d01a      	beq.n	8008142 <HAL_TIM_ConfigClockSource+0xa2>
 800810c:	2b70      	cmp	r3, #112	; 0x70
 800810e:	d87b      	bhi.n	8008208 <HAL_TIM_ConfigClockSource+0x168>
 8008110:	2b60      	cmp	r3, #96	; 0x60
 8008112:	d050      	beq.n	80081b6 <HAL_TIM_ConfigClockSource+0x116>
 8008114:	2b60      	cmp	r3, #96	; 0x60
 8008116:	d877      	bhi.n	8008208 <HAL_TIM_ConfigClockSource+0x168>
 8008118:	2b50      	cmp	r3, #80	; 0x50
 800811a:	d03c      	beq.n	8008196 <HAL_TIM_ConfigClockSource+0xf6>
 800811c:	2b50      	cmp	r3, #80	; 0x50
 800811e:	d873      	bhi.n	8008208 <HAL_TIM_ConfigClockSource+0x168>
 8008120:	2b40      	cmp	r3, #64	; 0x40
 8008122:	d058      	beq.n	80081d6 <HAL_TIM_ConfigClockSource+0x136>
 8008124:	2b40      	cmp	r3, #64	; 0x40
 8008126:	d86f      	bhi.n	8008208 <HAL_TIM_ConfigClockSource+0x168>
 8008128:	2b30      	cmp	r3, #48	; 0x30
 800812a:	d064      	beq.n	80081f6 <HAL_TIM_ConfigClockSource+0x156>
 800812c:	2b30      	cmp	r3, #48	; 0x30
 800812e:	d86b      	bhi.n	8008208 <HAL_TIM_ConfigClockSource+0x168>
 8008130:	2b20      	cmp	r3, #32
 8008132:	d060      	beq.n	80081f6 <HAL_TIM_ConfigClockSource+0x156>
 8008134:	2b20      	cmp	r3, #32
 8008136:	d867      	bhi.n	8008208 <HAL_TIM_ConfigClockSource+0x168>
 8008138:	2b00      	cmp	r3, #0
 800813a:	d05c      	beq.n	80081f6 <HAL_TIM_ConfigClockSource+0x156>
 800813c:	2b10      	cmp	r3, #16
 800813e:	d05a      	beq.n	80081f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008140:	e062      	b.n	8008208 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6818      	ldr	r0, [r3, #0]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6899      	ldr	r1, [r3, #8]
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	f000 f966 	bl	8008422 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008164:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	609a      	str	r2, [r3, #8]
      break;
 800816e:	e04e      	b.n	800820e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6818      	ldr	r0, [r3, #0]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	6899      	ldr	r1, [r3, #8]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f000 f94f 	bl	8008422 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689a      	ldr	r2, [r3, #8]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008192:	609a      	str	r2, [r3, #8]
      break;
 8008194:	e03b      	b.n	800820e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6818      	ldr	r0, [r3, #0]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	6859      	ldr	r1, [r3, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	461a      	mov	r2, r3
 80081a4:	f000 f8c6 	bl	8008334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2150      	movs	r1, #80	; 0x50
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 f91d 	bl	80083ee <TIM_ITRx_SetConfig>
      break;
 80081b4:	e02b      	b.n	800820e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	6859      	ldr	r1, [r3, #4]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f000 f8e4 	bl	8008390 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2160      	movs	r1, #96	; 0x60
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 f90d 	bl	80083ee <TIM_ITRx_SetConfig>
      break;
 80081d4:	e01b      	b.n	800820e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6818      	ldr	r0, [r3, #0]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	6859      	ldr	r1, [r3, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	461a      	mov	r2, r3
 80081e4:	f000 f8a6 	bl	8008334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2140      	movs	r1, #64	; 0x40
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 f8fd 	bl	80083ee <TIM_ITRx_SetConfig>
      break;
 80081f4:	e00b      	b.n	800820e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4619      	mov	r1, r3
 8008200:	4610      	mov	r0, r2
 8008202:	f000 f8f4 	bl	80083ee <TIM_ITRx_SetConfig>
        break;
 8008206:	e002      	b.n	800820e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008208:	bf00      	nop
 800820a:	e000      	b.n	800820e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800820c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	bc80      	pop	{r7}
 8008238:	4770      	bx	lr

0800823a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr

0800824c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr

0800825e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800825e:	b480      	push	{r7}
 8008260:	b083      	sub	sp, #12
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008266:	bf00      	nop
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	bc80      	pop	{r7}
 800826e:	4770      	bx	lr

08008270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a29      	ldr	r2, [pc, #164]	; (8008328 <TIM_Base_SetConfig+0xb8>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d00b      	beq.n	80082a0 <TIM_Base_SetConfig+0x30>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800828e:	d007      	beq.n	80082a0 <TIM_Base_SetConfig+0x30>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a26      	ldr	r2, [pc, #152]	; (800832c <TIM_Base_SetConfig+0xbc>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d003      	beq.n	80082a0 <TIM_Base_SetConfig+0x30>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a25      	ldr	r2, [pc, #148]	; (8008330 <TIM_Base_SetConfig+0xc0>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d108      	bne.n	80082b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a1c      	ldr	r2, [pc, #112]	; (8008328 <TIM_Base_SetConfig+0xb8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d00b      	beq.n	80082d2 <TIM_Base_SetConfig+0x62>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c0:	d007      	beq.n	80082d2 <TIM_Base_SetConfig+0x62>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a19      	ldr	r2, [pc, #100]	; (800832c <TIM_Base_SetConfig+0xbc>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d003      	beq.n	80082d2 <TIM_Base_SetConfig+0x62>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a18      	ldr	r2, [pc, #96]	; (8008330 <TIM_Base_SetConfig+0xc0>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d108      	bne.n	80082e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a07      	ldr	r2, [pc, #28]	; (8008328 <TIM_Base_SetConfig+0xb8>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d103      	bne.n	8008318 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	691a      	ldr	r2, [r3, #16]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	615a      	str	r2, [r3, #20]
}
 800831e:	bf00      	nop
 8008320:	3714      	adds	r7, #20
 8008322:	46bd      	mov	sp, r7
 8008324:	bc80      	pop	{r7}
 8008326:	4770      	bx	lr
 8008328:	40012c00 	.word	0x40012c00
 800832c:	40000400 	.word	0x40000400
 8008330:	40000800 	.word	0x40000800

08008334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	f023 0201 	bic.w	r2, r3, #1
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800835e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	4313      	orrs	r3, r2
 8008368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f023 030a 	bic.w	r3, r3, #10
 8008370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4313      	orrs	r3, r2
 8008378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	621a      	str	r2, [r3, #32]
}
 8008386:	bf00      	nop
 8008388:	371c      	adds	r7, #28
 800838a:	46bd      	mov	sp, r7
 800838c:	bc80      	pop	{r7}
 800838e:	4770      	bx	lr

08008390 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008390:	b480      	push	{r7}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	f023 0210 	bic.w	r2, r3, #16
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	031b      	lsls	r3, r3, #12
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	011b      	lsls	r3, r3, #4
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	621a      	str	r2, [r3, #32]
}
 80083e4:	bf00      	nop
 80083e6:	371c      	adds	r7, #28
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bc80      	pop	{r7}
 80083ec:	4770      	bx	lr

080083ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b085      	sub	sp, #20
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	4313      	orrs	r3, r2
 800840c:	f043 0307 	orr.w	r3, r3, #7
 8008410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	609a      	str	r2, [r3, #8]
}
 8008418:	bf00      	nop
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr

08008422 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008422:	b480      	push	{r7}
 8008424:	b087      	sub	sp, #28
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	607a      	str	r2, [r7, #4]
 800842e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800843c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	021a      	lsls	r2, r3, #8
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	431a      	orrs	r2, r3
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	4313      	orrs	r3, r2
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	4313      	orrs	r3, r2
 800844e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	609a      	str	r2, [r3, #8]
}
 8008456:	bf00      	nop
 8008458:	371c      	adds	r7, #28
 800845a:	46bd      	mov	sp, r7
 800845c:	bc80      	pop	{r7}
 800845e:	4770      	bx	lr

08008460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008470:	2b01      	cmp	r3, #1
 8008472:	d101      	bne.n	8008478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008474:	2302      	movs	r3, #2
 8008476:	e046      	b.n	8008506 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2202      	movs	r2, #2
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a16      	ldr	r2, [pc, #88]	; (8008510 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00e      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c4:	d009      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a12      	ldr	r2, [pc, #72]	; (8008514 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d004      	beq.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a10      	ldr	r2, [pc, #64]	; (8008518 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d10c      	bne.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	bc80      	pop	{r7}
 800850e:	4770      	bx	lr
 8008510:	40012c00 	.word	0x40012c00
 8008514:	40000400 	.word	0x40000400
 8008518:	40000800 	.word	0x40000800

0800851c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	bc80      	pop	{r7}
 800852c:	4770      	bx	lr

0800852e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800852e:	b480      	push	{r7}
 8008530:	b083      	sub	sp, #12
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008536:	bf00      	nop
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	bc80      	pop	{r7}
 800853e:	4770      	bx	lr

08008540 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008540:	b084      	sub	sp, #16
 8008542:	b480      	push	{r7}
 8008544:	b083      	sub	sp, #12
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	f107 0014 	add.w	r0, r7, #20
 800854e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	b004      	add	sp, #16
 800855e:	4770      	bx	lr

08008560 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008570:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008574:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	b29a      	uxth	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	bc80      	pop	{r7}
 800858a:	4770      	bx	lr

0800858c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008594:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008598:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	43db      	mvns	r3, r3
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	4013      	ands	r3, r2
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bc80      	pop	{r7}
 80085be:	4770      	bx	lr

080085c0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bc80      	pop	{r7}
 80085d6:	4770      	bx	lr

080085d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80085d8:	b084      	sub	sp, #16
 80085da:	b480      	push	{r7}
 80085dc:	b083      	sub	sp, #12
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	f107 0014 	add.w	r0, r7, #20
 80085e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	bc80      	pop	{r7}
 8008614:	b004      	add	sp, #16
 8008616:	4770      	bx	lr

08008618 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008618:	b480      	push	{r7}
 800861a:	b09b      	sub	sp, #108	; 0x6c
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	b29b      	uxth	r3, r3
 8008636:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800863a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	78db      	ldrb	r3, [r3, #3]
 8008646:	2b03      	cmp	r3, #3
 8008648:	d81f      	bhi.n	800868a <USB_ActivateEndpoint+0x72>
 800864a:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <USB_ActivateEndpoint+0x38>)
 800864c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008650:	08008661 	.word	0x08008661
 8008654:	0800867d 	.word	0x0800867d
 8008658:	08008693 	.word	0x08008693
 800865c:	0800866f 	.word	0x0800866f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008660:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008664:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008668:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800866c:	e012      	b.n	8008694 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800866e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008672:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008676:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800867a:	e00b      	b.n	8008694 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800867c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008680:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008684:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008688:	e004      	b.n	8008694 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8008690:	e000      	b.n	8008694 <USB_ActivateEndpoint+0x7c>
      break;
 8008692:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	441a      	add	r2, r3
 800869e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80086a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	4313      	orrs	r3, r2
 80086d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	441a      	add	r2, r3
 80086e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80086e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	7b1b      	ldrb	r3, [r3, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f040 8149 	bne.w	8008998 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	785b      	ldrb	r3, [r3, #1]
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 8084 	beq.w	8008818 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	617b      	str	r3, [r7, #20]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800871a:	b29b      	uxth	r3, r3
 800871c:	461a      	mov	r2, r3
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	4413      	add	r3, r2
 8008722:	617b      	str	r3, [r7, #20]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	011a      	lsls	r2, r3, #4
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008732:	613b      	str	r3, [r7, #16]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	88db      	ldrh	r3, [r3, #6]
 8008738:	085b      	lsrs	r3, r3, #1
 800873a:	b29b      	uxth	r3, r3
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	b29a      	uxth	r2, r3
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	81fb      	strh	r3, [r7, #14]
 8008752:	89fb      	ldrh	r3, [r7, #14]
 8008754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008758:	2b00      	cmp	r3, #0
 800875a:	d01b      	beq.n	8008794 <USB_ActivateEndpoint+0x17c>
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	b29b      	uxth	r3, r3
 800876a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800876e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008772:	81bb      	strh	r3, [r7, #12]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	441a      	add	r2, r3
 800877e:	89bb      	ldrh	r3, [r7, #12]
 8008780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800878c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008790:	b29b      	uxth	r3, r3
 8008792:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	78db      	ldrb	r3, [r3, #3]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d020      	beq.n	80087de <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	881b      	ldrh	r3, [r3, #0]
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087b2:	813b      	strh	r3, [r7, #8]
 80087b4:	893b      	ldrh	r3, [r7, #8]
 80087b6:	f083 0320 	eor.w	r3, r3, #32
 80087ba:	813b      	strh	r3, [r7, #8]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	441a      	add	r2, r3
 80087c6:	893b      	ldrh	r3, [r7, #8]
 80087c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d8:	b29b      	uxth	r3, r3
 80087da:	8013      	strh	r3, [r2, #0]
 80087dc:	e27f      	b.n	8008cde <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087f4:	817b      	strh	r3, [r7, #10]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	441a      	add	r2, r3
 8008800:	897b      	ldrh	r3, [r7, #10]
 8008802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800880a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800880e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008812:	b29b      	uxth	r3, r3
 8008814:	8013      	strh	r3, [r2, #0]
 8008816:	e262      	b.n	8008cde <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008822:	b29b      	uxth	r3, r3
 8008824:	461a      	mov	r2, r3
 8008826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008828:	4413      	add	r3, r2
 800882a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	011a      	lsls	r2, r3, #4
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	4413      	add	r3, r2
 8008836:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800883a:	62bb      	str	r3, [r7, #40]	; 0x28
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	88db      	ldrh	r3, [r3, #6]
 8008840:	085b      	lsrs	r3, r3, #1
 8008842:	b29b      	uxth	r3, r3
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	b29a      	uxth	r2, r3
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008856:	b29b      	uxth	r3, r3
 8008858:	461a      	mov	r2, r3
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	4413      	add	r3, r2
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	011a      	lsls	r2, r3, #4
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	4413      	add	r3, r2
 800886a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800886e:	623b      	str	r3, [r7, #32]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d112      	bne.n	800889e <USB_ActivateEndpoint+0x286>
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	b29b      	uxth	r3, r3
 800887e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008882:	b29a      	uxth	r2, r3
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	801a      	strh	r2, [r3, #0]
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	b29b      	uxth	r3, r3
 800888e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008896:	b29a      	uxth	r2, r3
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	801a      	strh	r2, [r3, #0]
 800889c:	e02f      	b.n	80088fe <USB_ActivateEndpoint+0x2e6>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	2b3e      	cmp	r3, #62	; 0x3e
 80088a4:	d813      	bhi.n	80088ce <USB_ActivateEndpoint+0x2b6>
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	085b      	lsrs	r3, r3, #1
 80088ac:	663b      	str	r3, [r7, #96]	; 0x60
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <USB_ActivateEndpoint+0x2a8>
 80088ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088bc:	3301      	adds	r3, #1
 80088be:	663b      	str	r3, [r7, #96]	; 0x60
 80088c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	029b      	lsls	r3, r3, #10
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	801a      	strh	r2, [r3, #0]
 80088cc:	e017      	b.n	80088fe <USB_ActivateEndpoint+0x2e6>
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	095b      	lsrs	r3, r3, #5
 80088d4:	663b      	str	r3, [r7, #96]	; 0x60
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	f003 031f 	and.w	r3, r3, #31
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d102      	bne.n	80088e8 <USB_ActivateEndpoint+0x2d0>
 80088e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088e4:	3b01      	subs	r3, #1
 80088e6:	663b      	str	r3, [r7, #96]	; 0x60
 80088e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	029b      	lsls	r3, r3, #10
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	83fb      	strh	r3, [r7, #30]
 800890c:	8bfb      	ldrh	r3, [r7, #30]
 800890e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d01b      	beq.n	800894e <USB_ActivateEndpoint+0x336>
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	b29b      	uxth	r3, r3
 8008924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892c:	83bb      	strh	r3, [r7, #28]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	441a      	add	r2, r3
 8008938:	8bbb      	ldrh	r3, [r7, #28]
 800893a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800893e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008942:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800894a:	b29b      	uxth	r3, r3
 800894c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4413      	add	r3, r2
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	b29b      	uxth	r3, r3
 800895c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008964:	837b      	strh	r3, [r7, #26]
 8008966:	8b7b      	ldrh	r3, [r7, #26]
 8008968:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800896c:	837b      	strh	r3, [r7, #26]
 800896e:	8b7b      	ldrh	r3, [r7, #26]
 8008970:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008974:	837b      	strh	r3, [r7, #26]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	441a      	add	r2, r3
 8008980:	8b7b      	ldrh	r3, [r7, #26]
 8008982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800898a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800898e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008992:	b29b      	uxth	r3, r3
 8008994:	8013      	strh	r3, [r2, #0]
 8008996:	e1a2      	b.n	8008cde <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	441a      	add	r2, r3
 80089bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80089c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089c8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80089cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089de:	b29b      	uxth	r3, r3
 80089e0:	461a      	mov	r2, r3
 80089e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089e4:	4413      	add	r3, r2
 80089e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	011a      	lsls	r2, r3, #4
 80089ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089f6:	657b      	str	r3, [r7, #84]	; 0x54
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	891b      	ldrh	r3, [r3, #8]
 80089fc:	085b      	lsrs	r3, r3, #1
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a06:	801a      	strh	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	461a      	mov	r2, r3
 8008a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a18:	4413      	add	r3, r2
 8008a1a:	653b      	str	r3, [r7, #80]	; 0x50
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	011a      	lsls	r2, r3, #4
 8008a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	895b      	ldrh	r3, [r3, #10]
 8008a30:	085b      	lsrs	r3, r3, #1
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a3a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	785b      	ldrb	r3, [r3, #1]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f040 8091 	bne.w	8008b68 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008a54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d01b      	beq.n	8008a96 <USB_ActivateEndpoint+0x47e>
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a74:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	441a      	add	r2, r3
 8008a80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	873b      	strh	r3, [r7, #56]	; 0x38
 8008aa4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d01b      	beq.n	8008ae6 <USB_ActivateEndpoint+0x4ce>
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	881b      	ldrh	r3, [r3, #0]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	441a      	add	r2, r3
 8008ad0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ade:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008afe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008b00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b04:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008b06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008b08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b0c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	441a      	add	r2, r3
 8008b18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	881b      	ldrh	r3, [r3, #0]
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b44:	867b      	strh	r3, [r7, #50]	; 0x32
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	441a      	add	r2, r3
 8008b50:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	8013      	strh	r3, [r2, #0]
 8008b66:	e0ba      	b.n	8008cde <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008b78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d01d      	beq.n	8008bc0 <USB_ActivateEndpoint+0x5a8>
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	441a      	add	r2, r3
 8008ba8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008bd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d01d      	beq.n	8008c18 <USB_ActivateEndpoint+0x600>
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bf2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	441a      	add	r2, r3
 8008c00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	78db      	ldrb	r3, [r3, #3]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d024      	beq.n	8008c6a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008c3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008c3e:	f083 0320 	eor.w	r3, r3, #32
 8008c42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	441a      	add	r2, r3
 8008c50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	8013      	strh	r3, [r2, #0]
 8008c68:	e01d      	b.n	8008ca6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	441a      	add	r2, r3
 8008c8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cbc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	441a      	add	r2, r3
 8008cc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008cde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	376c      	adds	r7, #108	; 0x6c
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bc80      	pop	{r7}
 8008cea:	4770      	bx	lr

08008cec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b08d      	sub	sp, #52	; 0x34
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	7b1b      	ldrb	r3, [r3, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f040 808e 	bne.w	8008e1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	785b      	ldrb	r3, [r3, #1]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d044      	beq.n	8008d92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	81bb      	strh	r3, [r7, #12]
 8008d16:	89bb      	ldrh	r3, [r7, #12]
 8008d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d01b      	beq.n	8008d58 <USB_DeactivateEndpoint+0x6c>
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d36:	817b      	strh	r3, [r7, #10]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	441a      	add	r2, r3
 8008d42:	897b      	ldrh	r3, [r7, #10]
 8008d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d6e:	813b      	strh	r3, [r7, #8]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	441a      	add	r2, r3
 8008d7a:	893b      	ldrh	r3, [r7, #8]
 8008d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	8013      	strh	r3, [r2, #0]
 8008d90:	e192      	b.n	80090b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	827b      	strh	r3, [r7, #18]
 8008da0:	8a7b      	ldrh	r3, [r7, #18]
 8008da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d01b      	beq.n	8008de2 <USB_DeactivateEndpoint+0xf6>
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc0:	823b      	strh	r3, [r7, #16]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	441a      	add	r2, r3
 8008dcc:	8a3b      	ldrh	r3, [r7, #16]
 8008dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4413      	add	r3, r2
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df8:	81fb      	strh	r3, [r7, #14]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	441a      	add	r2, r3
 8008e04:	89fb      	ldrh	r3, [r7, #14]
 8008e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	8013      	strh	r3, [r2, #0]
 8008e1a:	e14d      	b.n	80090b8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	785b      	ldrb	r3, [r3, #1]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f040 80a5 	bne.w	8008f70 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	843b      	strh	r3, [r7, #32]
 8008e34:	8c3b      	ldrh	r3, [r7, #32]
 8008e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d01b      	beq.n	8008e76 <USB_DeactivateEndpoint+0x18a>
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e54:	83fb      	strh	r3, [r7, #30]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	441a      	add	r2, r3
 8008e60:	8bfb      	ldrh	r3, [r7, #30]
 8008e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	83bb      	strh	r3, [r7, #28]
 8008e84:	8bbb      	ldrh	r3, [r7, #28]
 8008e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d01b      	beq.n	8008ec6 <USB_DeactivateEndpoint+0x1da>
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea4:	837b      	strh	r3, [r7, #26]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	441a      	add	r2, r3
 8008eb0:	8b7b      	ldrh	r3, [r7, #26]
 8008eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ebe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008edc:	833b      	strh	r3, [r7, #24]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	441a      	add	r2, r3
 8008ee8:	8b3b      	ldrh	r3, [r7, #24]
 8008eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ef6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f14:	82fb      	strh	r3, [r7, #22]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	441a      	add	r2, r3
 8008f20:	8afb      	ldrh	r3, [r7, #22]
 8008f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f4c:	82bb      	strh	r3, [r7, #20]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	441a      	add	r2, r3
 8008f58:	8abb      	ldrh	r3, [r7, #20]
 8008f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	8013      	strh	r3, [r2, #0]
 8008f6e:	e0a3      	b.n	80090b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008f7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d01b      	beq.n	8008fc0 <USB_DeactivateEndpoint+0x2d4>
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	441a      	add	r2, r3
 8008faa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008fce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d01b      	beq.n	8009010 <USB_DeactivateEndpoint+0x324>
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fee:	853b      	strh	r3, [r7, #40]	; 0x28
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	441a      	add	r2, r3
 8008ffa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009008:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800900c:	b29b      	uxth	r3, r3
 800900e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	881b      	ldrh	r3, [r3, #0]
 800901c:	b29b      	uxth	r3, r3
 800901e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009026:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	441a      	add	r2, r3
 8009032:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800903c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009044:	b29b      	uxth	r3, r3
 8009046:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	b29b      	uxth	r3, r3
 8009056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800905a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800905e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	441a      	add	r2, r3
 800906a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800906c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800907c:	b29b      	uxth	r3, r3
 800907e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	881b      	ldrh	r3, [r3, #0]
 800908c:	b29b      	uxth	r3, r3
 800908e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009096:	847b      	strh	r3, [r7, #34]	; 0x22
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	441a      	add	r2, r3
 80090a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3734      	adds	r7, #52	; 0x34
 80090be:	46bd      	mov	sp, r7
 80090c0:	bc80      	pop	{r7}
 80090c2:	4770      	bx	lr

080090c4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b0cc      	sub	sp, #304	; 0x130
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090d2:	6018      	str	r0, [r3, #0]
 80090d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090dc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	785b      	ldrb	r3, [r3, #1]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	f041 817d 	bne.w	800a3ea <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80090f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	699a      	ldr	r2, [r3, #24]
 80090fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	429a      	cmp	r2, r3
 800910a:	d908      	bls.n	800911e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800910c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800911c:	e007      	b.n	800912e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800911e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800912e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	7b1b      	ldrb	r3, [r3, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d152      	bne.n	80091e4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800913e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6959      	ldr	r1, [r3, #20]
 800914a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800914e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	88da      	ldrh	r2, [r3, #6]
 8009156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800915a:	b29b      	uxth	r3, r3
 800915c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009160:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009164:	6800      	ldr	r0, [r0, #0]
 8009166:	f001 ff23 	bl	800afb0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800916a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800916e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009172:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009176:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800917a:	6812      	ldr	r2, [r2, #0]
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800918c:	b29b      	uxth	r3, r3
 800918e:	4619      	mov	r1, r3
 8009190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009194:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009198:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800919c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80091a0:	6812      	ldr	r2, [r2, #0]
 80091a2:	440a      	add	r2, r1
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	011a      	lsls	r2, r3, #4
 80091b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091b8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4413      	add	r3, r2
 80091c0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80091c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	801a      	strh	r2, [r3, #0]
 80091e0:	f001 b8b5 	b.w	800a34e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80091e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	78db      	ldrb	r3, [r3, #3]
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	f040 84c6 	bne.w	8009b82 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80091f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6a1a      	ldr	r2, [r3, #32]
 8009202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	429a      	cmp	r2, r3
 8009210:	f240 8443 	bls.w	8009a9a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009218:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	b29b      	uxth	r3, r3
 8009232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800923e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009242:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800924c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	441a      	add	r2, r3
 8009258:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800925c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009264:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800926c:	b29b      	uxth	r3, r3
 800926e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	6a1a      	ldr	r2, [r3, #32]
 800927c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009280:	1ad2      	subs	r2, r2, r3
 8009282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800928e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009292:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800929c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 823e 	beq.w	8009732 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80092b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80092be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092c2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80092c6:	6812      	ldr	r2, [r2, #0]
 80092c8:	601a      	str	r2, [r3, #0]
 80092ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	785b      	ldrb	r3, [r3, #1]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f040 809a 	bne.w	8009410 <USB_EPStartXfer+0x34c>
 80092dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092e8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80092ec:	6812      	ldr	r2, [r2, #0]
 80092ee:	601a      	str	r2, [r3, #0]
 80092f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092fe:	b29b      	uxth	r3, r3
 8009300:	4619      	mov	r1, r3
 8009302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800930a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800930e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8009312:	6812      	ldr	r2, [r2, #0]
 8009314:	440a      	add	r2, r1
 8009316:	601a      	str	r2, [r3, #0]
 8009318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	011a      	lsls	r2, r3, #4
 8009326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800932a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4413      	add	r3, r2
 8009332:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800933a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800933e:	601a      	str	r2, [r3, #0]
 8009340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009344:	2b00      	cmp	r3, #0
 8009346:	d122      	bne.n	800938e <USB_EPStartXfer+0x2ca>
 8009348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800934c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	b29b      	uxth	r3, r3
 8009356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800935a:	b29a      	uxth	r2, r3
 800935c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009360:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	801a      	strh	r2, [r3, #0]
 8009368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800936c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	881b      	ldrh	r3, [r3, #0]
 8009374:	b29b      	uxth	r3, r3
 8009376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800937a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800937e:	b29a      	uxth	r2, r3
 8009380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009384:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	801a      	strh	r2, [r3, #0]
 800938c:	e079      	b.n	8009482 <USB_EPStartXfer+0x3be>
 800938e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009392:	2b3e      	cmp	r3, #62	; 0x3e
 8009394:	d81b      	bhi.n	80093ce <USB_EPStartXfer+0x30a>
 8009396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800939a:	085b      	lsrs	r3, r3, #1
 800939c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80093a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d004      	beq.n	80093b6 <USB_EPStartXfer+0x2f2>
 80093ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093b0:	3301      	adds	r3, #1
 80093b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80093b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	029b      	lsls	r3, r3, #10
 80093be:	b29a      	uxth	r2, r3
 80093c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	801a      	strh	r2, [r3, #0]
 80093cc:	e059      	b.n	8009482 <USB_EPStartXfer+0x3be>
 80093ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d2:	095b      	lsrs	r3, r3, #5
 80093d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80093d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093dc:	f003 031f 	and.w	r3, r3, #31
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d104      	bne.n	80093ee <USB_EPStartXfer+0x32a>
 80093e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093e8:	3b01      	subs	r3, #1
 80093ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80093ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	029b      	lsls	r3, r3, #10
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009400:	b29a      	uxth	r2, r3
 8009402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009406:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	801a      	strh	r2, [r3, #0]
 800940e:	e038      	b.n	8009482 <USB_EPStartXfer+0x3be>
 8009410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	785b      	ldrb	r3, [r3, #1]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d130      	bne.n	8009482 <USB_EPStartXfer+0x3be>
 8009420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800942e:	b29b      	uxth	r3, r3
 8009430:	4619      	mov	r1, r3
 8009432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009436:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800943a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800943e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8009442:	6812      	ldr	r2, [r2, #0]
 8009444:	440a      	add	r2, r1
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800944c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	011a      	lsls	r2, r3, #4
 8009456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800945a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4413      	add	r3, r2
 8009462:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800946a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009474:	b29a      	uxth	r2, r3
 8009476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800947a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009486:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	895b      	ldrh	r3, [r3, #10]
 800948e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6959      	ldr	r1, [r3, #20]
 800949e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80094a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80094ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80094b0:	6800      	ldr	r0, [r0, #0]
 80094b2:	f001 fd7d 	bl	800afb0 <USB_WritePMA>
            ep->xfer_buff += len;
 80094b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	695a      	ldr	r2, [r3, #20]
 80094c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094c6:	441a      	add	r2, r3
 80094c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80094d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6a1a      	ldr	r2, [r3, #32]
 80094e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d90f      	bls.n	8009510 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80094f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6a1a      	ldr	r2, [r3, #32]
 80094fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009500:	1ad2      	subs	r2, r2, r3
 8009502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	621a      	str	r2, [r3, #32]
 800950e:	e00e      	b.n	800952e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8009510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009524:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2200      	movs	r2, #0
 800952c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800952e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	785b      	ldrb	r3, [r3, #1]
 800953a:	2b00      	cmp	r3, #0
 800953c:	f040 809a 	bne.w	8009674 <USB_EPStartXfer+0x5b0>
 8009540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009544:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009548:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800954c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009550:	6812      	ldr	r2, [r2, #0]
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009558:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009562:	b29b      	uxth	r3, r3
 8009564:	4619      	mov	r1, r3
 8009566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800956a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800956e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009572:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8009576:	6812      	ldr	r2, [r2, #0]
 8009578:	440a      	add	r2, r1
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	011a      	lsls	r2, r3, #4
 800958a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800958e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4413      	add	r3, r2
 8009596:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800959a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800959e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d122      	bne.n	80095f2 <USB_EPStartXfer+0x52e>
 80095ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	881b      	ldrh	r3, [r3, #0]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095be:	b29a      	uxth	r2, r3
 80095c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	801a      	strh	r2, [r3, #0]
 80095cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	881b      	ldrh	r3, [r3, #0]
 80095d8:	b29b      	uxth	r3, r3
 80095da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	801a      	strh	r2, [r3, #0]
 80095f0:	e083      	b.n	80096fa <USB_EPStartXfer+0x636>
 80095f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095f6:	2b3e      	cmp	r3, #62	; 0x3e
 80095f8:	d81b      	bhi.n	8009632 <USB_EPStartXfer+0x56e>
 80095fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095fe:	085b      	lsrs	r3, r3, #1
 8009600:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009608:	f003 0301 	and.w	r3, r3, #1
 800960c:	2b00      	cmp	r3, #0
 800960e:	d004      	beq.n	800961a <USB_EPStartXfer+0x556>
 8009610:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009614:	3301      	adds	r3, #1
 8009616:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800961a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800961e:	b29b      	uxth	r3, r3
 8009620:	029b      	lsls	r3, r3, #10
 8009622:	b29a      	uxth	r2, r3
 8009624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009628:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	801a      	strh	r2, [r3, #0]
 8009630:	e063      	b.n	80096fa <USB_EPStartXfer+0x636>
 8009632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009636:	095b      	lsrs	r3, r3, #5
 8009638:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800963c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009640:	f003 031f 	and.w	r3, r3, #31
 8009644:	2b00      	cmp	r3, #0
 8009646:	d104      	bne.n	8009652 <USB_EPStartXfer+0x58e>
 8009648:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800964c:	3b01      	subs	r3, #1
 800964e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009652:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009656:	b29b      	uxth	r3, r3
 8009658:	029b      	lsls	r3, r3, #10
 800965a:	b29b      	uxth	r3, r3
 800965c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009664:	b29a      	uxth	r2, r3
 8009666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800966a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	801a      	strh	r2, [r3, #0]
 8009672:	e042      	b.n	80096fa <USB_EPStartXfer+0x636>
 8009674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	785b      	ldrb	r3, [r3, #1]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d13a      	bne.n	80096fa <USB_EPStartXfer+0x636>
 8009684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009688:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800968c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009690:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009694:	6812      	ldr	r2, [r2, #0]
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800969c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	4619      	mov	r1, r3
 80096aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80096b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096b6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80096ba:	6812      	ldr	r2, [r2, #0]
 80096bc:	440a      	add	r2, r1
 80096be:	601a      	str	r2, [r3, #0]
 80096c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	011a      	lsls	r2, r3, #4
 80096ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096d2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4413      	add	r3, r2
 80096da:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80096de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80096fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	891b      	ldrh	r3, [r3, #8]
 8009706:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800970a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800970e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6959      	ldr	r1, [r3, #20]
 8009716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800971a:	b29b      	uxth	r3, r3
 800971c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009720:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009724:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009728:	6800      	ldr	r0, [r0, #0]
 800972a:	f001 fc41 	bl	800afb0 <USB_WritePMA>
 800972e:	f000 be0e 	b.w	800a34e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	785b      	ldrb	r3, [r3, #1]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d16d      	bne.n	800981e <USB_EPStartXfer+0x75a>
 8009742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009746:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	64bb      	str	r3, [r7, #72]	; 0x48
 800974e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009752:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800975c:	b29b      	uxth	r3, r3
 800975e:	461a      	mov	r2, r3
 8009760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009762:	4413      	add	r3, r2
 8009764:	64bb      	str	r3, [r7, #72]	; 0x48
 8009766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800976a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	011a      	lsls	r2, r3, #4
 8009774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009776:	4413      	add	r3, r2
 8009778:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800977c:	647b      	str	r3, [r7, #68]	; 0x44
 800977e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009782:	2b00      	cmp	r3, #0
 8009784:	d112      	bne.n	80097ac <USB_EPStartXfer+0x6e8>
 8009786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009788:	881b      	ldrh	r3, [r3, #0]
 800978a:	b29b      	uxth	r3, r3
 800978c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009790:	b29a      	uxth	r2, r3
 8009792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009794:	801a      	strh	r2, [r3, #0]
 8009796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009798:	881b      	ldrh	r3, [r3, #0]
 800979a:	b29b      	uxth	r3, r3
 800979c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a8:	801a      	strh	r2, [r3, #0]
 80097aa:	e063      	b.n	8009874 <USB_EPStartXfer+0x7b0>
 80097ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097b0:	2b3e      	cmp	r3, #62	; 0x3e
 80097b2:	d817      	bhi.n	80097e4 <USB_EPStartXfer+0x720>
 80097b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097b8:	085b      	lsrs	r3, r3, #1
 80097ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80097be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d004      	beq.n	80097d4 <USB_EPStartXfer+0x710>
 80097ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80097ce:	3301      	adds	r3, #1
 80097d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80097d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80097d8:	b29b      	uxth	r3, r3
 80097da:	029b      	lsls	r3, r3, #10
 80097dc:	b29a      	uxth	r2, r3
 80097de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e0:	801a      	strh	r2, [r3, #0]
 80097e2:	e047      	b.n	8009874 <USB_EPStartXfer+0x7b0>
 80097e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097e8:	095b      	lsrs	r3, r3, #5
 80097ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80097ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097f2:	f003 031f 	and.w	r3, r3, #31
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d104      	bne.n	8009804 <USB_EPStartXfer+0x740>
 80097fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80097fe:	3b01      	subs	r3, #1
 8009800:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009804:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009808:	b29b      	uxth	r3, r3
 800980a:	029b      	lsls	r3, r3, #10
 800980c:	b29b      	uxth	r3, r3
 800980e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009816:	b29a      	uxth	r2, r3
 8009818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800981a:	801a      	strh	r2, [r3, #0]
 800981c:	e02a      	b.n	8009874 <USB_EPStartXfer+0x7b0>
 800981e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	785b      	ldrb	r3, [r3, #1]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d122      	bne.n	8009874 <USB_EPStartXfer+0x7b0>
 800982e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009832:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	653b      	str	r3, [r7, #80]	; 0x50
 800983a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800983e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009848:	b29b      	uxth	r3, r3
 800984a:	461a      	mov	r2, r3
 800984c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800984e:	4413      	add	r3, r2
 8009850:	653b      	str	r3, [r7, #80]	; 0x50
 8009852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	011a      	lsls	r2, r3, #4
 8009860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009862:	4413      	add	r3, r2
 8009864:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009868:	64fb      	str	r3, [r7, #76]	; 0x4c
 800986a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800986e:	b29a      	uxth	r2, r3
 8009870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009872:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009878:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	891b      	ldrh	r3, [r3, #8]
 8009880:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	6959      	ldr	r1, [r3, #20]
 8009890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009894:	b29b      	uxth	r3, r3
 8009896:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800989a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800989e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80098a2:	6800      	ldr	r0, [r0, #0]
 80098a4:	f001 fb84 	bl	800afb0 <USB_WritePMA>
            ep->xfer_buff += len;
 80098a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	695a      	ldr	r2, [r3, #20]
 80098b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098b8:	441a      	add	r2, r3
 80098ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80098c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6a1a      	ldr	r2, [r3, #32]
 80098d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d90f      	bls.n	8009902 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80098e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6a1a      	ldr	r2, [r3, #32]
 80098ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098f2:	1ad2      	subs	r2, r2, r3
 80098f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	621a      	str	r2, [r3, #32]
 8009900:	e00e      	b.n	8009920 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8009902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2200      	movs	r2, #0
 800991e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009924:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	643b      	str	r3, [r7, #64]	; 0x40
 800992c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	785b      	ldrb	r3, [r3, #1]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d16d      	bne.n	8009a18 <USB_EPStartXfer+0x954>
 800993c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	63bb      	str	r3, [r7, #56]	; 0x38
 8009948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800994c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009956:	b29b      	uxth	r3, r3
 8009958:	461a      	mov	r2, r3
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	4413      	add	r3, r2
 800995e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	011a      	lsls	r2, r3, #4
 800996e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009970:	4413      	add	r3, r2
 8009972:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009976:	637b      	str	r3, [r7, #52]	; 0x34
 8009978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800997c:	2b00      	cmp	r3, #0
 800997e:	d112      	bne.n	80099a6 <USB_EPStartXfer+0x8e2>
 8009980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009982:	881b      	ldrh	r3, [r3, #0]
 8009984:	b29b      	uxth	r3, r3
 8009986:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800998a:	b29a      	uxth	r2, r3
 800998c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998e:	801a      	strh	r2, [r3, #0]
 8009990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	b29b      	uxth	r3, r3
 8009996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800999a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800999e:	b29a      	uxth	r2, r3
 80099a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a2:	801a      	strh	r2, [r3, #0]
 80099a4:	e05d      	b.n	8009a62 <USB_EPStartXfer+0x99e>
 80099a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099aa:	2b3e      	cmp	r3, #62	; 0x3e
 80099ac:	d817      	bhi.n	80099de <USB_EPStartXfer+0x91a>
 80099ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099b2:	085b      	lsrs	r3, r3, #1
 80099b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80099b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d004      	beq.n	80099ce <USB_EPStartXfer+0x90a>
 80099c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80099c8:	3301      	adds	r3, #1
 80099ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80099ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	029b      	lsls	r3, r3, #10
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099da:	801a      	strh	r2, [r3, #0]
 80099dc:	e041      	b.n	8009a62 <USB_EPStartXfer+0x99e>
 80099de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e2:	095b      	lsrs	r3, r3, #5
 80099e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80099e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ec:	f003 031f 	and.w	r3, r3, #31
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d104      	bne.n	80099fe <USB_EPStartXfer+0x93a>
 80099f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80099f8:	3b01      	subs	r3, #1
 80099fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80099fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	029b      	lsls	r3, r3, #10
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a14:	801a      	strh	r2, [r3, #0]
 8009a16:	e024      	b.n	8009a62 <USB_EPStartXfer+0x99e>
 8009a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	785b      	ldrb	r3, [r3, #1]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d11c      	bne.n	8009a62 <USB_EPStartXfer+0x99e>
 8009a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	461a      	mov	r2, r3
 8009a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a3c:	4413      	add	r3, r2
 8009a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	011a      	lsls	r2, r3, #4
 8009a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a50:	4413      	add	r3, r2
 8009a52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	895b      	ldrh	r3, [r3, #10]
 8009a6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6959      	ldr	r1, [r3, #20]
 8009a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009a88:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009a8c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009a90:	6800      	ldr	r0, [r0, #0]
 8009a92:	f001 fa8d 	bl	800afb0 <USB_WritePMA>
 8009a96:	f000 bc5a 	b.w	800a34e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ad8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ae2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	441a      	add	r2, r3
 8009aee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	461a      	mov	r2, r3
 8009b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b26:	4413      	add	r3, r2
 8009b28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	011a      	lsls	r2, r3, #4
 8009b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b40:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	891b      	ldrh	r3, [r3, #8]
 8009b58:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6959      	ldr	r1, [r3, #20]
 8009b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009b72:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009b76:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009b7a:	6800      	ldr	r0, [r0, #0]
 8009b7c:	f001 fa18 	bl	800afb0 <USB_WritePMA>
 8009b80:	e3e5      	b.n	800a34e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	881b      	ldrh	r3, [r3, #0]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ba8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	441a      	add	r2, r3
 8009bc6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6a1a      	ldr	r2, [r3, #32]
 8009bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bee:	1ad2      	subs	r2, r2, r3
 8009bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4413      	add	r3, r2
 8009c16:	881b      	ldrh	r3, [r3, #0]
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f000 81bc 	beq.w	8009f9c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	785b      	ldrb	r3, [r3, #1]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d16d      	bne.n	8009d1e <USB_EPStartXfer+0xc5a>
 8009c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	461a      	mov	r2, r3
 8009c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c62:	4413      	add	r3, r2
 8009c64:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	011a      	lsls	r2, r3, #4
 8009c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c76:	4413      	add	r3, r2
 8009c78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c7c:	677b      	str	r3, [r7, #116]	; 0x74
 8009c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d112      	bne.n	8009cac <USB_EPStartXfer+0xbe8>
 8009c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c94:	801a      	strh	r2, [r3, #0]
 8009c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ca8:	801a      	strh	r2, [r3, #0]
 8009caa:	e060      	b.n	8009d6e <USB_EPStartXfer+0xcaa>
 8009cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cb0:	2b3e      	cmp	r3, #62	; 0x3e
 8009cb2:	d817      	bhi.n	8009ce4 <USB_EPStartXfer+0xc20>
 8009cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cb8:	085b      	lsrs	r3, r3, #1
 8009cba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d004      	beq.n	8009cd4 <USB_EPStartXfer+0xc10>
 8009cca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009cce:	3301      	adds	r3, #1
 8009cd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009cd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	029b      	lsls	r3, r3, #10
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ce0:	801a      	strh	r2, [r3, #0]
 8009ce2:	e044      	b.n	8009d6e <USB_EPStartXfer+0xcaa>
 8009ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ce8:	095b      	lsrs	r3, r3, #5
 8009cea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cf2:	f003 031f 	and.w	r3, r3, #31
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d104      	bne.n	8009d04 <USB_EPStartXfer+0xc40>
 8009cfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009d04:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	029b      	lsls	r3, r3, #10
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d1a:	801a      	strh	r2, [r3, #0]
 8009d1c:	e027      	b.n	8009d6e <USB_EPStartXfer+0xcaa>
 8009d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	785b      	ldrb	r3, [r3, #1]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d11f      	bne.n	8009d6e <USB_EPStartXfer+0xcaa>
 8009d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d44:	4413      	add	r3, r2
 8009d46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	011a      	lsls	r2, r3, #4
 8009d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d6c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	895b      	ldrh	r3, [r3, #10]
 8009d7a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	6959      	ldr	r1, [r3, #20]
 8009d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009d94:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009d98:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009d9c:	6800      	ldr	r0, [r0, #0]
 8009d9e:	f001 f907 	bl	800afb0 <USB_WritePMA>
          ep->xfer_buff += len;
 8009da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	695a      	ldr	r2, [r3, #20]
 8009dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009db2:	441a      	add	r2, r3
 8009db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6a1a      	ldr	r2, [r3, #32]
 8009dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d90f      	bls.n	8009dfc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8009ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009de0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	6a1a      	ldr	r2, [r3, #32]
 8009de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dec:	1ad2      	subs	r2, r2, r3
 8009dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	621a      	str	r2, [r3, #32]
 8009dfa:	e00e      	b.n	8009e1a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8009dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2200      	movs	r2, #0
 8009e18:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 8295 	beq.w	800a34e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	785b      	ldrb	r3, [r3, #1]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d16d      	bne.n	8009f10 <USB_EPStartXfer+0xe4c>
 8009e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	461a      	mov	r2, r3
 8009e52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e54:	4413      	add	r3, r2
 8009e56:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	011a      	lsls	r2, r3, #4
 8009e66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e68:	4413      	add	r3, r2
 8009e6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e6e:	667b      	str	r3, [r7, #100]	; 0x64
 8009e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d112      	bne.n	8009e9e <USB_EPStartXfer+0xdda>
 8009e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e86:	801a      	strh	r2, [r3, #0]
 8009e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e8a:	881b      	ldrh	r3, [r3, #0]
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e9a:	801a      	strh	r2, [r3, #0]
 8009e9c:	e063      	b.n	8009f66 <USB_EPStartXfer+0xea2>
 8009e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ea2:	2b3e      	cmp	r3, #62	; 0x3e
 8009ea4:	d817      	bhi.n	8009ed6 <USB_EPStartXfer+0xe12>
 8009ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eaa:	085b      	lsrs	r3, r3, #1
 8009eac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eb4:	f003 0301 	and.w	r3, r3, #1
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d004      	beq.n	8009ec6 <USB_EPStartXfer+0xe02>
 8009ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	029b      	lsls	r3, r3, #10
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ed2:	801a      	strh	r2, [r3, #0]
 8009ed4:	e047      	b.n	8009f66 <USB_EPStartXfer+0xea2>
 8009ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eda:	095b      	lsrs	r3, r3, #5
 8009edc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ee4:	f003 031f 	and.w	r3, r3, #31
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d104      	bne.n	8009ef6 <USB_EPStartXfer+0xe32>
 8009eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	029b      	lsls	r3, r3, #10
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f0c:	801a      	strh	r2, [r3, #0]
 8009f0e:	e02a      	b.n	8009f66 <USB_EPStartXfer+0xea2>
 8009f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	785b      	ldrb	r3, [r3, #1]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d122      	bne.n	8009f66 <USB_EPStartXfer+0xea2>
 8009f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	673b      	str	r3, [r7, #112]	; 0x70
 8009f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f40:	4413      	add	r3, r2
 8009f42:	673b      	str	r3, [r7, #112]	; 0x70
 8009f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	011a      	lsls	r2, r3, #4
 8009f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f54:	4413      	add	r3, r2
 8009f56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	891b      	ldrh	r3, [r3, #8]
 8009f72:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6959      	ldr	r1, [r3, #20]
 8009f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009f8c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009f90:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009f94:	6800      	ldr	r0, [r0, #0]
 8009f96:	f001 f80b 	bl	800afb0 <USB_WritePMA>
 8009f9a:	e1d8      	b.n	800a34e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	785b      	ldrb	r3, [r3, #1]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d178      	bne.n	800a09e <USB_EPStartXfer+0xfda>
 8009fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	011a      	lsls	r2, r3, #4
 8009fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009fe8:	4413      	add	r3, r2
 8009fea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009fee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d116      	bne.n	800a028 <USB_EPStartXfer+0xf64>
 8009ffa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ffe:	881b      	ldrh	r3, [r3, #0]
 800a000:	b29b      	uxth	r3, r3
 800a002:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a006:	b29a      	uxth	r2, r3
 800a008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a00c:	801a      	strh	r2, [r3, #0]
 800a00e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	b29b      	uxth	r3, r3
 800a016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a01a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a01e:	b29a      	uxth	r2, r3
 800a020:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a024:	801a      	strh	r2, [r3, #0]
 800a026:	e06b      	b.n	800a100 <USB_EPStartXfer+0x103c>
 800a028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a02c:	2b3e      	cmp	r3, #62	; 0x3e
 800a02e:	d818      	bhi.n	800a062 <USB_EPStartXfer+0xf9e>
 800a030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a034:	085b      	lsrs	r3, r3, #1
 800a036:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a03a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	2b00      	cmp	r3, #0
 800a044:	d004      	beq.n	800a050 <USB_EPStartXfer+0xf8c>
 800a046:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a04a:	3301      	adds	r3, #1
 800a04c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a050:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a054:	b29b      	uxth	r3, r3
 800a056:	029b      	lsls	r3, r3, #10
 800a058:	b29a      	uxth	r2, r3
 800a05a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a05e:	801a      	strh	r2, [r3, #0]
 800a060:	e04e      	b.n	800a100 <USB_EPStartXfer+0x103c>
 800a062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a066:	095b      	lsrs	r3, r3, #5
 800a068:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a06c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a070:	f003 031f 	and.w	r3, r3, #31
 800a074:	2b00      	cmp	r3, #0
 800a076:	d104      	bne.n	800a082 <USB_EPStartXfer+0xfbe>
 800a078:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a07c:	3b01      	subs	r3, #1
 800a07e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a082:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a086:	b29b      	uxth	r3, r3
 800a088:	029b      	lsls	r3, r3, #10
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a094:	b29a      	uxth	r2, r3
 800a096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a09a:	801a      	strh	r2, [r3, #0]
 800a09c:	e030      	b.n	800a100 <USB_EPStartXfer+0x103c>
 800a09e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	785b      	ldrb	r3, [r3, #1]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d128      	bne.n	800a100 <USB_EPStartXfer+0x103c>
 800a0ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a0bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a0d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	011a      	lsls	r2, r3, #4
 800a0e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a0f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a0f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a0fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	891b      	ldrh	r3, [r3, #8]
 800a10c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6959      	ldr	r1, [r3, #20]
 800a11c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a120:	b29b      	uxth	r3, r3
 800a122:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a126:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a12a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a12e:	6800      	ldr	r0, [r0, #0]
 800a130:	f000 ff3e 	bl	800afb0 <USB_WritePMA>
          ep->xfer_buff += len;
 800a134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	695a      	ldr	r2, [r3, #20]
 800a140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a144:	441a      	add	r2, r3
 800a146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a14a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800a152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6a1a      	ldr	r2, [r3, #32]
 800a15e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d90f      	bls.n	800a18e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800a16e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6a1a      	ldr	r2, [r3, #32]
 800a17a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a17e:	1ad2      	subs	r2, r2, r3
 800a180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	621a      	str	r2, [r3, #32]
 800a18c:	e00e      	b.n	800a1ac <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800a18e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800a19e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800a1ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 80cc 	beq.w	800a34e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a1b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a1c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	785b      	ldrb	r3, [r3, #1]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d178      	bne.n	800a2c6 <USB_EPStartXfer+0x1202>
 800a1d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1f8:	4413      	add	r3, r2
 800a1fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a1fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	011a      	lsls	r2, r3, #4
 800a20c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a210:	4413      	add	r3, r2
 800a212:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a21a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d116      	bne.n	800a250 <USB_EPStartXfer+0x118c>
 800a222:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a226:	881b      	ldrh	r3, [r3, #0]
 800a228:	b29b      	uxth	r3, r3
 800a22a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a22e:	b29a      	uxth	r2, r3
 800a230:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a234:	801a      	strh	r2, [r3, #0]
 800a236:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a23a:	881b      	ldrh	r3, [r3, #0]
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a246:	b29a      	uxth	r2, r3
 800a248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a24c:	801a      	strh	r2, [r3, #0]
 800a24e:	e064      	b.n	800a31a <USB_EPStartXfer+0x1256>
 800a250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a254:	2b3e      	cmp	r3, #62	; 0x3e
 800a256:	d818      	bhi.n	800a28a <USB_EPStartXfer+0x11c6>
 800a258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a25c:	085b      	lsrs	r3, r3, #1
 800a25e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d004      	beq.n	800a278 <USB_EPStartXfer+0x11b4>
 800a26e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a272:	3301      	adds	r3, #1
 800a274:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	029b      	lsls	r3, r3, #10
 800a280:	b29a      	uxth	r2, r3
 800a282:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a286:	801a      	strh	r2, [r3, #0]
 800a288:	e047      	b.n	800a31a <USB_EPStartXfer+0x1256>
 800a28a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a28e:	095b      	lsrs	r3, r3, #5
 800a290:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a298:	f003 031f 	and.w	r3, r3, #31
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d104      	bne.n	800a2aa <USB_EPStartXfer+0x11e6>
 800a2a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a2aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	029b      	lsls	r3, r3, #10
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2c2:	801a      	strh	r2, [r3, #0]
 800a2c4:	e029      	b.n	800a31a <USB_EPStartXfer+0x1256>
 800a2c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	785b      	ldrb	r3, [r3, #1]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d121      	bne.n	800a31a <USB_EPStartXfer+0x1256>
 800a2d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a2f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	011a      	lsls	r2, r3, #4
 800a300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a304:	4413      	add	r3, r2
 800a306:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a30a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a30e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a312:	b29a      	uxth	r2, r3
 800a314:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a318:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a31a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a31e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	895b      	ldrh	r3, [r3, #10]
 800a326:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a32a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a32e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6959      	ldr	r1, [r3, #20]
 800a336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a340:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a344:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a348:	6800      	ldr	r0, [r0, #0]
 800a34a:	f000 fe31 	bl	800afb0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a34e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a352:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a35c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4413      	add	r3, r2
 800a368:	881b      	ldrh	r3, [r3, #0]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a370:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a37c:	8013      	strh	r3, [r2, #0]
 800a37e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a382:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a386:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a38a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a38e:	8812      	ldrh	r2, [r2, #0]
 800a390:	f082 0210 	eor.w	r2, r2, #16
 800a394:	801a      	strh	r2, [r3, #0]
 800a396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a39a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a39e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3a2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a3a6:	8812      	ldrh	r2, [r2, #0]
 800a3a8:	f082 0220 	eor.w	r2, r2, #32
 800a3ac:	801a      	strh	r2, [r3, #0]
 800a3ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	441a      	add	r2, r3
 800a3c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3cc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	8013      	strh	r3, [r2, #0]
 800a3e6:	f000 bc9f 	b.w	800ad28 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a3ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	7b1b      	ldrb	r3, [r3, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f040 80ae 	bne.w	800a558 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a3fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	699a      	ldr	r2, [r3, #24]
 800a408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a40c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	429a      	cmp	r2, r3
 800a416:	d917      	bls.n	800a448 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800a418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a41c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800a428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a42c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	699a      	ldr	r2, [r3, #24]
 800a434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a438:	1ad2      	subs	r2, r2, r3
 800a43a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a43e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	619a      	str	r2, [r3, #24]
 800a446:	e00e      	b.n	800a466 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800a448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a44c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800a458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a45c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2200      	movs	r2, #0
 800a464:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a46a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a478:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a482:	b29b      	uxth	r3, r3
 800a484:	461a      	mov	r2, r3
 800a486:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a48a:	4413      	add	r3, r2
 800a48c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	011a      	lsls	r2, r3, #4
 800a49e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a4a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d116      	bne.n	800a4e2 <USB_EPStartXfer+0x141e>
 800a4b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4c6:	801a      	strh	r2, [r3, #0]
 800a4c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4cc:	881b      	ldrh	r3, [r3, #0]
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4de:	801a      	strh	r2, [r3, #0]
 800a4e0:	e3e8      	b.n	800acb4 <USB_EPStartXfer+0x1bf0>
 800a4e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4e6:	2b3e      	cmp	r3, #62	; 0x3e
 800a4e8:	d818      	bhi.n	800a51c <USB_EPStartXfer+0x1458>
 800a4ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4ee:	085b      	lsrs	r3, r3, #1
 800a4f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a4f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d004      	beq.n	800a50a <USB_EPStartXfer+0x1446>
 800a500:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a504:	3301      	adds	r3, #1
 800a506:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a50a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a50e:	b29b      	uxth	r3, r3
 800a510:	029b      	lsls	r3, r3, #10
 800a512:	b29a      	uxth	r2, r3
 800a514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a518:	801a      	strh	r2, [r3, #0]
 800a51a:	e3cb      	b.n	800acb4 <USB_EPStartXfer+0x1bf0>
 800a51c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a520:	095b      	lsrs	r3, r3, #5
 800a522:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a52a:	f003 031f 	and.w	r3, r3, #31
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d104      	bne.n	800a53c <USB_EPStartXfer+0x1478>
 800a532:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a536:	3b01      	subs	r3, #1
 800a538:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a53c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a540:	b29b      	uxth	r3, r3
 800a542:	029b      	lsls	r3, r3, #10
 800a544:	b29b      	uxth	r3, r3
 800a546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a54a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a54e:	b29a      	uxth	r2, r3
 800a550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a554:	801a      	strh	r2, [r3, #0]
 800a556:	e3ad      	b.n	800acb4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a55c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	78db      	ldrb	r3, [r3, #3]
 800a564:	2b02      	cmp	r3, #2
 800a566:	f040 8200 	bne.w	800a96a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a56a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a56e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	785b      	ldrb	r3, [r3, #1]
 800a576:	2b00      	cmp	r3, #0
 800a578:	f040 8091 	bne.w	800a69e <USB_EPStartXfer+0x15da>
 800a57c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a580:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a58a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a58e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a598:	b29b      	uxth	r3, r3
 800a59a:	461a      	mov	r2, r3
 800a59c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a5a0:	4413      	add	r3, r2
 800a5a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a5a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	011a      	lsls	r2, r3, #4
 800a5b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a5b8:	4413      	add	r3, r2
 800a5ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a5be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d116      	bne.n	800a600 <USB_EPStartXfer+0x153c>
 800a5d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5e4:	801a      	strh	r2, [r3, #0]
 800a5e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5ea:	881b      	ldrh	r3, [r3, #0]
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a5fc:	801a      	strh	r2, [r3, #0]
 800a5fe:	e083      	b.n	800a708 <USB_EPStartXfer+0x1644>
 800a600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	2b3e      	cmp	r3, #62	; 0x3e
 800a60e:	d820      	bhi.n	800a652 <USB_EPStartXfer+0x158e>
 800a610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	085b      	lsrs	r3, r3, #1
 800a61e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	2b00      	cmp	r3, #0
 800a634:	d004      	beq.n	800a640 <USB_EPStartXfer+0x157c>
 800a636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a63a:	3301      	adds	r3, #1
 800a63c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a644:	b29b      	uxth	r3, r3
 800a646:	029b      	lsls	r3, r3, #10
 800a648:	b29a      	uxth	r2, r3
 800a64a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a64e:	801a      	strh	r2, [r3, #0]
 800a650:	e05a      	b.n	800a708 <USB_EPStartXfer+0x1644>
 800a652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	095b      	lsrs	r3, r3, #5
 800a660:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a668:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	f003 031f 	and.w	r3, r3, #31
 800a674:	2b00      	cmp	r3, #0
 800a676:	d104      	bne.n	800a682 <USB_EPStartXfer+0x15be>
 800a678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67c:	3b01      	subs	r3, #1
 800a67e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a686:	b29b      	uxth	r3, r3
 800a688:	029b      	lsls	r3, r3, #10
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a694:	b29a      	uxth	r2, r3
 800a696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a69a:	801a      	strh	r2, [r3, #0]
 800a69c:	e034      	b.n	800a708 <USB_EPStartXfer+0x1644>
 800a69e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	785b      	ldrb	r3, [r3, #1]
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d12c      	bne.n	800a708 <USB_EPStartXfer+0x1644>
 800a6ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a6bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a6d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	011a      	lsls	r2, r3, #4
 800a6e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a6f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	b29a      	uxth	r2, r3
 800a702:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a706:	801a      	strh	r2, [r3, #0]
 800a708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a70c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a71a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	785b      	ldrb	r3, [r3, #1]
 800a722:	2b00      	cmp	r3, #0
 800a724:	f040 8091 	bne.w	800a84a <USB_EPStartXfer+0x1786>
 800a728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a72c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a73a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a744:	b29b      	uxth	r3, r3
 800a746:	461a      	mov	r2, r3
 800a748:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a74c:	4413      	add	r3, r2
 800a74e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	011a      	lsls	r2, r3, #4
 800a760:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a764:	4413      	add	r3, r2
 800a766:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a76a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a76e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d116      	bne.n	800a7ac <USB_EPStartXfer+0x16e8>
 800a77e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a782:	881b      	ldrh	r3, [r3, #0]
 800a784:	b29b      	uxth	r3, r3
 800a786:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a790:	801a      	strh	r2, [r3, #0]
 800a792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a796:	881b      	ldrh	r3, [r3, #0]
 800a798:	b29b      	uxth	r3, r3
 800a79a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a79e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a7a8:	801a      	strh	r2, [r3, #0]
 800a7aa:	e07c      	b.n	800a8a6 <USB_EPStartXfer+0x17e2>
 800a7ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	2b3e      	cmp	r3, #62	; 0x3e
 800a7ba:	d820      	bhi.n	800a7fe <USB_EPStartXfer+0x173a>
 800a7bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	085b      	lsrs	r3, r3, #1
 800a7ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a7ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d004      	beq.n	800a7ec <USB_EPStartXfer+0x1728>
 800a7e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a7ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	029b      	lsls	r3, r3, #10
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a7fa:	801a      	strh	r2, [r3, #0]
 800a7fc:	e053      	b.n	800a8a6 <USB_EPStartXfer+0x17e2>
 800a7fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	095b      	lsrs	r3, r3, #5
 800a80c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	691b      	ldr	r3, [r3, #16]
 800a81c:	f003 031f 	and.w	r3, r3, #31
 800a820:	2b00      	cmp	r3, #0
 800a822:	d104      	bne.n	800a82e <USB_EPStartXfer+0x176a>
 800a824:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a828:	3b01      	subs	r3, #1
 800a82a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a82e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a832:	b29b      	uxth	r3, r3
 800a834:	029b      	lsls	r3, r3, #10
 800a836:	b29b      	uxth	r3, r3
 800a838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a83c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a840:	b29a      	uxth	r2, r3
 800a842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a846:	801a      	strh	r2, [r3, #0]
 800a848:	e02d      	b.n	800a8a6 <USB_EPStartXfer+0x17e2>
 800a84a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a84e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	785b      	ldrb	r3, [r3, #1]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d125      	bne.n	800a8a6 <USB_EPStartXfer+0x17e2>
 800a85a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a85e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a868:	b29b      	uxth	r3, r3
 800a86a:	461a      	mov	r2, r3
 800a86c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a870:	4413      	add	r3, r2
 800a872:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a87a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	011a      	lsls	r2, r3, #4
 800a884:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a888:	4413      	add	r3, r2
 800a88a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a88e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a8a4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a8a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 81fe 	beq.w	800acb4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a8b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4413      	add	r3, r2
 800a8d2:	881b      	ldrh	r3, [r3, #0]
 800a8d4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a8d8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a8dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d005      	beq.n	800a8f0 <USB_EPStartXfer+0x182c>
 800a8e4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10d      	bne.n	800a90c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a8f0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a8f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f040 81db 	bne.w	800acb4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a8fe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a906:	2b00      	cmp	r3, #0
 800a908:	f040 81d4 	bne.w	800acb4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a90c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a910:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a91a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a92e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a932:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a93a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	441a      	add	r2, r3
 800a950:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a95c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a960:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a964:	b29b      	uxth	r3, r3
 800a966:	8013      	strh	r3, [r2, #0]
 800a968:	e1a4      	b.n	800acb4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a96a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a96e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	78db      	ldrb	r3, [r3, #3]
 800a976:	2b01      	cmp	r3, #1
 800a978:	f040 819a 	bne.w	800acb0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a97c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	699a      	ldr	r2, [r3, #24]
 800a988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a98c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	429a      	cmp	r2, r3
 800a996:	d917      	bls.n	800a9c8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a99c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a9a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	699a      	ldr	r2, [r3, #24]
 800a9b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9b8:	1ad2      	subs	r2, r2, r3
 800a9ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	619a      	str	r2, [r3, #24]
 800a9c6:	e00e      	b.n	800a9e6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a9c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a9d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a9e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	785b      	ldrb	r3, [r3, #1]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d178      	bne.n	800aae8 <USB_EPStartXfer+0x1a24>
 800a9f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aa04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	461a      	mov	r2, r3
 800aa16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aa20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	011a      	lsls	r2, r3, #4
 800aa2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800aa32:	4413      	add	r3, r2
 800aa34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aa38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d116      	bne.n	800aa72 <USB_EPStartXfer+0x19ae>
 800aa44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa48:	881b      	ldrh	r3, [r3, #0]
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa56:	801a      	strh	r2, [r3, #0]
 800aa58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa5c:	881b      	ldrh	r3, [r3, #0]
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa6e:	801a      	strh	r2, [r3, #0]
 800aa70:	e06b      	b.n	800ab4a <USB_EPStartXfer+0x1a86>
 800aa72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa76:	2b3e      	cmp	r3, #62	; 0x3e
 800aa78:	d818      	bhi.n	800aaac <USB_EPStartXfer+0x19e8>
 800aa7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa7e:	085b      	lsrs	r3, r3, #1
 800aa80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d004      	beq.n	800aa9a <USB_EPStartXfer+0x19d6>
 800aa90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa94:	3301      	adds	r3, #1
 800aa96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	029b      	lsls	r3, r3, #10
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aaa8:	801a      	strh	r2, [r3, #0]
 800aaaa:	e04e      	b.n	800ab4a <USB_EPStartXfer+0x1a86>
 800aaac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aab0:	095b      	lsrs	r3, r3, #5
 800aab2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aaba:	f003 031f 	and.w	r3, r3, #31
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d104      	bne.n	800aacc <USB_EPStartXfer+0x1a08>
 800aac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aac6:	3b01      	subs	r3, #1
 800aac8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aacc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	029b      	lsls	r3, r3, #10
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aade:	b29a      	uxth	r2, r3
 800aae0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aae4:	801a      	strh	r2, [r3, #0]
 800aae6:	e030      	b.n	800ab4a <USB_EPStartXfer+0x1a86>
 800aae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	785b      	ldrb	r3, [r3, #1]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d128      	bne.n	800ab4a <USB_EPStartXfer+0x1a86>
 800aaf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aafc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	461a      	mov	r2, r3
 800ab18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	011a      	lsls	r2, r3, #4
 800ab30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab34:	4413      	add	r3, r2
 800ab36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ab48:	801a      	strh	r2, [r3, #0]
 800ab4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ab58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	785b      	ldrb	r3, [r3, #1]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d178      	bne.n	800ac5a <USB_EPStartXfer+0x1b96>
 800ab68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ab76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	461a      	mov	r2, r3
 800ab88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab8c:	4413      	add	r3, r2
 800ab8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ab92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	011a      	lsls	r2, r3, #4
 800aba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aba4:	4413      	add	r3, r2
 800aba6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800abaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800abae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d116      	bne.n	800abe4 <USB_EPStartXfer+0x1b20>
 800abb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800abba:	881b      	ldrh	r3, [r3, #0]
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800abc8:	801a      	strh	r2, [r3, #0]
 800abca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800abce:	881b      	ldrh	r3, [r3, #0]
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abda:	b29a      	uxth	r2, r3
 800abdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800abe0:	801a      	strh	r2, [r3, #0]
 800abe2:	e067      	b.n	800acb4 <USB_EPStartXfer+0x1bf0>
 800abe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abe8:	2b3e      	cmp	r3, #62	; 0x3e
 800abea:	d818      	bhi.n	800ac1e <USB_EPStartXfer+0x1b5a>
 800abec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abf0:	085b      	lsrs	r3, r3, #1
 800abf2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800abf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d004      	beq.n	800ac0c <USB_EPStartXfer+0x1b48>
 800ac02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ac06:	3301      	adds	r3, #1
 800ac08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ac0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	029b      	lsls	r3, r3, #10
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac1a:	801a      	strh	r2, [r3, #0]
 800ac1c:	e04a      	b.n	800acb4 <USB_EPStartXfer+0x1bf0>
 800ac1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac22:	095b      	lsrs	r3, r3, #5
 800ac24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ac28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac2c:	f003 031f 	and.w	r3, r3, #31
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d104      	bne.n	800ac3e <USB_EPStartXfer+0x1b7a>
 800ac34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ac3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	029b      	lsls	r3, r3, #10
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac56:	801a      	strh	r2, [r3, #0]
 800ac58:	e02c      	b.n	800acb4 <USB_EPStartXfer+0x1bf0>
 800ac5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	785b      	ldrb	r3, [r3, #1]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d124      	bne.n	800acb4 <USB_EPStartXfer+0x1bf0>
 800ac6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac80:	4413      	add	r3, r2
 800ac82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	011a      	lsls	r2, r3, #4
 800ac94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac98:	4413      	add	r3, r2
 800ac9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ac9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acac:	801a      	strh	r2, [r3, #0]
 800acae:	e001      	b.n	800acb4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800acb0:	2301      	movs	r3, #1
 800acb2:	e03a      	b.n	800ad2a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800acb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	881b      	ldrh	r3, [r3, #0]
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acda:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800acde:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ace2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ace6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800acea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800acee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800acf2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800acf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	441a      	add	r2, r3
 800ad10:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ad14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	785b      	ldrb	r3, [r3, #1]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d020      	beq.n	800ad88 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	4413      	add	r3, r2
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad5c:	81bb      	strh	r3, [r7, #12]
 800ad5e:	89bb      	ldrh	r3, [r7, #12]
 800ad60:	f083 0310 	eor.w	r3, r3, #16
 800ad64:	81bb      	strh	r3, [r7, #12]
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	441a      	add	r2, r3
 800ad70:	89bb      	ldrh	r3, [r7, #12]
 800ad72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	8013      	strh	r3, [r2, #0]
 800ad86:	e01f      	b.n	800adc8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4413      	add	r3, r2
 800ad92:	881b      	ldrh	r3, [r3, #0]
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad9e:	81fb      	strh	r3, [r7, #14]
 800ada0:	89fb      	ldrh	r3, [r7, #14]
 800ada2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ada6:	81fb      	strh	r3, [r7, #14]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	441a      	add	r2, r3
 800adb2:	89fb      	ldrh	r3, [r7, #14]
 800adb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3714      	adds	r7, #20
 800adce:	46bd      	mov	sp, r7
 800add0:	bc80      	pop	{r7}
 800add2:	4770      	bx	lr

0800add4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800add4:	b480      	push	{r7}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	7b1b      	ldrb	r3, [r3, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f040 809d 	bne.w	800af22 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	785b      	ldrb	r3, [r3, #1]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d04c      	beq.n	800ae8a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	823b      	strh	r3, [r7, #16]
 800adfe:	8a3b      	ldrh	r3, [r7, #16]
 800ae00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d01b      	beq.n	800ae40 <USB_EPClearStall+0x6c>
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4413      	add	r3, r2
 800ae12:	881b      	ldrh	r3, [r3, #0]
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae1e:	81fb      	strh	r3, [r7, #14]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	441a      	add	r2, r3
 800ae2a:	89fb      	ldrh	r3, [r7, #14]
 800ae2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	78db      	ldrb	r3, [r3, #3]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d06c      	beq.n	800af22 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4413      	add	r3, r2
 800ae52:	881b      	ldrh	r3, [r3, #0]
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae5e:	81bb      	strh	r3, [r7, #12]
 800ae60:	89bb      	ldrh	r3, [r7, #12]
 800ae62:	f083 0320 	eor.w	r3, r3, #32
 800ae66:	81bb      	strh	r3, [r7, #12]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	441a      	add	r2, r3
 800ae72:	89bb      	ldrh	r3, [r7, #12]
 800ae74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	8013      	strh	r3, [r2, #0]
 800ae88:	e04b      	b.n	800af22 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	881b      	ldrh	r3, [r3, #0]
 800ae96:	82fb      	strh	r3, [r7, #22]
 800ae98:	8afb      	ldrh	r3, [r7, #22]
 800ae9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d01b      	beq.n	800aeda <USB_EPClearStall+0x106>
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	881b      	ldrh	r3, [r3, #0]
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aeb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeb8:	82bb      	strh	r3, [r7, #20]
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	441a      	add	r2, r3
 800aec4:	8abb      	ldrh	r3, [r7, #20]
 800aec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aece:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4413      	add	r3, r2
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aeec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aef0:	827b      	strh	r3, [r7, #18]
 800aef2:	8a7b      	ldrh	r3, [r7, #18]
 800aef4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aef8:	827b      	strh	r3, [r7, #18]
 800aefa:	8a7b      	ldrh	r3, [r7, #18]
 800aefc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800af00:	827b      	strh	r3, [r7, #18]
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	441a      	add	r2, r3
 800af0c:	8a7b      	ldrh	r3, [r7, #18]
 800af0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af1e:	b29b      	uxth	r3, r3
 800af20:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	371c      	adds	r7, #28
 800af28:	46bd      	mov	sp, r7
 800af2a:	bc80      	pop	{r7}
 800af2c:	4770      	bx	lr

0800af2e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800af2e:	b480      	push	{r7}
 800af30:	b083      	sub	sp, #12
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	460b      	mov	r3, r1
 800af38:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800af3a:	78fb      	ldrb	r3, [r7, #3]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d103      	bne.n	800af48 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2280      	movs	r2, #128	; 0x80
 800af44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	370c      	adds	r7, #12
 800af4e:	46bd      	mov	sp, r7
 800af50:	bc80      	pop	{r7}
 800af52:	4770      	bx	lr

0800af54 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	370c      	adds	r7, #12
 800af62:	46bd      	mov	sp, r7
 800af64:	bc80      	pop	{r7}
 800af66:	4770      	bx	lr

0800af68 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	370c      	adds	r7, #12
 800af76:	46bd      	mov	sp, r7
 800af78:	bc80      	pop	{r7}
 800af7a:	4770      	bx	lr

0800af7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800af8e:	68fb      	ldr	r3, [r7, #12]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	bc80      	pop	{r7}
 800af98:	4770      	bx	lr

0800af9a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b083      	sub	sp, #12
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	bc80      	pop	{r7}
 800afae:	4770      	bx	lr

0800afb0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b08d      	sub	sp, #52	; 0x34
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	4611      	mov	r1, r2
 800afbc:	461a      	mov	r2, r3
 800afbe:	460b      	mov	r3, r1
 800afc0:	80fb      	strh	r3, [r7, #6]
 800afc2:	4613      	mov	r3, r2
 800afc4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800afc6:	88bb      	ldrh	r3, [r7, #4]
 800afc8:	3301      	adds	r3, #1
 800afca:	085b      	lsrs	r3, r3, #1
 800afcc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800afd6:	88fb      	ldrh	r3, [r7, #6]
 800afd8:	005a      	lsls	r2, r3, #1
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afe2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800afe4:	6a3b      	ldr	r3, [r7, #32]
 800afe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afe8:	e01e      	b.n	800b028 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff2:	3301      	adds	r3, #1
 800aff4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	b29b      	uxth	r3, r3
 800affc:	021b      	lsls	r3, r3, #8
 800affe:	b29b      	uxth	r3, r3
 800b000:	461a      	mov	r2, r3
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	4313      	orrs	r3, r2
 800b006:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b012:	3302      	adds	r3, #2
 800b014:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800b016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b018:	3302      	adds	r3, #2
 800b01a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	3301      	adds	r3, #1
 800b020:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b024:	3b01      	subs	r3, #1
 800b026:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1dd      	bne.n	800afea <USB_WritePMA+0x3a>
  }
}
 800b02e:	bf00      	nop
 800b030:	bf00      	nop
 800b032:	3734      	adds	r7, #52	; 0x34
 800b034:	46bd      	mov	sp, r7
 800b036:	bc80      	pop	{r7}
 800b038:	4770      	bx	lr

0800b03a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b03a:	b480      	push	{r7}
 800b03c:	b08b      	sub	sp, #44	; 0x2c
 800b03e:	af00      	add	r7, sp, #0
 800b040:	60f8      	str	r0, [r7, #12]
 800b042:	60b9      	str	r1, [r7, #8]
 800b044:	4611      	mov	r1, r2
 800b046:	461a      	mov	r2, r3
 800b048:	460b      	mov	r3, r1
 800b04a:	80fb      	strh	r3, [r7, #6]
 800b04c:	4613      	mov	r3, r2
 800b04e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b050:	88bb      	ldrh	r3, [r7, #4]
 800b052:	085b      	lsrs	r3, r3, #1
 800b054:	b29b      	uxth	r3, r3
 800b056:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b060:	88fb      	ldrh	r3, [r7, #6]
 800b062:	005a      	lsls	r2, r3, #1
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	4413      	add	r3, r2
 800b068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b06c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	627b      	str	r3, [r7, #36]	; 0x24
 800b072:	e01b      	b.n	800b0ac <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b074:	6a3b      	ldr	r3, [r7, #32]
 800b076:	881b      	ldrh	r3, [r3, #0]
 800b078:	b29b      	uxth	r3, r3
 800b07a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b07c:	6a3b      	ldr	r3, [r7, #32]
 800b07e:	3302      	adds	r3, #2
 800b080:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	b2da      	uxtb	r2, r3
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	3301      	adds	r3, #1
 800b08e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	0a1b      	lsrs	r3, r3, #8
 800b094:	b2da      	uxtb	r2, r3
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	3301      	adds	r3, #1
 800b09e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
 800b0a2:	3302      	adds	r3, #2
 800b0a4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	627b      	str	r3, [r7, #36]	; 0x24
 800b0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1e0      	bne.n	800b074 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b0b2:	88bb      	ldrh	r3, [r7, #4]
 800b0b4:	f003 0301 	and.w	r3, r3, #1
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d007      	beq.n	800b0ce <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	881b      	ldrh	r3, [r3, #0]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	701a      	strb	r2, [r3, #0]
  }
}
 800b0ce:	bf00      	nop
 800b0d0:	372c      	adds	r7, #44	; 0x2c
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bc80      	pop	{r7}
 800b0d6:	4770      	bx	lr

0800b0d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	7c1b      	ldrb	r3, [r3, #16]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d115      	bne.n	800b11c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b0f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	2181      	movs	r1, #129	; 0x81
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f001 fe94 	bl	800ce26 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2201      	movs	r2, #1
 800b102:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b104:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b108:	2202      	movs	r2, #2
 800b10a:	2101      	movs	r1, #1
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f001 fe8a 	bl	800ce26 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2201      	movs	r2, #1
 800b116:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b11a:	e012      	b.n	800b142 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b11c:	2340      	movs	r3, #64	; 0x40
 800b11e:	2202      	movs	r2, #2
 800b120:	2181      	movs	r1, #129	; 0x81
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f001 fe7f 	bl	800ce26 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b12e:	2340      	movs	r3, #64	; 0x40
 800b130:	2202      	movs	r2, #2
 800b132:	2101      	movs	r1, #1
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f001 fe76 	bl	800ce26 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2201      	movs	r2, #1
 800b13e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b142:	2308      	movs	r3, #8
 800b144:	2203      	movs	r2, #3
 800b146:	2182      	movs	r1, #130	; 0x82
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f001 fe6c 	bl	800ce26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2201      	movs	r2, #1
 800b152:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b154:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b158:	f001 ff8c 	bl	800d074 <USBD_static_malloc>
 800b15c:	4602      	mov	r2, r0
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d102      	bne.n	800b174 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b16e:	2301      	movs	r3, #1
 800b170:	73fb      	strb	r3, [r7, #15]
 800b172:	e026      	b.n	800b1c2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b17a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	2200      	movs	r2, #0
 800b18a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	2200      	movs	r2, #0
 800b192:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	7c1b      	ldrb	r3, [r3, #16]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d109      	bne.n	800b1b2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1a8:	2101      	movs	r1, #1
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f001 ff2c 	bl	800d008 <USBD_LL_PrepareReceive>
 800b1b0:	e007      	b.n	800b1c2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1b8:	2340      	movs	r3, #64	; 0x40
 800b1ba:	2101      	movs	r1, #1
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f001 ff23 	bl	800d008 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b1dc:	2181      	movs	r1, #129	; 0x81
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f001 fe47 	bl	800ce72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b1ea:	2101      	movs	r1, #1
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f001 fe40 	bl	800ce72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b1fa:	2182      	movs	r1, #130	; 0x82
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f001 fe38 	bl	800ce72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00e      	beq.n	800b230 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b222:	4618      	mov	r0, r3
 800b224:	f001 ff32 	bl	800d08c <USBD_static_free>
    pdev->pClassData = NULL;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b230:	7bfb      	ldrb	r3, [r7, #15]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b086      	sub	sp, #24
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b24a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b24c:	2300      	movs	r3, #0
 800b24e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b250:	2300      	movs	r3, #0
 800b252:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b260:	2b00      	cmp	r3, #0
 800b262:	d039      	beq.n	800b2d8 <USBD_CDC_Setup+0x9e>
 800b264:	2b20      	cmp	r3, #32
 800b266:	d17f      	bne.n	800b368 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	88db      	ldrh	r3, [r3, #6]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d029      	beq.n	800b2c4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	b25b      	sxtb	r3, r3
 800b276:	2b00      	cmp	r3, #0
 800b278:	da11      	bge.n	800b29e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	683a      	ldr	r2, [r7, #0]
 800b284:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b286:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b288:	683a      	ldr	r2, [r7, #0]
 800b28a:	88d2      	ldrh	r2, [r2, #6]
 800b28c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b28e:	6939      	ldr	r1, [r7, #16]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	88db      	ldrh	r3, [r3, #6]
 800b294:	461a      	mov	r2, r3
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f001 fa09 	bl	800c6ae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b29c:	e06b      	b.n	800b376 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	785a      	ldrb	r2, [r3, #1]
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	88db      	ldrh	r3, [r3, #6]
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b2b4:	6939      	ldr	r1, [r7, #16]
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	88db      	ldrh	r3, [r3, #6]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f001 fa24 	bl	800c70a <USBD_CtlPrepareRx>
      break;
 800b2c2:	e058      	b.n	800b376 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	683a      	ldr	r2, [r7, #0]
 800b2ce:	7850      	ldrb	r0, [r2, #1]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	4798      	blx	r3
      break;
 800b2d6:	e04e      	b.n	800b376 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	785b      	ldrb	r3, [r3, #1]
 800b2dc:	2b0b      	cmp	r3, #11
 800b2de:	d02e      	beq.n	800b33e <USBD_CDC_Setup+0x104>
 800b2e0:	2b0b      	cmp	r3, #11
 800b2e2:	dc38      	bgt.n	800b356 <USBD_CDC_Setup+0x11c>
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <USBD_CDC_Setup+0xb4>
 800b2e8:	2b0a      	cmp	r3, #10
 800b2ea:	d014      	beq.n	800b316 <USBD_CDC_Setup+0xdc>
 800b2ec:	e033      	b.n	800b356 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2f4:	2b03      	cmp	r3, #3
 800b2f6:	d107      	bne.n	800b308 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b2f8:	f107 030c 	add.w	r3, r7, #12
 800b2fc:	2202      	movs	r2, #2
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f001 f9d4 	bl	800c6ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b306:	e02e      	b.n	800b366 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b308:	6839      	ldr	r1, [r7, #0]
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f001 f965 	bl	800c5da <USBD_CtlError>
            ret = USBD_FAIL;
 800b310:	2302      	movs	r3, #2
 800b312:	75fb      	strb	r3, [r7, #23]
          break;
 800b314:	e027      	b.n	800b366 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b31c:	2b03      	cmp	r3, #3
 800b31e:	d107      	bne.n	800b330 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b320:	f107 030f 	add.w	r3, r7, #15
 800b324:	2201      	movs	r2, #1
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f001 f9c0 	bl	800c6ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b32e:	e01a      	b.n	800b366 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b330:	6839      	ldr	r1, [r7, #0]
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f001 f951 	bl	800c5da <USBD_CtlError>
            ret = USBD_FAIL;
 800b338:	2302      	movs	r3, #2
 800b33a:	75fb      	strb	r3, [r7, #23]
          break;
 800b33c:	e013      	b.n	800b366 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b344:	2b03      	cmp	r3, #3
 800b346:	d00d      	beq.n	800b364 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b348:	6839      	ldr	r1, [r7, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f001 f945 	bl	800c5da <USBD_CtlError>
            ret = USBD_FAIL;
 800b350:	2302      	movs	r3, #2
 800b352:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b354:	e006      	b.n	800b364 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b356:	6839      	ldr	r1, [r7, #0]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f001 f93e 	bl	800c5da <USBD_CtlError>
          ret = USBD_FAIL;
 800b35e:	2302      	movs	r3, #2
 800b360:	75fb      	strb	r3, [r7, #23]
          break;
 800b362:	e000      	b.n	800b366 <USBD_CDC_Setup+0x12c>
          break;
 800b364:	bf00      	nop
      }
      break;
 800b366:	e006      	b.n	800b376 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f001 f935 	bl	800c5da <USBD_CtlError>
      ret = USBD_FAIL;
 800b370:	2302      	movs	r3, #2
 800b372:	75fb      	strb	r3, [r7, #23]
      break;
 800b374:	bf00      	nop
  }

  return ret;
 800b376:	7dfb      	ldrb	r3, [r7, #23]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3718      	adds	r7, #24
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	460b      	mov	r3, r1
 800b38a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b392:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b39a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d03a      	beq.n	800b41c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b3a6:	78fa      	ldrb	r2, [r7, #3]
 800b3a8:	6879      	ldr	r1, [r7, #4]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	4413      	add	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	440b      	add	r3, r1
 800b3b4:	331c      	adds	r3, #28
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d029      	beq.n	800b410 <USBD_CDC_DataIn+0x90>
 800b3bc:	78fa      	ldrb	r2, [r7, #3]
 800b3be:	6879      	ldr	r1, [r7, #4]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4413      	add	r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	440b      	add	r3, r1
 800b3ca:	331c      	adds	r3, #28
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	78f9      	ldrb	r1, [r7, #3]
 800b3d0:	68b8      	ldr	r0, [r7, #8]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	440b      	add	r3, r1
 800b3d8:	00db      	lsls	r3, r3, #3
 800b3da:	4403      	add	r3, r0
 800b3dc:	3338      	adds	r3, #56	; 0x38
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b3e4:	fb01 f303 	mul.w	r3, r1, r3
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d110      	bne.n	800b410 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b3ee:	78fa      	ldrb	r2, [r7, #3]
 800b3f0:	6879      	ldr	r1, [r7, #4]
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4413      	add	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	440b      	add	r3, r1
 800b3fc:	331c      	adds	r3, #28
 800b3fe:	2200      	movs	r2, #0
 800b400:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b402:	78f9      	ldrb	r1, [r7, #3]
 800b404:	2300      	movs	r3, #0
 800b406:	2200      	movs	r2, #0
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f001 fdda 	bl	800cfc2 <USBD_LL_Transmit>
 800b40e:	e003      	b.n	800b418 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	e000      	b.n	800b41e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b41c:	2302      	movs	r3, #2
  }
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b084      	sub	sp, #16
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	460b      	mov	r3, r1
 800b430:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b438:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b43a:	78fb      	ldrb	r3, [r7, #3]
 800b43c:	4619      	mov	r1, r3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f001 fe05 	bl	800d04e <USBD_LL_GetRxDataSize>
 800b444:	4602      	mov	r2, r0
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00d      	beq.n	800b472 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b46a:	4611      	mov	r1, r2
 800b46c:	4798      	blx	r3

    return USBD_OK;
 800b46e:	2300      	movs	r3, #0
 800b470:	e000      	b.n	800b474 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b472:	2302      	movs	r3, #2
  }
}
 800b474:	4618      	mov	r0, r3
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b48a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b492:	2b00      	cmp	r3, #0
 800b494:	d015      	beq.n	800b4c2 <USBD_CDC_EP0_RxReady+0x46>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b49c:	2bff      	cmp	r3, #255	; 0xff
 800b49e:	d010      	beq.n	800b4c2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b4ae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b4b6:	b292      	uxth	r2, r2
 800b4b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	22ff      	movs	r2, #255	; 0xff
 800b4be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b4c2:	2300      	movs	r3, #0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2243      	movs	r2, #67	; 0x43
 800b4d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b4da:	4b03      	ldr	r3, [pc, #12]	; (800b4e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bc80      	pop	{r7}
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	200000a0 	.word	0x200000a0

0800b4ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2243      	movs	r2, #67	; 0x43
 800b4f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b4fa:	4b03      	ldr	r3, [pc, #12]	; (800b508 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	bc80      	pop	{r7}
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	2000005c 	.word	0x2000005c

0800b50c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2243      	movs	r2, #67	; 0x43
 800b518:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b51a:	4b03      	ldr	r3, [pc, #12]	; (800b528 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	bc80      	pop	{r7}
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	200000e4 	.word	0x200000e4

0800b52c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	220a      	movs	r2, #10
 800b538:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b53a:	4b03      	ldr	r3, [pc, #12]	; (800b548 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	bc80      	pop	{r7}
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	20000018 	.word	0x20000018

0800b54c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b556:	2302      	movs	r3, #2
 800b558:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d005      	beq.n	800b56c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b568:	2300      	movs	r3, #0
 800b56a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	bc80      	pop	{r7}
 800b576:	4770      	bx	lr

0800b578 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b578:	b480      	push	{r7}
 800b57a:	b087      	sub	sp, #28
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	4613      	mov	r3, r2
 800b584:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b58c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b596:	88fa      	ldrh	r2, [r7, #6]
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	371c      	adds	r7, #28
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bc80      	pop	{r7}
 800b5a8:	4770      	bx	lr

0800b5aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b085      	sub	sp, #20
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bc80      	pop	{r7}
 800b5ce:	4770      	bx	lr

0800b5d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d01c      	beq.n	800b624 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d115      	bne.n	800b620 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b612:	b29b      	uxth	r3, r3
 800b614:	2181      	movs	r1, #129	; 0x81
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f001 fcd3 	bl	800cfc2 <USBD_LL_Transmit>

      return USBD_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	e002      	b.n	800b626 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b620:	2301      	movs	r3, #1
 800b622:	e000      	b.n	800b626 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b624:	2302      	movs	r3, #2
  }
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b084      	sub	sp, #16
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b63c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b644:	2b00      	cmp	r3, #0
 800b646:	d017      	beq.n	800b678 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	7c1b      	ldrb	r3, [r3, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d109      	bne.n	800b664 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b65a:	2101      	movs	r1, #1
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f001 fcd3 	bl	800d008 <USBD_LL_PrepareReceive>
 800b662:	e007      	b.n	800b674 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b66a:	2340      	movs	r3, #64	; 0x40
 800b66c:	2101      	movs	r1, #1
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f001 fcca 	bl	800d008 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b674:	2300      	movs	r3, #0
 800b676:	e000      	b.n	800b67a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b678:	2302      	movs	r3, #2
  }
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b084      	sub	sp, #16
 800b686:	af00      	add	r7, sp, #0
 800b688:	60f8      	str	r0, [r7, #12]
 800b68a:	60b9      	str	r1, [r7, #8]
 800b68c:	4613      	mov	r3, r2
 800b68e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d101      	bne.n	800b69a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b696:	2302      	movs	r3, #2
 800b698:	e01a      	b.n	800b6d0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d003      	beq.n	800b6ba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	68ba      	ldr	r2, [r7, #8]
 800b6b6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	79fa      	ldrb	r2, [r7, #7]
 800b6c6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f001 fb37 	bl	800cd3c <USBD_LL_Init>

  return USBD_OK;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3710      	adds	r7, #16
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d006      	beq.n	800b6fa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	683a      	ldr	r2, [r7, #0]
 800b6f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	73fb      	strb	r3, [r7, #15]
 800b6f8:	e001      	b.n	800b6fe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b6fa:	2302      	movs	r3, #2
 800b6fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	bc80      	pop	{r7}
 800b708:	4770      	bx	lr

0800b70a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b082      	sub	sp, #8
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f001 fb6c 	bl	800cdf0 <USBD_LL_Start>

  return USBD_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b722:	b480      	push	{r7}
 800b724:	b083      	sub	sp, #12
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	bc80      	pop	{r7}
 800b734:	4770      	bx	lr

0800b736 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b084      	sub	sp, #16
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	460b      	mov	r3, r1
 800b740:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b742:	2302      	movs	r3, #2
 800b744:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00c      	beq.n	800b76a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	78fa      	ldrb	r2, [r7, #3]
 800b75a:	4611      	mov	r1, r2
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	4798      	blx	r3
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d101      	bne.n	800b76a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b766:	2300      	movs	r3, #0
 800b768:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	460b      	mov	r3, r1
 800b77e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	78fa      	ldrb	r2, [r7, #3]
 800b78a:	4611      	mov	r1, r2
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	4798      	blx	r3

  return USBD_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b082      	sub	sp, #8
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b7aa:	6839      	ldr	r1, [r7, #0]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f000 fed8 	bl	800c562 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b7ce:	f003 031f 	and.w	r3, r3, #31
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d016      	beq.n	800b804 <USBD_LL_SetupStage+0x6a>
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d81c      	bhi.n	800b814 <USBD_LL_SetupStage+0x7a>
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <USBD_LL_SetupStage+0x4a>
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d008      	beq.n	800b7f4 <USBD_LL_SetupStage+0x5a>
 800b7e2:	e017      	b.n	800b814 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 f9cb 	bl	800bb88 <USBD_StdDevReq>
      break;
 800b7f2:	e01a      	b.n	800b82a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 fa2d 	bl	800bc5c <USBD_StdItfReq>
      break;
 800b802:	e012      	b.n	800b82a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b80a:	4619      	mov	r1, r3
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 fa6d 	bl	800bcec <USBD_StdEPReq>
      break;
 800b812:	e00a      	b.n	800b82a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b81a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	4619      	mov	r1, r3
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f001 fb44 	bl	800ceb0 <USBD_LL_StallEP>
      break;
 800b828:	bf00      	nop
  }

  return USBD_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	460b      	mov	r3, r1
 800b83e:	607a      	str	r2, [r7, #4]
 800b840:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b842:	7afb      	ldrb	r3, [r7, #11]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d14b      	bne.n	800b8e0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b84e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b856:	2b03      	cmp	r3, #3
 800b858:	d134      	bne.n	800b8c4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	68da      	ldr	r2, [r3, #12]
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	691b      	ldr	r3, [r3, #16]
 800b862:	429a      	cmp	r2, r3
 800b864:	d919      	bls.n	800b89a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	68da      	ldr	r2, [r3, #12]
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	691b      	ldr	r3, [r3, #16]
 800b86e:	1ad2      	subs	r2, r2, r3
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	68da      	ldr	r2, [r3, #12]
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d203      	bcs.n	800b888 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b884:	b29b      	uxth	r3, r3
 800b886:	e002      	b.n	800b88e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	461a      	mov	r2, r3
 800b890:	6879      	ldr	r1, [r7, #4]
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f000 ff57 	bl	800c746 <USBD_CtlContinueRx>
 800b898:	e038      	b.n	800b90c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00a      	beq.n	800b8bc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d105      	bne.n	800b8bc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f000 ff54 	bl	800c76a <USBD_CtlSendStatus>
 800b8c2:	e023      	b.n	800b90c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8ca:	2b05      	cmp	r3, #5
 800b8cc:	d11e      	bne.n	800b90c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f001 fae9 	bl	800ceb0 <USBD_LL_StallEP>
 800b8de:	e015      	b.n	800b90c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8e6:	699b      	ldr	r3, [r3, #24]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00d      	beq.n	800b908 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b8f2:	2b03      	cmp	r3, #3
 800b8f4:	d108      	bne.n	800b908 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8fc:	699b      	ldr	r3, [r3, #24]
 800b8fe:	7afa      	ldrb	r2, [r7, #11]
 800b900:	4611      	mov	r1, r2
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	4798      	blx	r3
 800b906:	e001      	b.n	800b90c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b908:	2302      	movs	r3, #2
 800b90a:	e000      	b.n	800b90e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b086      	sub	sp, #24
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	60f8      	str	r0, [r7, #12]
 800b91e:	460b      	mov	r3, r1
 800b920:	607a      	str	r2, [r7, #4]
 800b922:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b924:	7afb      	ldrb	r3, [r7, #11]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d17f      	bne.n	800ba2a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	3314      	adds	r3, #20
 800b92e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b936:	2b02      	cmp	r3, #2
 800b938:	d15c      	bne.n	800b9f4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	68da      	ldr	r2, [r3, #12]
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	691b      	ldr	r3, [r3, #16]
 800b942:	429a      	cmp	r2, r3
 800b944:	d915      	bls.n	800b972 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	68da      	ldr	r2, [r3, #12]
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	1ad2      	subs	r2, r2, r3
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	b29b      	uxth	r3, r3
 800b95a:	461a      	mov	r2, r3
 800b95c:	6879      	ldr	r1, [r7, #4]
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f000 fec1 	bl	800c6e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b964:	2300      	movs	r3, #0
 800b966:	2200      	movs	r2, #0
 800b968:	2100      	movs	r1, #0
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f001 fb4c 	bl	800d008 <USBD_LL_PrepareReceive>
 800b970:	e04e      	b.n	800ba10 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	6912      	ldr	r2, [r2, #16]
 800b97a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b97e:	fb01 f202 	mul.w	r2, r1, r2
 800b982:	1a9b      	subs	r3, r3, r2
 800b984:	2b00      	cmp	r3, #0
 800b986:	d11c      	bne.n	800b9c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	689a      	ldr	r2, [r3, #8]
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b990:	429a      	cmp	r2, r3
 800b992:	d316      	bcc.n	800b9c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	689a      	ldr	r2, [r3, #8]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d20f      	bcs.n	800b9c2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f000 fe9d 	bl	800c6e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f001 fb24 	bl	800d008 <USBD_LL_PrepareReceive>
 800b9c0:	e026      	b.n	800ba10 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00a      	beq.n	800b9e4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b9d4:	2b03      	cmp	r3, #3
 800b9d6:	d105      	bne.n	800b9e4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b9e4:	2180      	movs	r1, #128	; 0x80
 800b9e6:	68f8      	ldr	r0, [r7, #12]
 800b9e8:	f001 fa62 	bl	800ceb0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f000 fecf 	bl	800c790 <USBD_CtlReceiveStatus>
 800b9f2:	e00d      	b.n	800ba10 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9fa:	2b04      	cmp	r3, #4
 800b9fc:	d004      	beq.n	800ba08 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d103      	bne.n	800ba10 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ba08:	2180      	movs	r1, #128	; 0x80
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f001 fa50 	bl	800ceb0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d11d      	bne.n	800ba56 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f7ff fe81 	bl	800b722 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ba28:	e015      	b.n	800ba56 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00d      	beq.n	800ba52 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ba3c:	2b03      	cmp	r3, #3
 800ba3e:	d108      	bne.n	800ba52 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba46:	695b      	ldr	r3, [r3, #20]
 800ba48:	7afa      	ldrb	r2, [r7, #11]
 800ba4a:	4611      	mov	r1, r2
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	4798      	blx	r3
 800ba50:	e001      	b.n	800ba56 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ba52:	2302      	movs	r3, #2
 800ba54:	e000      	b.n	800ba58 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3718      	adds	r7, #24
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba68:	2340      	movs	r3, #64	; 0x40
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f001 f9d9 	bl	800ce26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2201      	movs	r2, #1
 800ba78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2240      	movs	r2, #64	; 0x40
 800ba80:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba84:	2340      	movs	r3, #64	; 0x40
 800ba86:	2200      	movs	r2, #0
 800ba88:	2180      	movs	r1, #128	; 0x80
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f001 f9cb 	bl	800ce26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2240      	movs	r2, #64	; 0x40
 800ba9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d009      	beq.n	800bad8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	6852      	ldr	r2, [r2, #4]
 800bad0:	b2d2      	uxtb	r2, r2
 800bad2:	4611      	mov	r1, r2
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	4798      	blx	r3
  }

  return USBD_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3708      	adds	r7, #8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bae2:	b480      	push	{r7}
 800bae4:	b083      	sub	sp, #12
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	460b      	mov	r3, r1
 800baec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	78fa      	ldrb	r2, [r7, #3]
 800baf2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bc80      	pop	{r7}
 800bafe:	4770      	bx	lr

0800bb00 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2204      	movs	r2, #4
 800bb18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	370c      	adds	r7, #12
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bc80      	pop	{r7}
 800bb26:	4770      	bx	lr

0800bb28 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb36:	2b04      	cmp	r3, #4
 800bb38:	d105      	bne.n	800bb46 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bc80      	pop	{r7}
 800bb50:	4770      	bx	lr

0800bb52 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb60:	2b03      	cmp	r3, #3
 800bb62:	d10b      	bne.n	800bb7c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb6a:	69db      	ldr	r3, [r3, #28]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d005      	beq.n	800bb7c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
	...

0800bb88 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb9e:	2b40      	cmp	r3, #64	; 0x40
 800bba0:	d005      	beq.n	800bbae <USBD_StdDevReq+0x26>
 800bba2:	2b40      	cmp	r3, #64	; 0x40
 800bba4:	d84f      	bhi.n	800bc46 <USBD_StdDevReq+0xbe>
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d009      	beq.n	800bbbe <USBD_StdDevReq+0x36>
 800bbaa:	2b20      	cmp	r3, #32
 800bbac:	d14b      	bne.n	800bc46 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	4798      	blx	r3
      break;
 800bbbc:	e048      	b.n	800bc50 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	785b      	ldrb	r3, [r3, #1]
 800bbc2:	2b09      	cmp	r3, #9
 800bbc4:	d839      	bhi.n	800bc3a <USBD_StdDevReq+0xb2>
 800bbc6:	a201      	add	r2, pc, #4	; (adr r2, 800bbcc <USBD_StdDevReq+0x44>)
 800bbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbcc:	0800bc1d 	.word	0x0800bc1d
 800bbd0:	0800bc31 	.word	0x0800bc31
 800bbd4:	0800bc3b 	.word	0x0800bc3b
 800bbd8:	0800bc27 	.word	0x0800bc27
 800bbdc:	0800bc3b 	.word	0x0800bc3b
 800bbe0:	0800bbff 	.word	0x0800bbff
 800bbe4:	0800bbf5 	.word	0x0800bbf5
 800bbe8:	0800bc3b 	.word	0x0800bc3b
 800bbec:	0800bc13 	.word	0x0800bc13
 800bbf0:	0800bc09 	.word	0x0800bc09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bbf4:	6839      	ldr	r1, [r7, #0]
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 f9dc 	bl	800bfb4 <USBD_GetDescriptor>
          break;
 800bbfc:	e022      	b.n	800bc44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fb3f 	bl	800c284 <USBD_SetAddress>
          break;
 800bc06:	e01d      	b.n	800bc44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bc08:	6839      	ldr	r1, [r7, #0]
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fb7e 	bl	800c30c <USBD_SetConfig>
          break;
 800bc10:	e018      	b.n	800bc44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 fc07 	bl	800c428 <USBD_GetConfig>
          break;
 800bc1a:	e013      	b.n	800bc44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc1c:	6839      	ldr	r1, [r7, #0]
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 fc37 	bl	800c492 <USBD_GetStatus>
          break;
 800bc24:	e00e      	b.n	800bc44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc26:	6839      	ldr	r1, [r7, #0]
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 fc65 	bl	800c4f8 <USBD_SetFeature>
          break;
 800bc2e:	e009      	b.n	800bc44 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 fc74 	bl	800c520 <USBD_ClrFeature>
          break;
 800bc38:	e004      	b.n	800bc44 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bc3a:	6839      	ldr	r1, [r7, #0]
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fccc 	bl	800c5da <USBD_CtlError>
          break;
 800bc42:	bf00      	nop
      }
      break;
 800bc44:	e004      	b.n	800bc50 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bc46:	6839      	ldr	r1, [r7, #0]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fcc6 	bl	800c5da <USBD_CtlError>
      break;
 800bc4e:	bf00      	nop
  }

  return ret;
 800bc50:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3710      	adds	r7, #16
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop

0800bc5c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc66:	2300      	movs	r3, #0
 800bc68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc72:	2b40      	cmp	r3, #64	; 0x40
 800bc74:	d005      	beq.n	800bc82 <USBD_StdItfReq+0x26>
 800bc76:	2b40      	cmp	r3, #64	; 0x40
 800bc78:	d82e      	bhi.n	800bcd8 <USBD_StdItfReq+0x7c>
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d001      	beq.n	800bc82 <USBD_StdItfReq+0x26>
 800bc7e:	2b20      	cmp	r3, #32
 800bc80:	d12a      	bne.n	800bcd8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d81d      	bhi.n	800bcca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	889b      	ldrh	r3, [r3, #4]
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d813      	bhi.n	800bcc0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	6839      	ldr	r1, [r7, #0]
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	4798      	blx	r3
 800bca6:	4603      	mov	r3, r0
 800bca8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	88db      	ldrh	r3, [r3, #6]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d110      	bne.n	800bcd4 <USBD_StdItfReq+0x78>
 800bcb2:	7bfb      	ldrb	r3, [r7, #15]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10d      	bne.n	800bcd4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 fd56 	bl	800c76a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bcbe:	e009      	b.n	800bcd4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fc89 	bl	800c5da <USBD_CtlError>
          break;
 800bcc8:	e004      	b.n	800bcd4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fc84 	bl	800c5da <USBD_CtlError>
          break;
 800bcd2:	e000      	b.n	800bcd6 <USBD_StdItfReq+0x7a>
          break;
 800bcd4:	bf00      	nop
      }
      break;
 800bcd6:	e004      	b.n	800bce2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fc7d 	bl	800c5da <USBD_CtlError>
      break;
 800bce0:	bf00      	nop
  }

  return USBD_OK;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	889b      	ldrh	r3, [r3, #4]
 800bcfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd08:	2b40      	cmp	r3, #64	; 0x40
 800bd0a:	d007      	beq.n	800bd1c <USBD_StdEPReq+0x30>
 800bd0c:	2b40      	cmp	r3, #64	; 0x40
 800bd0e:	f200 8146 	bhi.w	800bf9e <USBD_StdEPReq+0x2b2>
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00a      	beq.n	800bd2c <USBD_StdEPReq+0x40>
 800bd16:	2b20      	cmp	r3, #32
 800bd18:	f040 8141 	bne.w	800bf9e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	6839      	ldr	r1, [r7, #0]
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	4798      	blx	r3
      break;
 800bd2a:	e13d      	b.n	800bfa8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd34:	2b20      	cmp	r3, #32
 800bd36:	d10a      	bne.n	800bd4e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	4798      	blx	r3
 800bd46:	4603      	mov	r3, r0
 800bd48:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bd4a:	7bfb      	ldrb	r3, [r7, #15]
 800bd4c:	e12d      	b.n	800bfaa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	785b      	ldrb	r3, [r3, #1]
 800bd52:	2b03      	cmp	r3, #3
 800bd54:	d007      	beq.n	800bd66 <USBD_StdEPReq+0x7a>
 800bd56:	2b03      	cmp	r3, #3
 800bd58:	f300 811b 	bgt.w	800bf92 <USBD_StdEPReq+0x2a6>
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d072      	beq.n	800be46 <USBD_StdEPReq+0x15a>
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d03a      	beq.n	800bdda <USBD_StdEPReq+0xee>
 800bd64:	e115      	b.n	800bf92 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	d002      	beq.n	800bd76 <USBD_StdEPReq+0x8a>
 800bd70:	2b03      	cmp	r3, #3
 800bd72:	d015      	beq.n	800bda0 <USBD_StdEPReq+0xb4>
 800bd74:	e02b      	b.n	800bdce <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd76:	7bbb      	ldrb	r3, [r7, #14]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00c      	beq.n	800bd96 <USBD_StdEPReq+0xaa>
 800bd7c:	7bbb      	ldrb	r3, [r7, #14]
 800bd7e:	2b80      	cmp	r3, #128	; 0x80
 800bd80:	d009      	beq.n	800bd96 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bd82:	7bbb      	ldrb	r3, [r7, #14]
 800bd84:	4619      	mov	r1, r3
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f001 f892 	bl	800ceb0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bd8c:	2180      	movs	r1, #128	; 0x80
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f001 f88e 	bl	800ceb0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd94:	e020      	b.n	800bdd8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 fc1e 	bl	800c5da <USBD_CtlError>
              break;
 800bd9e:	e01b      	b.n	800bdd8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	885b      	ldrh	r3, [r3, #2]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10e      	bne.n	800bdc6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bda8:	7bbb      	ldrb	r3, [r7, #14]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00b      	beq.n	800bdc6 <USBD_StdEPReq+0xda>
 800bdae:	7bbb      	ldrb	r3, [r7, #14]
 800bdb0:	2b80      	cmp	r3, #128	; 0x80
 800bdb2:	d008      	beq.n	800bdc6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	88db      	ldrh	r3, [r3, #6]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d104      	bne.n	800bdc6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bdbc:	7bbb      	ldrb	r3, [r7, #14]
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f001 f875 	bl	800ceb0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fccf 	bl	800c76a <USBD_CtlSendStatus>

              break;
 800bdcc:	e004      	b.n	800bdd8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bdce:	6839      	ldr	r1, [r7, #0]
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fc02 	bl	800c5da <USBD_CtlError>
              break;
 800bdd6:	bf00      	nop
          }
          break;
 800bdd8:	e0e0      	b.n	800bf9c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	d002      	beq.n	800bdea <USBD_StdEPReq+0xfe>
 800bde4:	2b03      	cmp	r3, #3
 800bde6:	d015      	beq.n	800be14 <USBD_StdEPReq+0x128>
 800bde8:	e026      	b.n	800be38 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdea:	7bbb      	ldrb	r3, [r7, #14]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00c      	beq.n	800be0a <USBD_StdEPReq+0x11e>
 800bdf0:	7bbb      	ldrb	r3, [r7, #14]
 800bdf2:	2b80      	cmp	r3, #128	; 0x80
 800bdf4:	d009      	beq.n	800be0a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bdf6:	7bbb      	ldrb	r3, [r7, #14]
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f001 f858 	bl	800ceb0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800be00:	2180      	movs	r1, #128	; 0x80
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f001 f854 	bl	800ceb0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be08:	e01c      	b.n	800be44 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800be0a:	6839      	ldr	r1, [r7, #0]
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 fbe4 	bl	800c5da <USBD_CtlError>
              break;
 800be12:	e017      	b.n	800be44 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	885b      	ldrh	r3, [r3, #2]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d112      	bne.n	800be42 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800be1c:	7bbb      	ldrb	r3, [r7, #14]
 800be1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be22:	2b00      	cmp	r3, #0
 800be24:	d004      	beq.n	800be30 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800be26:	7bbb      	ldrb	r3, [r7, #14]
 800be28:	4619      	mov	r1, r3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f001 f85f 	bl	800ceee <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fc9a 	bl	800c76a <USBD_CtlSendStatus>
              }
              break;
 800be36:	e004      	b.n	800be42 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fbcd 	bl	800c5da <USBD_CtlError>
              break;
 800be40:	e000      	b.n	800be44 <USBD_StdEPReq+0x158>
              break;
 800be42:	bf00      	nop
          }
          break;
 800be44:	e0aa      	b.n	800bf9c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d002      	beq.n	800be56 <USBD_StdEPReq+0x16a>
 800be50:	2b03      	cmp	r3, #3
 800be52:	d032      	beq.n	800beba <USBD_StdEPReq+0x1ce>
 800be54:	e097      	b.n	800bf86 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be56:	7bbb      	ldrb	r3, [r7, #14]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d007      	beq.n	800be6c <USBD_StdEPReq+0x180>
 800be5c:	7bbb      	ldrb	r3, [r7, #14]
 800be5e:	2b80      	cmp	r3, #128	; 0x80
 800be60:	d004      	beq.n	800be6c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 fbb8 	bl	800c5da <USBD_CtlError>
                break;
 800be6a:	e091      	b.n	800bf90 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be70:	2b00      	cmp	r3, #0
 800be72:	da0b      	bge.n	800be8c <USBD_StdEPReq+0x1a0>
 800be74:	7bbb      	ldrb	r3, [r7, #14]
 800be76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be7a:	4613      	mov	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4413      	add	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	3310      	adds	r3, #16
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	4413      	add	r3, r2
 800be88:	3304      	adds	r3, #4
 800be8a:	e00b      	b.n	800bea4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be8c:	7bbb      	ldrb	r3, [r7, #14]
 800be8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be92:	4613      	mov	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	4413      	add	r3, r2
 800bea2:	3304      	adds	r3, #4
 800bea4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2200      	movs	r2, #0
 800beaa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	2202      	movs	r2, #2
 800beb0:	4619      	mov	r1, r3
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fbfb 	bl	800c6ae <USBD_CtlSendData>
              break;
 800beb8:	e06a      	b.n	800bf90 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800beba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	da11      	bge.n	800bee6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bec2:	7bbb      	ldrb	r3, [r7, #14]
 800bec4:	f003 020f 	and.w	r2, r3, #15
 800bec8:	6879      	ldr	r1, [r7, #4]
 800beca:	4613      	mov	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4413      	add	r3, r2
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	440b      	add	r3, r1
 800bed4:	3318      	adds	r3, #24
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d117      	bne.n	800bf0c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fb7b 	bl	800c5da <USBD_CtlError>
                  break;
 800bee4:	e054      	b.n	800bf90 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bee6:	7bbb      	ldrb	r3, [r7, #14]
 800bee8:	f003 020f 	and.w	r2, r3, #15
 800beec:	6879      	ldr	r1, [r7, #4]
 800beee:	4613      	mov	r3, r2
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	4413      	add	r3, r2
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	440b      	add	r3, r1
 800bef8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d104      	bne.n	800bf0c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bf02:	6839      	ldr	r1, [r7, #0]
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fb68 	bl	800c5da <USBD_CtlError>
                  break;
 800bf0a:	e041      	b.n	800bf90 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	da0b      	bge.n	800bf2c <USBD_StdEPReq+0x240>
 800bf14:	7bbb      	ldrb	r3, [r7, #14]
 800bf16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4413      	add	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	3310      	adds	r3, #16
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	4413      	add	r3, r2
 800bf28:	3304      	adds	r3, #4
 800bf2a:	e00b      	b.n	800bf44 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf2c:	7bbb      	ldrb	r3, [r7, #14]
 800bf2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf32:	4613      	mov	r3, r2
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	4413      	add	r3, r2
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	4413      	add	r3, r2
 800bf42:	3304      	adds	r3, #4
 800bf44:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bf46:	7bbb      	ldrb	r3, [r7, #14]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d002      	beq.n	800bf52 <USBD_StdEPReq+0x266>
 800bf4c:	7bbb      	ldrb	r3, [r7, #14]
 800bf4e:	2b80      	cmp	r3, #128	; 0x80
 800bf50:	d103      	bne.n	800bf5a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	2200      	movs	r2, #0
 800bf56:	601a      	str	r2, [r3, #0]
 800bf58:	e00e      	b.n	800bf78 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bf5a:	7bbb      	ldrb	r3, [r7, #14]
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 ffe4 	bl	800cf2c <USBD_LL_IsStallEP>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d003      	beq.n	800bf72 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	e002      	b.n	800bf78 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	2200      	movs	r2, #0
 800bf76:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	2202      	movs	r2, #2
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 fb95 	bl	800c6ae <USBD_CtlSendData>
              break;
 800bf84:	e004      	b.n	800bf90 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 fb26 	bl	800c5da <USBD_CtlError>
              break;
 800bf8e:	bf00      	nop
          }
          break;
 800bf90:	e004      	b.n	800bf9c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bf92:	6839      	ldr	r1, [r7, #0]
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fb20 	bl	800c5da <USBD_CtlError>
          break;
 800bf9a:	bf00      	nop
      }
      break;
 800bf9c:	e004      	b.n	800bfa8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bf9e:	6839      	ldr	r1, [r7, #0]
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fb1a 	bl	800c5da <USBD_CtlError>
      break;
 800bfa6:	bf00      	nop
  }

  return ret;
 800bfa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3710      	adds	r7, #16
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
	...

0800bfb4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	885b      	ldrh	r3, [r3, #2]
 800bfce:	0a1b      	lsrs	r3, r3, #8
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	2b06      	cmp	r3, #6
 800bfd6:	f200 8128 	bhi.w	800c22a <USBD_GetDescriptor+0x276>
 800bfda:	a201      	add	r2, pc, #4	; (adr r2, 800bfe0 <USBD_GetDescriptor+0x2c>)
 800bfdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe0:	0800bffd 	.word	0x0800bffd
 800bfe4:	0800c015 	.word	0x0800c015
 800bfe8:	0800c055 	.word	0x0800c055
 800bfec:	0800c22b 	.word	0x0800c22b
 800bff0:	0800c22b 	.word	0x0800c22b
 800bff4:	0800c1cb 	.word	0x0800c1cb
 800bff8:	0800c1f7 	.word	0x0800c1f7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	7c12      	ldrb	r2, [r2, #16]
 800c008:	f107 0108 	add.w	r1, r7, #8
 800c00c:	4610      	mov	r0, r2
 800c00e:	4798      	blx	r3
 800c010:	60f8      	str	r0, [r7, #12]
      break;
 800c012:	e112      	b.n	800c23a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	7c1b      	ldrb	r3, [r3, #16]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d10d      	bne.n	800c038 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c024:	f107 0208 	add.w	r2, r7, #8
 800c028:	4610      	mov	r0, r2
 800c02a:	4798      	blx	r3
 800c02c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	3301      	adds	r3, #1
 800c032:	2202      	movs	r2, #2
 800c034:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c036:	e100      	b.n	800c23a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c040:	f107 0208 	add.w	r2, r7, #8
 800c044:	4610      	mov	r0, r2
 800c046:	4798      	blx	r3
 800c048:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	3301      	adds	r3, #1
 800c04e:	2202      	movs	r2, #2
 800c050:	701a      	strb	r2, [r3, #0]
      break;
 800c052:	e0f2      	b.n	800c23a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	885b      	ldrh	r3, [r3, #2]
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	2b05      	cmp	r3, #5
 800c05c:	f200 80ac 	bhi.w	800c1b8 <USBD_GetDescriptor+0x204>
 800c060:	a201      	add	r2, pc, #4	; (adr r2, 800c068 <USBD_GetDescriptor+0xb4>)
 800c062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c066:	bf00      	nop
 800c068:	0800c081 	.word	0x0800c081
 800c06c:	0800c0b5 	.word	0x0800c0b5
 800c070:	0800c0e9 	.word	0x0800c0e9
 800c074:	0800c11d 	.word	0x0800c11d
 800c078:	0800c151 	.word	0x0800c151
 800c07c:	0800c185 	.word	0x0800c185
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00b      	beq.n	800c0a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	7c12      	ldrb	r2, [r2, #16]
 800c098:	f107 0108 	add.w	r1, r7, #8
 800c09c:	4610      	mov	r0, r2
 800c09e:	4798      	blx	r3
 800c0a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0a2:	e091      	b.n	800c1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0a4:	6839      	ldr	r1, [r7, #0]
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fa97 	bl	800c5da <USBD_CtlError>
            err++;
 800c0ac:	7afb      	ldrb	r3, [r7, #11]
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c0b2:	e089      	b.n	800c1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00b      	beq.n	800c0d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	7c12      	ldrb	r2, [r2, #16]
 800c0cc:	f107 0108 	add.w	r1, r7, #8
 800c0d0:	4610      	mov	r0, r2
 800c0d2:	4798      	blx	r3
 800c0d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0d6:	e077      	b.n	800c1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0d8:	6839      	ldr	r1, [r7, #0]
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 fa7d 	bl	800c5da <USBD_CtlError>
            err++;
 800c0e0:	7afb      	ldrb	r3, [r7, #11]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c0e6:	e06f      	b.n	800c1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d00b      	beq.n	800c10c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	7c12      	ldrb	r2, [r2, #16]
 800c100:	f107 0108 	add.w	r1, r7, #8
 800c104:	4610      	mov	r0, r2
 800c106:	4798      	blx	r3
 800c108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c10a:	e05d      	b.n	800c1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c10c:	6839      	ldr	r1, [r7, #0]
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fa63 	bl	800c5da <USBD_CtlError>
            err++;
 800c114:	7afb      	ldrb	r3, [r7, #11]
 800c116:	3301      	adds	r3, #1
 800c118:	72fb      	strb	r3, [r7, #11]
          break;
 800c11a:	e055      	b.n	800c1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c122:	691b      	ldr	r3, [r3, #16]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00b      	beq.n	800c140 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c12e:	691b      	ldr	r3, [r3, #16]
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	7c12      	ldrb	r2, [r2, #16]
 800c134:	f107 0108 	add.w	r1, r7, #8
 800c138:	4610      	mov	r0, r2
 800c13a:	4798      	blx	r3
 800c13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c13e:	e043      	b.n	800c1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c140:	6839      	ldr	r1, [r7, #0]
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 fa49 	bl	800c5da <USBD_CtlError>
            err++;
 800c148:	7afb      	ldrb	r3, [r7, #11]
 800c14a:	3301      	adds	r3, #1
 800c14c:	72fb      	strb	r3, [r7, #11]
          break;
 800c14e:	e03b      	b.n	800c1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c156:	695b      	ldr	r3, [r3, #20]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00b      	beq.n	800c174 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c162:	695b      	ldr	r3, [r3, #20]
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	7c12      	ldrb	r2, [r2, #16]
 800c168:	f107 0108 	add.w	r1, r7, #8
 800c16c:	4610      	mov	r0, r2
 800c16e:	4798      	blx	r3
 800c170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c172:	e029      	b.n	800c1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fa2f 	bl	800c5da <USBD_CtlError>
            err++;
 800c17c:	7afb      	ldrb	r3, [r7, #11]
 800c17e:	3301      	adds	r3, #1
 800c180:	72fb      	strb	r3, [r7, #11]
          break;
 800c182:	e021      	b.n	800c1c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c18a:	699b      	ldr	r3, [r3, #24]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d00b      	beq.n	800c1a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c196:	699b      	ldr	r3, [r3, #24]
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	7c12      	ldrb	r2, [r2, #16]
 800c19c:	f107 0108 	add.w	r1, r7, #8
 800c1a0:	4610      	mov	r0, r2
 800c1a2:	4798      	blx	r3
 800c1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1a6:	e00f      	b.n	800c1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 fa15 	bl	800c5da <USBD_CtlError>
            err++;
 800c1b0:	7afb      	ldrb	r3, [r7, #11]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c1b6:	e007      	b.n	800c1c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c1b8:	6839      	ldr	r1, [r7, #0]
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 fa0d 	bl	800c5da <USBD_CtlError>
          err++;
 800c1c0:	7afb      	ldrb	r3, [r7, #11]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c1c6:	e038      	b.n	800c23a <USBD_GetDescriptor+0x286>
 800c1c8:	e037      	b.n	800c23a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	7c1b      	ldrb	r3, [r3, #16]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d109      	bne.n	800c1e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1da:	f107 0208 	add.w	r2, r7, #8
 800c1de:	4610      	mov	r0, r2
 800c1e0:	4798      	blx	r3
 800c1e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1e4:	e029      	b.n	800c23a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c1e6:	6839      	ldr	r1, [r7, #0]
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f9f6 	bl	800c5da <USBD_CtlError>
        err++;
 800c1ee:	7afb      	ldrb	r3, [r7, #11]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	72fb      	strb	r3, [r7, #11]
      break;
 800c1f4:	e021      	b.n	800c23a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	7c1b      	ldrb	r3, [r3, #16]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10d      	bne.n	800c21a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c206:	f107 0208 	add.w	r2, r7, #8
 800c20a:	4610      	mov	r0, r2
 800c20c:	4798      	blx	r3
 800c20e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	3301      	adds	r3, #1
 800c214:	2207      	movs	r2, #7
 800c216:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c218:	e00f      	b.n	800c23a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c21a:	6839      	ldr	r1, [r7, #0]
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f9dc 	bl	800c5da <USBD_CtlError>
        err++;
 800c222:	7afb      	ldrb	r3, [r7, #11]
 800c224:	3301      	adds	r3, #1
 800c226:	72fb      	strb	r3, [r7, #11]
      break;
 800c228:	e007      	b.n	800c23a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c22a:	6839      	ldr	r1, [r7, #0]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f9d4 	bl	800c5da <USBD_CtlError>
      err++;
 800c232:	7afb      	ldrb	r3, [r7, #11]
 800c234:	3301      	adds	r3, #1
 800c236:	72fb      	strb	r3, [r7, #11]
      break;
 800c238:	bf00      	nop
  }

  if (err != 0U)
 800c23a:	7afb      	ldrb	r3, [r7, #11]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d11c      	bne.n	800c27a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c240:	893b      	ldrh	r3, [r7, #8]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d011      	beq.n	800c26a <USBD_GetDescriptor+0x2b6>
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	88db      	ldrh	r3, [r3, #6]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00d      	beq.n	800c26a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	88da      	ldrh	r2, [r3, #6]
 800c252:	893b      	ldrh	r3, [r7, #8]
 800c254:	4293      	cmp	r3, r2
 800c256:	bf28      	it	cs
 800c258:	4613      	movcs	r3, r2
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c25e:	893b      	ldrh	r3, [r7, #8]
 800c260:	461a      	mov	r2, r3
 800c262:	68f9      	ldr	r1, [r7, #12]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 fa22 	bl	800c6ae <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	88db      	ldrh	r3, [r3, #6]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d104      	bne.n	800c27c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fa79 	bl	800c76a <USBD_CtlSendStatus>
 800c278:	e000      	b.n	800c27c <USBD_GetDescriptor+0x2c8>
    return;
 800c27a:	bf00      	nop
    }
  }
}
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop

0800c284 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	889b      	ldrh	r3, [r3, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d130      	bne.n	800c2f8 <USBD_SetAddress+0x74>
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	88db      	ldrh	r3, [r3, #6]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d12c      	bne.n	800c2f8 <USBD_SetAddress+0x74>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	885b      	ldrh	r3, [r3, #2]
 800c2a2:	2b7f      	cmp	r3, #127	; 0x7f
 800c2a4:	d828      	bhi.n	800c2f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	885b      	ldrh	r3, [r3, #2]
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2b8:	2b03      	cmp	r3, #3
 800c2ba:	d104      	bne.n	800c2c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 f98b 	bl	800c5da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2c4:	e01d      	b.n	800c302 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	7bfa      	ldrb	r2, [r7, #15]
 800c2ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c2ce:	7bfb      	ldrb	r3, [r7, #15]
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 fe56 	bl	800cf84 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fa46 	bl	800c76a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c2de:	7bfb      	ldrb	r3, [r7, #15]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d004      	beq.n	800c2ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2202      	movs	r2, #2
 800c2e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ec:	e009      	b.n	800c302 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2f6:	e004      	b.n	800c302 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 f96d 	bl	800c5da <USBD_CtlError>
  }
}
 800c300:	bf00      	nop
 800c302:	bf00      	nop
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
	...

0800c30c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	885b      	ldrh	r3, [r3, #2]
 800c31a:	b2da      	uxtb	r2, r3
 800c31c:	4b41      	ldr	r3, [pc, #260]	; (800c424 <USBD_SetConfig+0x118>)
 800c31e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c320:	4b40      	ldr	r3, [pc, #256]	; (800c424 <USBD_SetConfig+0x118>)
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	2b01      	cmp	r3, #1
 800c326:	d904      	bls.n	800c332 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 f955 	bl	800c5da <USBD_CtlError>
 800c330:	e075      	b.n	800c41e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d002      	beq.n	800c342 <USBD_SetConfig+0x36>
 800c33c:	2b03      	cmp	r3, #3
 800c33e:	d023      	beq.n	800c388 <USBD_SetConfig+0x7c>
 800c340:	e062      	b.n	800c408 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c342:	4b38      	ldr	r3, [pc, #224]	; (800c424 <USBD_SetConfig+0x118>)
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d01a      	beq.n	800c380 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c34a:	4b36      	ldr	r3, [pc, #216]	; (800c424 <USBD_SetConfig+0x118>)
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2203      	movs	r2, #3
 800c358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c35c:	4b31      	ldr	r3, [pc, #196]	; (800c424 <USBD_SetConfig+0x118>)
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	4619      	mov	r1, r3
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7ff f9e7 	bl	800b736 <USBD_SetClassConfig>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d104      	bne.n	800c378 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c36e:	6839      	ldr	r1, [r7, #0]
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 f932 	bl	800c5da <USBD_CtlError>
            return;
 800c376:	e052      	b.n	800c41e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 f9f6 	bl	800c76a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c37e:	e04e      	b.n	800c41e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 f9f2 	bl	800c76a <USBD_CtlSendStatus>
        break;
 800c386:	e04a      	b.n	800c41e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c388:	4b26      	ldr	r3, [pc, #152]	; (800c424 <USBD_SetConfig+0x118>)
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d112      	bne.n	800c3b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2202      	movs	r2, #2
 800c394:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c398:	4b22      	ldr	r3, [pc, #136]	; (800c424 <USBD_SetConfig+0x118>)
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	461a      	mov	r2, r3
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c3a2:	4b20      	ldr	r3, [pc, #128]	; (800c424 <USBD_SetConfig+0x118>)
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f7ff f9e3 	bl	800b774 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 f9db 	bl	800c76a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c3b4:	e033      	b.n	800c41e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c3b6:	4b1b      	ldr	r3, [pc, #108]	; (800c424 <USBD_SetConfig+0x118>)
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d01d      	beq.n	800c400 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f7ff f9d1 	bl	800b774 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c3d2:	4b14      	ldr	r3, [pc, #80]	; (800c424 <USBD_SetConfig+0x118>)
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c3dc:	4b11      	ldr	r3, [pc, #68]	; (800c424 <USBD_SetConfig+0x118>)
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7ff f9a7 	bl	800b736 <USBD_SetClassConfig>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	d104      	bne.n	800c3f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c3ee:	6839      	ldr	r1, [r7, #0]
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 f8f2 	bl	800c5da <USBD_CtlError>
            return;
 800c3f6:	e012      	b.n	800c41e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 f9b6 	bl	800c76a <USBD_CtlSendStatus>
        break;
 800c3fe:	e00e      	b.n	800c41e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 f9b2 	bl	800c76a <USBD_CtlSendStatus>
        break;
 800c406:	e00a      	b.n	800c41e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f8e5 	bl	800c5da <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c410:	4b04      	ldr	r3, [pc, #16]	; (800c424 <USBD_SetConfig+0x118>)
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	4619      	mov	r1, r3
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f7ff f9ac 	bl	800b774 <USBD_ClrClassConfig>
        break;
 800c41c:	bf00      	nop
    }
  }
}
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	200003f0 	.word	0x200003f0

0800c428 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	88db      	ldrh	r3, [r3, #6]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d004      	beq.n	800c444 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 f8cc 	bl	800c5da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c442:	e022      	b.n	800c48a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	dc02      	bgt.n	800c454 <USBD_GetConfig+0x2c>
 800c44e:	2b00      	cmp	r3, #0
 800c450:	dc03      	bgt.n	800c45a <USBD_GetConfig+0x32>
 800c452:	e015      	b.n	800c480 <USBD_GetConfig+0x58>
 800c454:	2b03      	cmp	r3, #3
 800c456:	d00b      	beq.n	800c470 <USBD_GetConfig+0x48>
 800c458:	e012      	b.n	800c480 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2200      	movs	r2, #0
 800c45e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3308      	adds	r3, #8
 800c464:	2201      	movs	r2, #1
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 f920 	bl	800c6ae <USBD_CtlSendData>
        break;
 800c46e:	e00c      	b.n	800c48a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	3304      	adds	r3, #4
 800c474:	2201      	movs	r2, #1
 800c476:	4619      	mov	r1, r3
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 f918 	bl	800c6ae <USBD_CtlSendData>
        break;
 800c47e:	e004      	b.n	800c48a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c480:	6839      	ldr	r1, [r7, #0]
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 f8a9 	bl	800c5da <USBD_CtlError>
        break;
 800c488:	bf00      	nop
}
 800c48a:	bf00      	nop
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c492:	b580      	push	{r7, lr}
 800c494:	b082      	sub	sp, #8
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4a2:	3b01      	subs	r3, #1
 800c4a4:	2b02      	cmp	r3, #2
 800c4a6:	d81e      	bhi.n	800c4e6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	88db      	ldrh	r3, [r3, #6]
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d004      	beq.n	800c4ba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c4b0:	6839      	ldr	r1, [r7, #0]
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 f891 	bl	800c5da <USBD_CtlError>
        break;
 800c4b8:	e01a      	b.n	800c4f0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d005      	beq.n	800c4d6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	f043 0202 	orr.w	r2, r3, #2
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	330c      	adds	r3, #12
 800c4da:	2202      	movs	r2, #2
 800c4dc:	4619      	mov	r1, r3
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f8e5 	bl	800c6ae <USBD_CtlSendData>
      break;
 800c4e4:	e004      	b.n	800c4f0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 f876 	bl	800c5da <USBD_CtlError>
      break;
 800c4ee:	bf00      	nop
  }
}
 800c4f0:	bf00      	nop
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	885b      	ldrh	r3, [r3, #2]
 800c506:	2b01      	cmp	r3, #1
 800c508:	d106      	bne.n	800c518 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2201      	movs	r2, #1
 800c50e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 f929 	bl	800c76a <USBD_CtlSendStatus>
  }
}
 800c518:	bf00      	nop
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c530:	3b01      	subs	r3, #1
 800c532:	2b02      	cmp	r3, #2
 800c534:	d80b      	bhi.n	800c54e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	885b      	ldrh	r3, [r3, #2]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d10c      	bne.n	800c558 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2200      	movs	r2, #0
 800c542:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f90f 	bl	800c76a <USBD_CtlSendStatus>
      }
      break;
 800c54c:	e004      	b.n	800c558 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c54e:	6839      	ldr	r1, [r7, #0]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 f842 	bl	800c5da <USBD_CtlError>
      break;
 800c556:	e000      	b.n	800c55a <USBD_ClrFeature+0x3a>
      break;
 800c558:	bf00      	nop
  }
}
 800c55a:	bf00      	nop
 800c55c:	3708      	adds	r7, #8
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c562:	b480      	push	{r7}
 800c564:	b083      	sub	sp, #12
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
 800c56a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	781a      	ldrb	r2, [r3, #0]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	785a      	ldrb	r2, [r3, #1]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	3302      	adds	r3, #2
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	b29a      	uxth	r2, r3
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	3303      	adds	r3, #3
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	021b      	lsls	r3, r3, #8
 800c58e:	b29b      	uxth	r3, r3
 800c590:	4413      	add	r3, r2
 800c592:	b29a      	uxth	r2, r3
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	3304      	adds	r3, #4
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	b29a      	uxth	r2, r3
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	3305      	adds	r3, #5
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	021b      	lsls	r3, r3, #8
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	4413      	add	r3, r2
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	3306      	adds	r3, #6
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	3307      	adds	r3, #7
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	021b      	lsls	r3, r3, #8
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	4413      	add	r3, r2
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	80da      	strh	r2, [r3, #6]

}
 800c5d0:	bf00      	nop
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bc80      	pop	{r7}
 800c5d8:	4770      	bx	lr

0800c5da <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b082      	sub	sp, #8
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c5e4:	2180      	movs	r1, #128	; 0x80
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fc62 	bl	800ceb0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 fc5e 	bl	800ceb0 <USBD_LL_StallEP>
}
 800c5f4:	bf00      	nop
 800c5f6:	3708      	adds	r7, #8
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c608:	2300      	movs	r3, #0
 800c60a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d032      	beq.n	800c678 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f000 f834 	bl	800c680 <USBD_GetLen>
 800c618:	4603      	mov	r3, r0
 800c61a:	3301      	adds	r3, #1
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	005b      	lsls	r3, r3, #1
 800c620:	b29a      	uxth	r2, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c626:	7dfb      	ldrb	r3, [r7, #23]
 800c628:	1c5a      	adds	r2, r3, #1
 800c62a:	75fa      	strb	r2, [r7, #23]
 800c62c:	461a      	mov	r2, r3
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	4413      	add	r3, r2
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	7812      	ldrb	r2, [r2, #0]
 800c636:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c638:	7dfb      	ldrb	r3, [r7, #23]
 800c63a:	1c5a      	adds	r2, r3, #1
 800c63c:	75fa      	strb	r2, [r7, #23]
 800c63e:	461a      	mov	r2, r3
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	4413      	add	r3, r2
 800c644:	2203      	movs	r2, #3
 800c646:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c648:	e012      	b.n	800c670 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	1c5a      	adds	r2, r3, #1
 800c64e:	60fa      	str	r2, [r7, #12]
 800c650:	7dfa      	ldrb	r2, [r7, #23]
 800c652:	1c51      	adds	r1, r2, #1
 800c654:	75f9      	strb	r1, [r7, #23]
 800c656:	4611      	mov	r1, r2
 800c658:	68ba      	ldr	r2, [r7, #8]
 800c65a:	440a      	add	r2, r1
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c660:	7dfb      	ldrb	r3, [r7, #23]
 800c662:	1c5a      	adds	r2, r3, #1
 800c664:	75fa      	strb	r2, [r7, #23]
 800c666:	461a      	mov	r2, r3
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	4413      	add	r3, r2
 800c66c:	2200      	movs	r2, #0
 800c66e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1e8      	bne.n	800c64a <USBD_GetString+0x4e>
    }
  }
}
 800c678:	bf00      	nop
 800c67a:	3718      	adds	r7, #24
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c688:	2300      	movs	r3, #0
 800c68a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c68c:	e005      	b.n	800c69a <USBD_GetLen+0x1a>
  {
    len++;
 800c68e:	7bfb      	ldrb	r3, [r7, #15]
 800c690:	3301      	adds	r3, #1
 800c692:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	3301      	adds	r3, #1
 800c698:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1f5      	bne.n	800c68e <USBD_GetLen+0xe>
  }

  return len;
 800c6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bc80      	pop	{r7}
 800c6ac:	4770      	bx	lr

0800c6ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b084      	sub	sp, #16
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	60f8      	str	r0, [r7, #12]
 800c6b6:	60b9      	str	r1, [r7, #8]
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2202      	movs	r2, #2
 800c6c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c6c4:	88fa      	ldrh	r2, [r7, #6]
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c6ca:	88fa      	ldrh	r2, [r7, #6]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6d0:	88fb      	ldrh	r3, [r7, #6]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	68f8      	ldr	r0, [r7, #12]
 800c6d8:	f000 fc73 	bl	800cfc2 <USBD_LL_Transmit>

  return USBD_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b084      	sub	sp, #16
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	60f8      	str	r0, [r7, #12]
 800c6ee:	60b9      	str	r1, [r7, #8]
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6f4:	88fb      	ldrh	r3, [r7, #6]
 800c6f6:	68ba      	ldr	r2, [r7, #8]
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f000 fc61 	bl	800cfc2 <USBD_LL_Transmit>

  return USBD_OK;
 800c700:	2300      	movs	r3, #0
}
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b084      	sub	sp, #16
 800c70e:	af00      	add	r7, sp, #0
 800c710:	60f8      	str	r0, [r7, #12]
 800c712:	60b9      	str	r1, [r7, #8]
 800c714:	4613      	mov	r3, r2
 800c716:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2203      	movs	r2, #3
 800c71c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c720:	88fa      	ldrh	r2, [r7, #6]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c728:	88fa      	ldrh	r2, [r7, #6]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c730:	88fb      	ldrh	r3, [r7, #6]
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	2100      	movs	r1, #0
 800c736:	68f8      	ldr	r0, [r7, #12]
 800c738:	f000 fc66 	bl	800d008 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b084      	sub	sp, #16
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	60f8      	str	r0, [r7, #12]
 800c74e:	60b9      	str	r1, [r7, #8]
 800c750:	4613      	mov	r3, r2
 800c752:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c754:	88fb      	ldrh	r3, [r7, #6]
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	2100      	movs	r1, #0
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f000 fc54 	bl	800d008 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b082      	sub	sp, #8
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2204      	movs	r2, #4
 800c776:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c77a:	2300      	movs	r3, #0
 800c77c:	2200      	movs	r2, #0
 800c77e:	2100      	movs	r1, #0
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fc1e 	bl	800cfc2 <USBD_LL_Transmit>

  return USBD_OK;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2205      	movs	r2, #5
 800c79c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fc2e 	bl	800d008 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
	...

0800c7b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	4912      	ldr	r1, [pc, #72]	; (800c808 <MX_USB_DEVICE_Init+0x50>)
 800c7c0:	4812      	ldr	r0, [pc, #72]	; (800c80c <MX_USB_DEVICE_Init+0x54>)
 800c7c2:	f7fe ff5e 	bl	800b682 <USBD_Init>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c7cc:	f7f7 f864 	bl	8003898 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c7d0:	490f      	ldr	r1, [pc, #60]	; (800c810 <MX_USB_DEVICE_Init+0x58>)
 800c7d2:	480e      	ldr	r0, [pc, #56]	; (800c80c <MX_USB_DEVICE_Init+0x54>)
 800c7d4:	f7fe ff80 	bl	800b6d8 <USBD_RegisterClass>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d001      	beq.n	800c7e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c7de:	f7f7 f85b 	bl	8003898 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c7e2:	490c      	ldr	r1, [pc, #48]	; (800c814 <MX_USB_DEVICE_Init+0x5c>)
 800c7e4:	4809      	ldr	r0, [pc, #36]	; (800c80c <MX_USB_DEVICE_Init+0x54>)
 800c7e6:	f7fe feb1 	bl	800b54c <USBD_CDC_RegisterInterface>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d001      	beq.n	800c7f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c7f0:	f7f7 f852 	bl	8003898 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c7f4:	4805      	ldr	r0, [pc, #20]	; (800c80c <MX_USB_DEVICE_Init+0x54>)
 800c7f6:	f7fe ff88 	bl	800b70a <USBD_Start>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d001      	beq.n	800c804 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c800:	f7f7 f84a 	bl	8003898 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c804:	bf00      	nop
 800c806:	bd80      	pop	{r7, pc}
 800c808:	20000138 	.word	0x20000138
 800c80c:	200003f4 	.word	0x200003f4
 800c810:	20000024 	.word	0x20000024
 800c814:	20000128 	.word	0x20000128

0800c818 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c81c:	2200      	movs	r2, #0
 800c81e:	4905      	ldr	r1, [pc, #20]	; (800c834 <CDC_Init_FS+0x1c>)
 800c820:	4805      	ldr	r0, [pc, #20]	; (800c838 <CDC_Init_FS+0x20>)
 800c822:	f7fe fea9 	bl	800b578 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c826:	4905      	ldr	r1, [pc, #20]	; (800c83c <CDC_Init_FS+0x24>)
 800c828:	4803      	ldr	r0, [pc, #12]	; (800c838 <CDC_Init_FS+0x20>)
 800c82a:	f7fe febe 	bl	800b5aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c82e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c830:	4618      	mov	r0, r3
 800c832:	bd80      	pop	{r7, pc}
 800c834:	20000738 	.word	0x20000738
 800c838:	200003f4 	.word	0x200003f4
 800c83c:	200006b8 	.word	0x200006b8

0800c840 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c840:	b480      	push	{r7}
 800c842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c844:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c846:	4618      	mov	r0, r3
 800c848:	46bd      	mov	sp, r7
 800c84a:	bc80      	pop	{r7}
 800c84c:	4770      	bx	lr
	...

0800c850 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	4603      	mov	r3, r0
 800c858:	6039      	str	r1, [r7, #0]
 800c85a:	71fb      	strb	r3, [r7, #7]
 800c85c:	4613      	mov	r3, r2
 800c85e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c860:	79fb      	ldrb	r3, [r7, #7]
 800c862:	2b23      	cmp	r3, #35	; 0x23
 800c864:	d84a      	bhi.n	800c8fc <CDC_Control_FS+0xac>
 800c866:	a201      	add	r2, pc, #4	; (adr r2, 800c86c <CDC_Control_FS+0x1c>)
 800c868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c86c:	0800c8fd 	.word	0x0800c8fd
 800c870:	0800c8fd 	.word	0x0800c8fd
 800c874:	0800c8fd 	.word	0x0800c8fd
 800c878:	0800c8fd 	.word	0x0800c8fd
 800c87c:	0800c8fd 	.word	0x0800c8fd
 800c880:	0800c8fd 	.word	0x0800c8fd
 800c884:	0800c8fd 	.word	0x0800c8fd
 800c888:	0800c8fd 	.word	0x0800c8fd
 800c88c:	0800c8fd 	.word	0x0800c8fd
 800c890:	0800c8fd 	.word	0x0800c8fd
 800c894:	0800c8fd 	.word	0x0800c8fd
 800c898:	0800c8fd 	.word	0x0800c8fd
 800c89c:	0800c8fd 	.word	0x0800c8fd
 800c8a0:	0800c8fd 	.word	0x0800c8fd
 800c8a4:	0800c8fd 	.word	0x0800c8fd
 800c8a8:	0800c8fd 	.word	0x0800c8fd
 800c8ac:	0800c8fd 	.word	0x0800c8fd
 800c8b0:	0800c8fd 	.word	0x0800c8fd
 800c8b4:	0800c8fd 	.word	0x0800c8fd
 800c8b8:	0800c8fd 	.word	0x0800c8fd
 800c8bc:	0800c8fd 	.word	0x0800c8fd
 800c8c0:	0800c8fd 	.word	0x0800c8fd
 800c8c4:	0800c8fd 	.word	0x0800c8fd
 800c8c8:	0800c8fd 	.word	0x0800c8fd
 800c8cc:	0800c8fd 	.word	0x0800c8fd
 800c8d0:	0800c8fd 	.word	0x0800c8fd
 800c8d4:	0800c8fd 	.word	0x0800c8fd
 800c8d8:	0800c8fd 	.word	0x0800c8fd
 800c8dc:	0800c8fd 	.word	0x0800c8fd
 800c8e0:	0800c8fd 	.word	0x0800c8fd
 800c8e4:	0800c8fd 	.word	0x0800c8fd
 800c8e8:	0800c8fd 	.word	0x0800c8fd
 800c8ec:	0800c8fd 	.word	0x0800c8fd
 800c8f0:	0800c8fd 	.word	0x0800c8fd
 800c8f4:	0800c8fd 	.word	0x0800c8fd
 800c8f8:	0800c8fd 	.word	0x0800c8fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c8fc:	bf00      	nop
  }

  return (USBD_OK);
 800c8fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c900:	4618      	mov	r0, r3
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	bc80      	pop	{r7}
 800c908:	4770      	bx	lr
 800c90a:	bf00      	nop

0800c90c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c916:	6879      	ldr	r1, [r7, #4]
 800c918:	480a      	ldr	r0, [pc, #40]	; (800c944 <CDC_Receive_FS+0x38>)
 800c91a:	f7fe fe46 	bl	800b5aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c91e:	4809      	ldr	r0, [pc, #36]	; (800c944 <CDC_Receive_FS+0x38>)
 800c920:	f7fe fe85 	bl	800b62e <USBD_CDC_ReceivePacket>

  if(*Len !=0)
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d006      	beq.n	800c93a <CDC_Receive_FS+0x2e>
  {
	  memcpy(Rx_Buffer, UserRxBufferFS, *Len);
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	461a      	mov	r2, r3
 800c932:	4905      	ldr	r1, [pc, #20]	; (800c948 <CDC_Receive_FS+0x3c>)
 800c934:	4805      	ldr	r0, [pc, #20]	; (800c94c <CDC_Receive_FS+0x40>)
 800c936:	f000 fc13 	bl	800d160 <memcpy>
  }
  return (USBD_OK);
 800c93a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	200003f4 	.word	0x200003f4
 800c948:	200006b8 	.word	0x200006b8
 800c94c:	200002c8 	.word	0x200002c8

0800c950 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	460b      	mov	r3, r1
 800c95a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c95c:	2300      	movs	r3, #0
 800c95e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c960:	4b0d      	ldr	r3, [pc, #52]	; (800c998 <CDC_Transmit_FS+0x48>)
 800c962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c966:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d001      	beq.n	800c976 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c972:	2301      	movs	r3, #1
 800c974:	e00b      	b.n	800c98e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c976:	887b      	ldrh	r3, [r7, #2]
 800c978:	461a      	mov	r2, r3
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	4806      	ldr	r0, [pc, #24]	; (800c998 <CDC_Transmit_FS+0x48>)
 800c97e:	f7fe fdfb 	bl	800b578 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c982:	4805      	ldr	r0, [pc, #20]	; (800c998 <CDC_Transmit_FS+0x48>)
 800c984:	f7fe fe24 	bl	800b5d0 <USBD_CDC_TransmitPacket>
 800c988:	4603      	mov	r3, r0
 800c98a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	200003f4 	.word	0x200003f4

0800c99c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	6039      	str	r1, [r7, #0]
 800c9a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	2212      	movs	r2, #18
 800c9ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c9ae:	4b03      	ldr	r3, [pc, #12]	; (800c9bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bc80      	pop	{r7}
 800c9b8:	4770      	bx	lr
 800c9ba:	bf00      	nop
 800c9bc:	20000154 	.word	0x20000154

0800c9c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	6039      	str	r1, [r7, #0]
 800c9ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2204      	movs	r2, #4
 800c9d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c9d2:	4b03      	ldr	r3, [pc, #12]	; (800c9e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bc80      	pop	{r7}
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	20000168 	.word	0x20000168

0800c9e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	6039      	str	r1, [r7, #0]
 800c9ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9f0:	79fb      	ldrb	r3, [r7, #7]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d105      	bne.n	800ca02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	4907      	ldr	r1, [pc, #28]	; (800ca18 <USBD_FS_ProductStrDescriptor+0x34>)
 800c9fa:	4808      	ldr	r0, [pc, #32]	; (800ca1c <USBD_FS_ProductStrDescriptor+0x38>)
 800c9fc:	f7ff fdfe 	bl	800c5fc <USBD_GetString>
 800ca00:	e004      	b.n	800ca0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ca02:	683a      	ldr	r2, [r7, #0]
 800ca04:	4904      	ldr	r1, [pc, #16]	; (800ca18 <USBD_FS_ProductStrDescriptor+0x34>)
 800ca06:	4805      	ldr	r0, [pc, #20]	; (800ca1c <USBD_FS_ProductStrDescriptor+0x38>)
 800ca08:	f7ff fdf8 	bl	800c5fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca0c:	4b02      	ldr	r3, [pc, #8]	; (800ca18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	200007b8 	.word	0x200007b8
 800ca1c:	0800e1dc 	.word	0x0800e1dc

0800ca20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	4603      	mov	r3, r0
 800ca28:	6039      	str	r1, [r7, #0]
 800ca2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca2c:	683a      	ldr	r2, [r7, #0]
 800ca2e:	4904      	ldr	r1, [pc, #16]	; (800ca40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ca30:	4804      	ldr	r0, [pc, #16]	; (800ca44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ca32:	f7ff fde3 	bl	800c5fc <USBD_GetString>
  return USBD_StrDesc;
 800ca36:	4b02      	ldr	r3, [pc, #8]	; (800ca40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	200007b8 	.word	0x200007b8
 800ca44:	0800e1f4 	.word	0x0800e1f4

0800ca48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	6039      	str	r1, [r7, #0]
 800ca52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	221a      	movs	r2, #26
 800ca58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca5a:	f000 f843 	bl	800cae4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ca5e:	4b02      	ldr	r3, [pc, #8]	; (800ca68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	2000016c 	.word	0x2000016c

0800ca6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	4603      	mov	r3, r0
 800ca74:	6039      	str	r1, [r7, #0]
 800ca76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ca78:	79fb      	ldrb	r3, [r7, #7]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d105      	bne.n	800ca8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	4907      	ldr	r1, [pc, #28]	; (800caa0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca82:	4808      	ldr	r0, [pc, #32]	; (800caa4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca84:	f7ff fdba 	bl	800c5fc <USBD_GetString>
 800ca88:	e004      	b.n	800ca94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	4904      	ldr	r1, [pc, #16]	; (800caa0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca8e:	4805      	ldr	r0, [pc, #20]	; (800caa4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca90:	f7ff fdb4 	bl	800c5fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca94:	4b02      	ldr	r3, [pc, #8]	; (800caa0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	200007b8 	.word	0x200007b8
 800caa4:	0800e208 	.word	0x0800e208

0800caa8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	4603      	mov	r3, r0
 800cab0:	6039      	str	r1, [r7, #0]
 800cab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cab4:	79fb      	ldrb	r3, [r7, #7]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d105      	bne.n	800cac6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800caba:	683a      	ldr	r2, [r7, #0]
 800cabc:	4907      	ldr	r1, [pc, #28]	; (800cadc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cabe:	4808      	ldr	r0, [pc, #32]	; (800cae0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cac0:	f7ff fd9c 	bl	800c5fc <USBD_GetString>
 800cac4:	e004      	b.n	800cad0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cac6:	683a      	ldr	r2, [r7, #0]
 800cac8:	4904      	ldr	r1, [pc, #16]	; (800cadc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800caca:	4805      	ldr	r0, [pc, #20]	; (800cae0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cacc:	f7ff fd96 	bl	800c5fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cad0:	4b02      	ldr	r3, [pc, #8]	; (800cadc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	200007b8 	.word	0x200007b8
 800cae0:	0800e214 	.word	0x0800e214

0800cae4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800caea:	4b0f      	ldr	r3, [pc, #60]	; (800cb28 <Get_SerialNum+0x44>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800caf0:	4b0e      	ldr	r3, [pc, #56]	; (800cb2c <Get_SerialNum+0x48>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800caf6:	4b0e      	ldr	r3, [pc, #56]	; (800cb30 <Get_SerialNum+0x4c>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cafc:	68fa      	ldr	r2, [r7, #12]
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4413      	add	r3, r2
 800cb02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d009      	beq.n	800cb1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cb0a:	2208      	movs	r2, #8
 800cb0c:	4909      	ldr	r1, [pc, #36]	; (800cb34 <Get_SerialNum+0x50>)
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f000 f814 	bl	800cb3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cb14:	2204      	movs	r2, #4
 800cb16:	4908      	ldr	r1, [pc, #32]	; (800cb38 <Get_SerialNum+0x54>)
 800cb18:	68b8      	ldr	r0, [r7, #8]
 800cb1a:	f000 f80f 	bl	800cb3c <IntToUnicode>
  }
}
 800cb1e:	bf00      	nop
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	1ffff7e8 	.word	0x1ffff7e8
 800cb2c:	1ffff7ec 	.word	0x1ffff7ec
 800cb30:	1ffff7f0 	.word	0x1ffff7f0
 800cb34:	2000016e 	.word	0x2000016e
 800cb38:	2000017e 	.word	0x2000017e

0800cb3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b087      	sub	sp, #28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	4613      	mov	r3, r2
 800cb48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb4e:	2300      	movs	r3, #0
 800cb50:	75fb      	strb	r3, [r7, #23]
 800cb52:	e027      	b.n	800cba4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	0f1b      	lsrs	r3, r3, #28
 800cb58:	2b09      	cmp	r3, #9
 800cb5a:	d80b      	bhi.n	800cb74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	0f1b      	lsrs	r3, r3, #28
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	7dfb      	ldrb	r3, [r7, #23]
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	4619      	mov	r1, r3
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	440b      	add	r3, r1
 800cb6c:	3230      	adds	r2, #48	; 0x30
 800cb6e:	b2d2      	uxtb	r2, r2
 800cb70:	701a      	strb	r2, [r3, #0]
 800cb72:	e00a      	b.n	800cb8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	0f1b      	lsrs	r3, r3, #28
 800cb78:	b2da      	uxtb	r2, r3
 800cb7a:	7dfb      	ldrb	r3, [r7, #23]
 800cb7c:	005b      	lsls	r3, r3, #1
 800cb7e:	4619      	mov	r1, r3
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	440b      	add	r3, r1
 800cb84:	3237      	adds	r2, #55	; 0x37
 800cb86:	b2d2      	uxtb	r2, r2
 800cb88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	011b      	lsls	r3, r3, #4
 800cb8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cb90:	7dfb      	ldrb	r3, [r7, #23]
 800cb92:	005b      	lsls	r3, r3, #1
 800cb94:	3301      	adds	r3, #1
 800cb96:	68ba      	ldr	r2, [r7, #8]
 800cb98:	4413      	add	r3, r2
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cb9e:	7dfb      	ldrb	r3, [r7, #23]
 800cba0:	3301      	adds	r3, #1
 800cba2:	75fb      	strb	r3, [r7, #23]
 800cba4:	7dfa      	ldrb	r2, [r7, #23]
 800cba6:	79fb      	ldrb	r3, [r7, #7]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d3d3      	bcc.n	800cb54 <IntToUnicode+0x18>
  }
}
 800cbac:	bf00      	nop
 800cbae:	bf00      	nop
 800cbb0:	371c      	adds	r7, #28
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bc80      	pop	{r7}
 800cbb6:	4770      	bx	lr

0800cbb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a0d      	ldr	r2, [pc, #52]	; (800cbfc <HAL_PCD_MspInit+0x44>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d113      	bne.n	800cbf2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cbca:	4b0d      	ldr	r3, [pc, #52]	; (800cc00 <HAL_PCD_MspInit+0x48>)
 800cbcc:	69db      	ldr	r3, [r3, #28]
 800cbce:	4a0c      	ldr	r2, [pc, #48]	; (800cc00 <HAL_PCD_MspInit+0x48>)
 800cbd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cbd4:	61d3      	str	r3, [r2, #28]
 800cbd6:	4b0a      	ldr	r3, [pc, #40]	; (800cc00 <HAL_PCD_MspInit+0x48>)
 800cbd8:	69db      	ldr	r3, [r3, #28]
 800cbda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cbde:	60fb      	str	r3, [r7, #12]
 800cbe0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	2014      	movs	r0, #20
 800cbe8:	f7f8 f859 	bl	8004c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cbec:	2014      	movs	r0, #20
 800cbee:	f7f8 f872 	bl	8004cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cbf2:	bf00      	nop
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	40005c00 	.word	0x40005c00
 800cc00:	40021000 	.word	0x40021000

0800cc04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cc18:	4619      	mov	r1, r3
 800cc1a:	4610      	mov	r0, r2
 800cc1c:	f7fe fdbd 	bl	800b79a <USBD_LL_SetupStage>
}
 800cc20:	bf00      	nop
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	460b      	mov	r3, r1
 800cc32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cc3a:	78fa      	ldrb	r2, [r7, #3]
 800cc3c:	6879      	ldr	r1, [r7, #4]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	4413      	add	r3, r2
 800cc44:	00db      	lsls	r3, r3, #3
 800cc46:	440b      	add	r3, r1
 800cc48:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	78fb      	ldrb	r3, [r7, #3]
 800cc50:	4619      	mov	r1, r3
 800cc52:	f7fe fdef 	bl	800b834 <USBD_LL_DataOutStage>
}
 800cc56:	bf00      	nop
 800cc58:	3708      	adds	r7, #8
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b082      	sub	sp, #8
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
 800cc66:	460b      	mov	r3, r1
 800cc68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cc70:	78fa      	ldrb	r2, [r7, #3]
 800cc72:	6879      	ldr	r1, [r7, #4]
 800cc74:	4613      	mov	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	00db      	lsls	r3, r3, #3
 800cc7c:	440b      	add	r3, r1
 800cc7e:	333c      	adds	r3, #60	; 0x3c
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	78fb      	ldrb	r3, [r7, #3]
 800cc84:	4619      	mov	r1, r3
 800cc86:	f7fe fe46 	bl	800b916 <USBD_LL_DataInStage>
}
 800cc8a:	bf00      	nop
 800cc8c:	3708      	adds	r7, #8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}

0800cc92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc92:	b580      	push	{r7, lr}
 800cc94:	b082      	sub	sp, #8
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7fe ff56 	bl	800bb52 <USBD_LL_SOF>
}
 800cca6:	bf00      	nop
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccae:	b580      	push	{r7, lr}
 800ccb0:	b084      	sub	sp, #16
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d001      	beq.n	800ccc6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ccc2:	f7f6 fde9 	bl	8003898 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cccc:	7bfa      	ldrb	r2, [r7, #15]
 800ccce:	4611      	mov	r1, r2
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7fe ff06 	bl	800bae2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7fe febf 	bl	800ba60 <USBD_LL_Reset>
}
 800cce2:	bf00      	nop
 800cce4:	3710      	adds	r7, #16
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
	...

0800ccec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fe ff00 	bl	800bb00 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	699b      	ldr	r3, [r3, #24]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d005      	beq.n	800cd14 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd08:	4b04      	ldr	r3, [pc, #16]	; (800cd1c <HAL_PCD_SuspendCallback+0x30>)
 800cd0a:	691b      	ldr	r3, [r3, #16]
 800cd0c:	4a03      	ldr	r2, [pc, #12]	; (800cd1c <HAL_PCD_SuspendCallback+0x30>)
 800cd0e:	f043 0306 	orr.w	r3, r3, #6
 800cd12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cd14:	bf00      	nop
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	e000ed00 	.word	0xe000ed00

0800cd20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fe fefa 	bl	800bb28 <USBD_LL_Resume>
}
 800cd34:	bf00      	nop
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cd44:	4a28      	ldr	r2, [pc, #160]	; (800cde8 <USBD_LL_Init+0xac>)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4a26      	ldr	r2, [pc, #152]	; (800cde8 <USBD_LL_Init+0xac>)
 800cd50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cd54:	4b24      	ldr	r3, [pc, #144]	; (800cde8 <USBD_LL_Init+0xac>)
 800cd56:	4a25      	ldr	r2, [pc, #148]	; (800cdec <USBD_LL_Init+0xb0>)
 800cd58:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cd5a:	4b23      	ldr	r3, [pc, #140]	; (800cde8 <USBD_LL_Init+0xac>)
 800cd5c:	2208      	movs	r2, #8
 800cd5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cd60:	4b21      	ldr	r3, [pc, #132]	; (800cde8 <USBD_LL_Init+0xac>)
 800cd62:	2202      	movs	r2, #2
 800cd64:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cd66:	4b20      	ldr	r3, [pc, #128]	; (800cde8 <USBD_LL_Init+0xac>)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cd6c:	4b1e      	ldr	r3, [pc, #120]	; (800cde8 <USBD_LL_Init+0xac>)
 800cd6e:	2200      	movs	r2, #0
 800cd70:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cd72:	4b1d      	ldr	r3, [pc, #116]	; (800cde8 <USBD_LL_Init+0xac>)
 800cd74:	2200      	movs	r2, #0
 800cd76:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cd78:	481b      	ldr	r0, [pc, #108]	; (800cde8 <USBD_LL_Init+0xac>)
 800cd7a:	f7f8 fbb9 	bl	80054f0 <HAL_PCD_Init>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d001      	beq.n	800cd88 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cd84:	f7f6 fd88 	bl	8003898 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd8e:	2318      	movs	r3, #24
 800cd90:	2200      	movs	r2, #0
 800cd92:	2100      	movs	r1, #0
 800cd94:	f7fa f82d 	bl	8006df2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd9e:	2358      	movs	r3, #88	; 0x58
 800cda0:	2200      	movs	r2, #0
 800cda2:	2180      	movs	r1, #128	; 0x80
 800cda4:	f7fa f825 	bl	8006df2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cdae:	23c0      	movs	r3, #192	; 0xc0
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	2181      	movs	r1, #129	; 0x81
 800cdb4:	f7fa f81d 	bl	8006df2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cdbe:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	2101      	movs	r1, #1
 800cdc6:	f7fa f814 	bl	8006df2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cdd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	2182      	movs	r1, #130	; 0x82
 800cdd8:	f7fa f80b 	bl	8006df2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	200009b8 	.word	0x200009b8
 800cdec:	40005c00 	.word	0x40005c00

0800cdf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7f8 fc7d 	bl	8005706 <HAL_PCD_Start>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
 800ce12:	4618      	mov	r0, r3
 800ce14:	f000 f94e 	bl	800d0b4 <USBD_Get_USB_Status>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b084      	sub	sp, #16
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
 800ce2e:	4608      	mov	r0, r1
 800ce30:	4611      	mov	r1, r2
 800ce32:	461a      	mov	r2, r3
 800ce34:	4603      	mov	r3, r0
 800ce36:	70fb      	strb	r3, [r7, #3]
 800ce38:	460b      	mov	r3, r1
 800ce3a:	70bb      	strb	r3, [r7, #2]
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce40:	2300      	movs	r3, #0
 800ce42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce44:	2300      	movs	r3, #0
 800ce46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce4e:	78bb      	ldrb	r3, [r7, #2]
 800ce50:	883a      	ldrh	r2, [r7, #0]
 800ce52:	78f9      	ldrb	r1, [r7, #3]
 800ce54:	f7f8 fdf5 	bl	8005a42 <HAL_PCD_EP_Open>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f000 f928 	bl	800d0b4 <USBD_Get_USB_Status>
 800ce64:	4603      	mov	r3, r0
 800ce66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce72:	b580      	push	{r7, lr}
 800ce74:	b084      	sub	sp, #16
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce82:	2300      	movs	r3, #0
 800ce84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce8c:	78fa      	ldrb	r2, [r7, #3]
 800ce8e:	4611      	mov	r1, r2
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7f8 fe3c 	bl	8005b0e <HAL_PCD_EP_Close>
 800ce96:	4603      	mov	r3, r0
 800ce98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce9a:	7bfb      	ldrb	r3, [r7, #15]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f000 f909 	bl	800d0b4 <USBD_Get_USB_Status>
 800cea2:	4603      	mov	r3, r0
 800cea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cea6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3710      	adds	r7, #16
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cebc:	2300      	movs	r3, #0
 800cebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cec0:	2300      	movs	r3, #0
 800cec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ceca:	78fa      	ldrb	r2, [r7, #3]
 800cecc:	4611      	mov	r1, r2
 800cece:	4618      	mov	r0, r3
 800ced0:	f7f8 fefc 	bl	8005ccc <HAL_PCD_EP_SetStall>
 800ced4:	4603      	mov	r3, r0
 800ced6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ced8:	7bfb      	ldrb	r3, [r7, #15]
 800ceda:	4618      	mov	r0, r3
 800cedc:	f000 f8ea 	bl	800d0b4 <USBD_Get_USB_Status>
 800cee0:	4603      	mov	r3, r0
 800cee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cee4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b084      	sub	sp, #16
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	460b      	mov	r3, r1
 800cef8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cefa:	2300      	movs	r3, #0
 800cefc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cefe:	2300      	movs	r3, #0
 800cf00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf08:	78fa      	ldrb	r2, [r7, #3]
 800cf0a:	4611      	mov	r1, r2
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7f8 ff3d 	bl	8005d8c <HAL_PCD_EP_ClrStall>
 800cf12:	4603      	mov	r3, r0
 800cf14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf16:	7bfb      	ldrb	r3, [r7, #15]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f000 f8cb 	bl	800d0b4 <USBD_Get_USB_Status>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf22:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3710      	adds	r7, #16
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b085      	sub	sp, #20
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	460b      	mov	r3, r1
 800cf36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	da0c      	bge.n	800cf62 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cf48:	78fb      	ldrb	r3, [r7, #3]
 800cf4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf4e:	68f9      	ldr	r1, [r7, #12]
 800cf50:	1c5a      	adds	r2, r3, #1
 800cf52:	4613      	mov	r3, r2
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4413      	add	r3, r2
 800cf58:	00db      	lsls	r3, r3, #3
 800cf5a:	440b      	add	r3, r1
 800cf5c:	3302      	adds	r3, #2
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	e00b      	b.n	800cf7a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf62:	78fb      	ldrb	r3, [r7, #3]
 800cf64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf68:	68f9      	ldr	r1, [r7, #12]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	4413      	add	r3, r2
 800cf70:	00db      	lsls	r3, r3, #3
 800cf72:	440b      	add	r3, r1
 800cf74:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cf78:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bc80      	pop	{r7}
 800cf82:	4770      	bx	lr

0800cf84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf90:	2300      	movs	r3, #0
 800cf92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf94:	2300      	movs	r3, #0
 800cf96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf9e:	78fa      	ldrb	r2, [r7, #3]
 800cfa0:	4611      	mov	r1, r2
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7f8 fd28 	bl	80059f8 <HAL_PCD_SetAddress>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfac:	7bfb      	ldrb	r3, [r7, #15]
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f000 f880 	bl	800d0b4 <USBD_Get_USB_Status>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b086      	sub	sp, #24
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	60f8      	str	r0, [r7, #12]
 800cfca:	607a      	str	r2, [r7, #4]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	460b      	mov	r3, r1
 800cfd0:	72fb      	strb	r3, [r7, #11]
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cfe4:	893b      	ldrh	r3, [r7, #8]
 800cfe6:	7af9      	ldrb	r1, [r7, #11]
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	f7f8 fe2c 	bl	8005c46 <HAL_PCD_EP_Transmit>
 800cfee:	4603      	mov	r3, r0
 800cff0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cff2:	7dfb      	ldrb	r3, [r7, #23]
 800cff4:	4618      	mov	r0, r3
 800cff6:	f000 f85d 	bl	800d0b4 <USBD_Get_USB_Status>
 800cffa:	4603      	mov	r3, r0
 800cffc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cffe:	7dbb      	ldrb	r3, [r7, #22]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3718      	adds	r7, #24
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b086      	sub	sp, #24
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	607a      	str	r2, [r7, #4]
 800d012:	461a      	mov	r2, r3
 800d014:	460b      	mov	r3, r1
 800d016:	72fb      	strb	r3, [r7, #11]
 800d018:	4613      	mov	r3, r2
 800d01a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d01c:	2300      	movs	r3, #0
 800d01e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d020:	2300      	movs	r3, #0
 800d022:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d02a:	893b      	ldrh	r3, [r7, #8]
 800d02c:	7af9      	ldrb	r1, [r7, #11]
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	f7f8 fdb5 	bl	8005b9e <HAL_PCD_EP_Receive>
 800d034:	4603      	mov	r3, r0
 800d036:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d038:	7dfb      	ldrb	r3, [r7, #23]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f000 f83a 	bl	800d0b4 <USBD_Get_USB_Status>
 800d040:	4603      	mov	r3, r0
 800d042:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d044:	7dbb      	ldrb	r3, [r7, #22]
}
 800d046:	4618      	mov	r0, r3
 800d048:	3718      	adds	r7, #24
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b082      	sub	sp, #8
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
 800d056:	460b      	mov	r3, r1
 800d058:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d060:	78fa      	ldrb	r2, [r7, #3]
 800d062:	4611      	mov	r1, r2
 800d064:	4618      	mov	r0, r3
 800d066:	f7f8 fdd7 	bl	8005c18 <HAL_PCD_EP_GetRxCount>
 800d06a:	4603      	mov	r3, r0
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d07c:	4b02      	ldr	r3, [pc, #8]	; (800d088 <USBD_static_malloc+0x14>)
}
 800d07e:	4618      	mov	r0, r3
 800d080:	370c      	adds	r7, #12
 800d082:	46bd      	mov	sp, r7
 800d084:	bc80      	pop	{r7}
 800d086:	4770      	bx	lr
 800d088:	20000ca4 	.word	0x20000ca4

0800d08c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]

}
 800d094:	bf00      	nop
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	bc80      	pop	{r7}
 800d09c:	4770      	bx	lr

0800d09e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d09e:	b480      	push	{r7}
 800d0a0:	b083      	sub	sp, #12
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d0aa:	bf00      	nop
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bc80      	pop	{r7}
 800d0b2:	4770      	bx	lr

0800d0b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b085      	sub	sp, #20
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d0c2:	79fb      	ldrb	r3, [r7, #7]
 800d0c4:	2b03      	cmp	r3, #3
 800d0c6:	d817      	bhi.n	800d0f8 <USBD_Get_USB_Status+0x44>
 800d0c8:	a201      	add	r2, pc, #4	; (adr r2, 800d0d0 <USBD_Get_USB_Status+0x1c>)
 800d0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ce:	bf00      	nop
 800d0d0:	0800d0e1 	.word	0x0800d0e1
 800d0d4:	0800d0e7 	.word	0x0800d0e7
 800d0d8:	0800d0ed 	.word	0x0800d0ed
 800d0dc:	0800d0f3 	.word	0x0800d0f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d0e4:	e00b      	b.n	800d0fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d0e6:	2302      	movs	r3, #2
 800d0e8:	73fb      	strb	r3, [r7, #15]
    break;
 800d0ea:	e008      	b.n	800d0fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d0f0:	e005      	b.n	800d0fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0f2:	2302      	movs	r3, #2
 800d0f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d0f6:	e002      	b.n	800d0fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d0f8:	2302      	movs	r3, #2
 800d0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d0fc:	bf00      	nop
  }
  return usb_status;
 800d0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d100:	4618      	mov	r0, r3
 800d102:	3714      	adds	r7, #20
 800d104:	46bd      	mov	sp, r7
 800d106:	bc80      	pop	{r7}
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop

0800d10c <__errno>:
 800d10c:	4b01      	ldr	r3, [pc, #4]	; (800d114 <__errno+0x8>)
 800d10e:	6818      	ldr	r0, [r3, #0]
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	20000188 	.word	0x20000188

0800d118 <__libc_init_array>:
 800d118:	b570      	push	{r4, r5, r6, lr}
 800d11a:	2600      	movs	r6, #0
 800d11c:	4d0c      	ldr	r5, [pc, #48]	; (800d150 <__libc_init_array+0x38>)
 800d11e:	4c0d      	ldr	r4, [pc, #52]	; (800d154 <__libc_init_array+0x3c>)
 800d120:	1b64      	subs	r4, r4, r5
 800d122:	10a4      	asrs	r4, r4, #2
 800d124:	42a6      	cmp	r6, r4
 800d126:	d109      	bne.n	800d13c <__libc_init_array+0x24>
 800d128:	f000 fc9c 	bl	800da64 <_init>
 800d12c:	2600      	movs	r6, #0
 800d12e:	4d0a      	ldr	r5, [pc, #40]	; (800d158 <__libc_init_array+0x40>)
 800d130:	4c0a      	ldr	r4, [pc, #40]	; (800d15c <__libc_init_array+0x44>)
 800d132:	1b64      	subs	r4, r4, r5
 800d134:	10a4      	asrs	r4, r4, #2
 800d136:	42a6      	cmp	r6, r4
 800d138:	d105      	bne.n	800d146 <__libc_init_array+0x2e>
 800d13a:	bd70      	pop	{r4, r5, r6, pc}
 800d13c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d140:	4798      	blx	r3
 800d142:	3601      	adds	r6, #1
 800d144:	e7ee      	b.n	800d124 <__libc_init_array+0xc>
 800d146:	f855 3b04 	ldr.w	r3, [r5], #4
 800d14a:	4798      	blx	r3
 800d14c:	3601      	adds	r6, #1
 800d14e:	e7f2      	b.n	800d136 <__libc_init_array+0x1e>
 800d150:	0800e268 	.word	0x0800e268
 800d154:	0800e268 	.word	0x0800e268
 800d158:	0800e268 	.word	0x0800e268
 800d15c:	0800e26c 	.word	0x0800e26c

0800d160 <memcpy>:
 800d160:	440a      	add	r2, r1
 800d162:	4291      	cmp	r1, r2
 800d164:	f100 33ff 	add.w	r3, r0, #4294967295
 800d168:	d100      	bne.n	800d16c <memcpy+0xc>
 800d16a:	4770      	bx	lr
 800d16c:	b510      	push	{r4, lr}
 800d16e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d172:	4291      	cmp	r1, r2
 800d174:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d178:	d1f9      	bne.n	800d16e <memcpy+0xe>
 800d17a:	bd10      	pop	{r4, pc}

0800d17c <memset>:
 800d17c:	4603      	mov	r3, r0
 800d17e:	4402      	add	r2, r0
 800d180:	4293      	cmp	r3, r2
 800d182:	d100      	bne.n	800d186 <memset+0xa>
 800d184:	4770      	bx	lr
 800d186:	f803 1b01 	strb.w	r1, [r3], #1
 800d18a:	e7f9      	b.n	800d180 <memset+0x4>

0800d18c <siprintf>:
 800d18c:	b40e      	push	{r1, r2, r3}
 800d18e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d192:	b500      	push	{lr}
 800d194:	b09c      	sub	sp, #112	; 0x70
 800d196:	ab1d      	add	r3, sp, #116	; 0x74
 800d198:	9002      	str	r0, [sp, #8]
 800d19a:	9006      	str	r0, [sp, #24]
 800d19c:	9107      	str	r1, [sp, #28]
 800d19e:	9104      	str	r1, [sp, #16]
 800d1a0:	4808      	ldr	r0, [pc, #32]	; (800d1c4 <siprintf+0x38>)
 800d1a2:	4909      	ldr	r1, [pc, #36]	; (800d1c8 <siprintf+0x3c>)
 800d1a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1a8:	9105      	str	r1, [sp, #20]
 800d1aa:	6800      	ldr	r0, [r0, #0]
 800d1ac:	a902      	add	r1, sp, #8
 800d1ae:	9301      	str	r3, [sp, #4]
 800d1b0:	f000 f868 	bl	800d284 <_svfiprintf_r>
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	9b02      	ldr	r3, [sp, #8]
 800d1b8:	701a      	strb	r2, [r3, #0]
 800d1ba:	b01c      	add	sp, #112	; 0x70
 800d1bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1c0:	b003      	add	sp, #12
 800d1c2:	4770      	bx	lr
 800d1c4:	20000188 	.word	0x20000188
 800d1c8:	ffff0208 	.word	0xffff0208

0800d1cc <__ssputs_r>:
 800d1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1d0:	688e      	ldr	r6, [r1, #8]
 800d1d2:	4682      	mov	sl, r0
 800d1d4:	429e      	cmp	r6, r3
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	4690      	mov	r8, r2
 800d1da:	461f      	mov	r7, r3
 800d1dc:	d838      	bhi.n	800d250 <__ssputs_r+0x84>
 800d1de:	898a      	ldrh	r2, [r1, #12]
 800d1e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d1e4:	d032      	beq.n	800d24c <__ssputs_r+0x80>
 800d1e6:	6825      	ldr	r5, [r4, #0]
 800d1e8:	6909      	ldr	r1, [r1, #16]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	eba5 0901 	sub.w	r9, r5, r1
 800d1f0:	6965      	ldr	r5, [r4, #20]
 800d1f2:	444b      	add	r3, r9
 800d1f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1fc:	106d      	asrs	r5, r5, #1
 800d1fe:	429d      	cmp	r5, r3
 800d200:	bf38      	it	cc
 800d202:	461d      	movcc	r5, r3
 800d204:	0553      	lsls	r3, r2, #21
 800d206:	d531      	bpl.n	800d26c <__ssputs_r+0xa0>
 800d208:	4629      	mov	r1, r5
 800d20a:	f000 fb61 	bl	800d8d0 <_malloc_r>
 800d20e:	4606      	mov	r6, r0
 800d210:	b950      	cbnz	r0, 800d228 <__ssputs_r+0x5c>
 800d212:	230c      	movs	r3, #12
 800d214:	f04f 30ff 	mov.w	r0, #4294967295
 800d218:	f8ca 3000 	str.w	r3, [sl]
 800d21c:	89a3      	ldrh	r3, [r4, #12]
 800d21e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d222:	81a3      	strh	r3, [r4, #12]
 800d224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d228:	464a      	mov	r2, r9
 800d22a:	6921      	ldr	r1, [r4, #16]
 800d22c:	f7ff ff98 	bl	800d160 <memcpy>
 800d230:	89a3      	ldrh	r3, [r4, #12]
 800d232:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d23a:	81a3      	strh	r3, [r4, #12]
 800d23c:	6126      	str	r6, [r4, #16]
 800d23e:	444e      	add	r6, r9
 800d240:	6026      	str	r6, [r4, #0]
 800d242:	463e      	mov	r6, r7
 800d244:	6165      	str	r5, [r4, #20]
 800d246:	eba5 0509 	sub.w	r5, r5, r9
 800d24a:	60a5      	str	r5, [r4, #8]
 800d24c:	42be      	cmp	r6, r7
 800d24e:	d900      	bls.n	800d252 <__ssputs_r+0x86>
 800d250:	463e      	mov	r6, r7
 800d252:	4632      	mov	r2, r6
 800d254:	4641      	mov	r1, r8
 800d256:	6820      	ldr	r0, [r4, #0]
 800d258:	f000 fab8 	bl	800d7cc <memmove>
 800d25c:	68a3      	ldr	r3, [r4, #8]
 800d25e:	2000      	movs	r0, #0
 800d260:	1b9b      	subs	r3, r3, r6
 800d262:	60a3      	str	r3, [r4, #8]
 800d264:	6823      	ldr	r3, [r4, #0]
 800d266:	4433      	add	r3, r6
 800d268:	6023      	str	r3, [r4, #0]
 800d26a:	e7db      	b.n	800d224 <__ssputs_r+0x58>
 800d26c:	462a      	mov	r2, r5
 800d26e:	f000 fba3 	bl	800d9b8 <_realloc_r>
 800d272:	4606      	mov	r6, r0
 800d274:	2800      	cmp	r0, #0
 800d276:	d1e1      	bne.n	800d23c <__ssputs_r+0x70>
 800d278:	4650      	mov	r0, sl
 800d27a:	6921      	ldr	r1, [r4, #16]
 800d27c:	f000 fac0 	bl	800d800 <_free_r>
 800d280:	e7c7      	b.n	800d212 <__ssputs_r+0x46>
	...

0800d284 <_svfiprintf_r>:
 800d284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d288:	4698      	mov	r8, r3
 800d28a:	898b      	ldrh	r3, [r1, #12]
 800d28c:	4607      	mov	r7, r0
 800d28e:	061b      	lsls	r3, r3, #24
 800d290:	460d      	mov	r5, r1
 800d292:	4614      	mov	r4, r2
 800d294:	b09d      	sub	sp, #116	; 0x74
 800d296:	d50e      	bpl.n	800d2b6 <_svfiprintf_r+0x32>
 800d298:	690b      	ldr	r3, [r1, #16]
 800d29a:	b963      	cbnz	r3, 800d2b6 <_svfiprintf_r+0x32>
 800d29c:	2140      	movs	r1, #64	; 0x40
 800d29e:	f000 fb17 	bl	800d8d0 <_malloc_r>
 800d2a2:	6028      	str	r0, [r5, #0]
 800d2a4:	6128      	str	r0, [r5, #16]
 800d2a6:	b920      	cbnz	r0, 800d2b2 <_svfiprintf_r+0x2e>
 800d2a8:	230c      	movs	r3, #12
 800d2aa:	603b      	str	r3, [r7, #0]
 800d2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b0:	e0d1      	b.n	800d456 <_svfiprintf_r+0x1d2>
 800d2b2:	2340      	movs	r3, #64	; 0x40
 800d2b4:	616b      	str	r3, [r5, #20]
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ba:	2320      	movs	r3, #32
 800d2bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2c0:	2330      	movs	r3, #48	; 0x30
 800d2c2:	f04f 0901 	mov.w	r9, #1
 800d2c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d470 <_svfiprintf_r+0x1ec>
 800d2ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2d2:	4623      	mov	r3, r4
 800d2d4:	469a      	mov	sl, r3
 800d2d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2da:	b10a      	cbz	r2, 800d2e0 <_svfiprintf_r+0x5c>
 800d2dc:	2a25      	cmp	r2, #37	; 0x25
 800d2de:	d1f9      	bne.n	800d2d4 <_svfiprintf_r+0x50>
 800d2e0:	ebba 0b04 	subs.w	fp, sl, r4
 800d2e4:	d00b      	beq.n	800d2fe <_svfiprintf_r+0x7a>
 800d2e6:	465b      	mov	r3, fp
 800d2e8:	4622      	mov	r2, r4
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	4638      	mov	r0, r7
 800d2ee:	f7ff ff6d 	bl	800d1cc <__ssputs_r>
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	f000 80aa 	beq.w	800d44c <_svfiprintf_r+0x1c8>
 800d2f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2fa:	445a      	add	r2, fp
 800d2fc:	9209      	str	r2, [sp, #36]	; 0x24
 800d2fe:	f89a 3000 	ldrb.w	r3, [sl]
 800d302:	2b00      	cmp	r3, #0
 800d304:	f000 80a2 	beq.w	800d44c <_svfiprintf_r+0x1c8>
 800d308:	2300      	movs	r3, #0
 800d30a:	f04f 32ff 	mov.w	r2, #4294967295
 800d30e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d312:	f10a 0a01 	add.w	sl, sl, #1
 800d316:	9304      	str	r3, [sp, #16]
 800d318:	9307      	str	r3, [sp, #28]
 800d31a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d31e:	931a      	str	r3, [sp, #104]	; 0x68
 800d320:	4654      	mov	r4, sl
 800d322:	2205      	movs	r2, #5
 800d324:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d328:	4851      	ldr	r0, [pc, #324]	; (800d470 <_svfiprintf_r+0x1ec>)
 800d32a:	f000 fa41 	bl	800d7b0 <memchr>
 800d32e:	9a04      	ldr	r2, [sp, #16]
 800d330:	b9d8      	cbnz	r0, 800d36a <_svfiprintf_r+0xe6>
 800d332:	06d0      	lsls	r0, r2, #27
 800d334:	bf44      	itt	mi
 800d336:	2320      	movmi	r3, #32
 800d338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d33c:	0711      	lsls	r1, r2, #28
 800d33e:	bf44      	itt	mi
 800d340:	232b      	movmi	r3, #43	; 0x2b
 800d342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d346:	f89a 3000 	ldrb.w	r3, [sl]
 800d34a:	2b2a      	cmp	r3, #42	; 0x2a
 800d34c:	d015      	beq.n	800d37a <_svfiprintf_r+0xf6>
 800d34e:	4654      	mov	r4, sl
 800d350:	2000      	movs	r0, #0
 800d352:	f04f 0c0a 	mov.w	ip, #10
 800d356:	9a07      	ldr	r2, [sp, #28]
 800d358:	4621      	mov	r1, r4
 800d35a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d35e:	3b30      	subs	r3, #48	; 0x30
 800d360:	2b09      	cmp	r3, #9
 800d362:	d94e      	bls.n	800d402 <_svfiprintf_r+0x17e>
 800d364:	b1b0      	cbz	r0, 800d394 <_svfiprintf_r+0x110>
 800d366:	9207      	str	r2, [sp, #28]
 800d368:	e014      	b.n	800d394 <_svfiprintf_r+0x110>
 800d36a:	eba0 0308 	sub.w	r3, r0, r8
 800d36e:	fa09 f303 	lsl.w	r3, r9, r3
 800d372:	4313      	orrs	r3, r2
 800d374:	46a2      	mov	sl, r4
 800d376:	9304      	str	r3, [sp, #16]
 800d378:	e7d2      	b.n	800d320 <_svfiprintf_r+0x9c>
 800d37a:	9b03      	ldr	r3, [sp, #12]
 800d37c:	1d19      	adds	r1, r3, #4
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	9103      	str	r1, [sp, #12]
 800d382:	2b00      	cmp	r3, #0
 800d384:	bfbb      	ittet	lt
 800d386:	425b      	neglt	r3, r3
 800d388:	f042 0202 	orrlt.w	r2, r2, #2
 800d38c:	9307      	strge	r3, [sp, #28]
 800d38e:	9307      	strlt	r3, [sp, #28]
 800d390:	bfb8      	it	lt
 800d392:	9204      	strlt	r2, [sp, #16]
 800d394:	7823      	ldrb	r3, [r4, #0]
 800d396:	2b2e      	cmp	r3, #46	; 0x2e
 800d398:	d10c      	bne.n	800d3b4 <_svfiprintf_r+0x130>
 800d39a:	7863      	ldrb	r3, [r4, #1]
 800d39c:	2b2a      	cmp	r3, #42	; 0x2a
 800d39e:	d135      	bne.n	800d40c <_svfiprintf_r+0x188>
 800d3a0:	9b03      	ldr	r3, [sp, #12]
 800d3a2:	3402      	adds	r4, #2
 800d3a4:	1d1a      	adds	r2, r3, #4
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	9203      	str	r2, [sp, #12]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	bfb8      	it	lt
 800d3ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3b2:	9305      	str	r3, [sp, #20]
 800d3b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d474 <_svfiprintf_r+0x1f0>
 800d3b8:	2203      	movs	r2, #3
 800d3ba:	4650      	mov	r0, sl
 800d3bc:	7821      	ldrb	r1, [r4, #0]
 800d3be:	f000 f9f7 	bl	800d7b0 <memchr>
 800d3c2:	b140      	cbz	r0, 800d3d6 <_svfiprintf_r+0x152>
 800d3c4:	2340      	movs	r3, #64	; 0x40
 800d3c6:	eba0 000a 	sub.w	r0, r0, sl
 800d3ca:	fa03 f000 	lsl.w	r0, r3, r0
 800d3ce:	9b04      	ldr	r3, [sp, #16]
 800d3d0:	3401      	adds	r4, #1
 800d3d2:	4303      	orrs	r3, r0
 800d3d4:	9304      	str	r3, [sp, #16]
 800d3d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3da:	2206      	movs	r2, #6
 800d3dc:	4826      	ldr	r0, [pc, #152]	; (800d478 <_svfiprintf_r+0x1f4>)
 800d3de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3e2:	f000 f9e5 	bl	800d7b0 <memchr>
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d038      	beq.n	800d45c <_svfiprintf_r+0x1d8>
 800d3ea:	4b24      	ldr	r3, [pc, #144]	; (800d47c <_svfiprintf_r+0x1f8>)
 800d3ec:	bb1b      	cbnz	r3, 800d436 <_svfiprintf_r+0x1b2>
 800d3ee:	9b03      	ldr	r3, [sp, #12]
 800d3f0:	3307      	adds	r3, #7
 800d3f2:	f023 0307 	bic.w	r3, r3, #7
 800d3f6:	3308      	adds	r3, #8
 800d3f8:	9303      	str	r3, [sp, #12]
 800d3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3fc:	4433      	add	r3, r6
 800d3fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d400:	e767      	b.n	800d2d2 <_svfiprintf_r+0x4e>
 800d402:	460c      	mov	r4, r1
 800d404:	2001      	movs	r0, #1
 800d406:	fb0c 3202 	mla	r2, ip, r2, r3
 800d40a:	e7a5      	b.n	800d358 <_svfiprintf_r+0xd4>
 800d40c:	2300      	movs	r3, #0
 800d40e:	f04f 0c0a 	mov.w	ip, #10
 800d412:	4619      	mov	r1, r3
 800d414:	3401      	adds	r4, #1
 800d416:	9305      	str	r3, [sp, #20]
 800d418:	4620      	mov	r0, r4
 800d41a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d41e:	3a30      	subs	r2, #48	; 0x30
 800d420:	2a09      	cmp	r2, #9
 800d422:	d903      	bls.n	800d42c <_svfiprintf_r+0x1a8>
 800d424:	2b00      	cmp	r3, #0
 800d426:	d0c5      	beq.n	800d3b4 <_svfiprintf_r+0x130>
 800d428:	9105      	str	r1, [sp, #20]
 800d42a:	e7c3      	b.n	800d3b4 <_svfiprintf_r+0x130>
 800d42c:	4604      	mov	r4, r0
 800d42e:	2301      	movs	r3, #1
 800d430:	fb0c 2101 	mla	r1, ip, r1, r2
 800d434:	e7f0      	b.n	800d418 <_svfiprintf_r+0x194>
 800d436:	ab03      	add	r3, sp, #12
 800d438:	9300      	str	r3, [sp, #0]
 800d43a:	462a      	mov	r2, r5
 800d43c:	4638      	mov	r0, r7
 800d43e:	4b10      	ldr	r3, [pc, #64]	; (800d480 <_svfiprintf_r+0x1fc>)
 800d440:	a904      	add	r1, sp, #16
 800d442:	f3af 8000 	nop.w
 800d446:	1c42      	adds	r2, r0, #1
 800d448:	4606      	mov	r6, r0
 800d44a:	d1d6      	bne.n	800d3fa <_svfiprintf_r+0x176>
 800d44c:	89ab      	ldrh	r3, [r5, #12]
 800d44e:	065b      	lsls	r3, r3, #25
 800d450:	f53f af2c 	bmi.w	800d2ac <_svfiprintf_r+0x28>
 800d454:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d456:	b01d      	add	sp, #116	; 0x74
 800d458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d45c:	ab03      	add	r3, sp, #12
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	462a      	mov	r2, r5
 800d462:	4638      	mov	r0, r7
 800d464:	4b06      	ldr	r3, [pc, #24]	; (800d480 <_svfiprintf_r+0x1fc>)
 800d466:	a904      	add	r1, sp, #16
 800d468:	f000 f87c 	bl	800d564 <_printf_i>
 800d46c:	e7eb      	b.n	800d446 <_svfiprintf_r+0x1c2>
 800d46e:	bf00      	nop
 800d470:	0800e234 	.word	0x0800e234
 800d474:	0800e23a 	.word	0x0800e23a
 800d478:	0800e23e 	.word	0x0800e23e
 800d47c:	00000000 	.word	0x00000000
 800d480:	0800d1cd 	.word	0x0800d1cd

0800d484 <_printf_common>:
 800d484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d488:	4616      	mov	r6, r2
 800d48a:	4699      	mov	r9, r3
 800d48c:	688a      	ldr	r2, [r1, #8]
 800d48e:	690b      	ldr	r3, [r1, #16]
 800d490:	4607      	mov	r7, r0
 800d492:	4293      	cmp	r3, r2
 800d494:	bfb8      	it	lt
 800d496:	4613      	movlt	r3, r2
 800d498:	6033      	str	r3, [r6, #0]
 800d49a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d49e:	460c      	mov	r4, r1
 800d4a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4a4:	b10a      	cbz	r2, 800d4aa <_printf_common+0x26>
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	6033      	str	r3, [r6, #0]
 800d4aa:	6823      	ldr	r3, [r4, #0]
 800d4ac:	0699      	lsls	r1, r3, #26
 800d4ae:	bf42      	ittt	mi
 800d4b0:	6833      	ldrmi	r3, [r6, #0]
 800d4b2:	3302      	addmi	r3, #2
 800d4b4:	6033      	strmi	r3, [r6, #0]
 800d4b6:	6825      	ldr	r5, [r4, #0]
 800d4b8:	f015 0506 	ands.w	r5, r5, #6
 800d4bc:	d106      	bne.n	800d4cc <_printf_common+0x48>
 800d4be:	f104 0a19 	add.w	sl, r4, #25
 800d4c2:	68e3      	ldr	r3, [r4, #12]
 800d4c4:	6832      	ldr	r2, [r6, #0]
 800d4c6:	1a9b      	subs	r3, r3, r2
 800d4c8:	42ab      	cmp	r3, r5
 800d4ca:	dc28      	bgt.n	800d51e <_printf_common+0x9a>
 800d4cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d4d0:	1e13      	subs	r3, r2, #0
 800d4d2:	6822      	ldr	r2, [r4, #0]
 800d4d4:	bf18      	it	ne
 800d4d6:	2301      	movne	r3, #1
 800d4d8:	0692      	lsls	r2, r2, #26
 800d4da:	d42d      	bmi.n	800d538 <_printf_common+0xb4>
 800d4dc:	4649      	mov	r1, r9
 800d4de:	4638      	mov	r0, r7
 800d4e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4e4:	47c0      	blx	r8
 800d4e6:	3001      	adds	r0, #1
 800d4e8:	d020      	beq.n	800d52c <_printf_common+0xa8>
 800d4ea:	6823      	ldr	r3, [r4, #0]
 800d4ec:	68e5      	ldr	r5, [r4, #12]
 800d4ee:	f003 0306 	and.w	r3, r3, #6
 800d4f2:	2b04      	cmp	r3, #4
 800d4f4:	bf18      	it	ne
 800d4f6:	2500      	movne	r5, #0
 800d4f8:	6832      	ldr	r2, [r6, #0]
 800d4fa:	f04f 0600 	mov.w	r6, #0
 800d4fe:	68a3      	ldr	r3, [r4, #8]
 800d500:	bf08      	it	eq
 800d502:	1aad      	subeq	r5, r5, r2
 800d504:	6922      	ldr	r2, [r4, #16]
 800d506:	bf08      	it	eq
 800d508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d50c:	4293      	cmp	r3, r2
 800d50e:	bfc4      	itt	gt
 800d510:	1a9b      	subgt	r3, r3, r2
 800d512:	18ed      	addgt	r5, r5, r3
 800d514:	341a      	adds	r4, #26
 800d516:	42b5      	cmp	r5, r6
 800d518:	d11a      	bne.n	800d550 <_printf_common+0xcc>
 800d51a:	2000      	movs	r0, #0
 800d51c:	e008      	b.n	800d530 <_printf_common+0xac>
 800d51e:	2301      	movs	r3, #1
 800d520:	4652      	mov	r2, sl
 800d522:	4649      	mov	r1, r9
 800d524:	4638      	mov	r0, r7
 800d526:	47c0      	blx	r8
 800d528:	3001      	adds	r0, #1
 800d52a:	d103      	bne.n	800d534 <_printf_common+0xb0>
 800d52c:	f04f 30ff 	mov.w	r0, #4294967295
 800d530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d534:	3501      	adds	r5, #1
 800d536:	e7c4      	b.n	800d4c2 <_printf_common+0x3e>
 800d538:	2030      	movs	r0, #48	; 0x30
 800d53a:	18e1      	adds	r1, r4, r3
 800d53c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d540:	1c5a      	adds	r2, r3, #1
 800d542:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d546:	4422      	add	r2, r4
 800d548:	3302      	adds	r3, #2
 800d54a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d54e:	e7c5      	b.n	800d4dc <_printf_common+0x58>
 800d550:	2301      	movs	r3, #1
 800d552:	4622      	mov	r2, r4
 800d554:	4649      	mov	r1, r9
 800d556:	4638      	mov	r0, r7
 800d558:	47c0      	blx	r8
 800d55a:	3001      	adds	r0, #1
 800d55c:	d0e6      	beq.n	800d52c <_printf_common+0xa8>
 800d55e:	3601      	adds	r6, #1
 800d560:	e7d9      	b.n	800d516 <_printf_common+0x92>
	...

0800d564 <_printf_i>:
 800d564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d568:	7e0f      	ldrb	r7, [r1, #24]
 800d56a:	4691      	mov	r9, r2
 800d56c:	2f78      	cmp	r7, #120	; 0x78
 800d56e:	4680      	mov	r8, r0
 800d570:	460c      	mov	r4, r1
 800d572:	469a      	mov	sl, r3
 800d574:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d576:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d57a:	d807      	bhi.n	800d58c <_printf_i+0x28>
 800d57c:	2f62      	cmp	r7, #98	; 0x62
 800d57e:	d80a      	bhi.n	800d596 <_printf_i+0x32>
 800d580:	2f00      	cmp	r7, #0
 800d582:	f000 80d9 	beq.w	800d738 <_printf_i+0x1d4>
 800d586:	2f58      	cmp	r7, #88	; 0x58
 800d588:	f000 80a4 	beq.w	800d6d4 <_printf_i+0x170>
 800d58c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d594:	e03a      	b.n	800d60c <_printf_i+0xa8>
 800d596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d59a:	2b15      	cmp	r3, #21
 800d59c:	d8f6      	bhi.n	800d58c <_printf_i+0x28>
 800d59e:	a101      	add	r1, pc, #4	; (adr r1, 800d5a4 <_printf_i+0x40>)
 800d5a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5a4:	0800d5fd 	.word	0x0800d5fd
 800d5a8:	0800d611 	.word	0x0800d611
 800d5ac:	0800d58d 	.word	0x0800d58d
 800d5b0:	0800d58d 	.word	0x0800d58d
 800d5b4:	0800d58d 	.word	0x0800d58d
 800d5b8:	0800d58d 	.word	0x0800d58d
 800d5bc:	0800d611 	.word	0x0800d611
 800d5c0:	0800d58d 	.word	0x0800d58d
 800d5c4:	0800d58d 	.word	0x0800d58d
 800d5c8:	0800d58d 	.word	0x0800d58d
 800d5cc:	0800d58d 	.word	0x0800d58d
 800d5d0:	0800d71f 	.word	0x0800d71f
 800d5d4:	0800d641 	.word	0x0800d641
 800d5d8:	0800d701 	.word	0x0800d701
 800d5dc:	0800d58d 	.word	0x0800d58d
 800d5e0:	0800d58d 	.word	0x0800d58d
 800d5e4:	0800d741 	.word	0x0800d741
 800d5e8:	0800d58d 	.word	0x0800d58d
 800d5ec:	0800d641 	.word	0x0800d641
 800d5f0:	0800d58d 	.word	0x0800d58d
 800d5f4:	0800d58d 	.word	0x0800d58d
 800d5f8:	0800d709 	.word	0x0800d709
 800d5fc:	682b      	ldr	r3, [r5, #0]
 800d5fe:	1d1a      	adds	r2, r3, #4
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	602a      	str	r2, [r5, #0]
 800d604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d60c:	2301      	movs	r3, #1
 800d60e:	e0a4      	b.n	800d75a <_printf_i+0x1f6>
 800d610:	6820      	ldr	r0, [r4, #0]
 800d612:	6829      	ldr	r1, [r5, #0]
 800d614:	0606      	lsls	r6, r0, #24
 800d616:	f101 0304 	add.w	r3, r1, #4
 800d61a:	d50a      	bpl.n	800d632 <_printf_i+0xce>
 800d61c:	680e      	ldr	r6, [r1, #0]
 800d61e:	602b      	str	r3, [r5, #0]
 800d620:	2e00      	cmp	r6, #0
 800d622:	da03      	bge.n	800d62c <_printf_i+0xc8>
 800d624:	232d      	movs	r3, #45	; 0x2d
 800d626:	4276      	negs	r6, r6
 800d628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d62c:	230a      	movs	r3, #10
 800d62e:	485e      	ldr	r0, [pc, #376]	; (800d7a8 <_printf_i+0x244>)
 800d630:	e019      	b.n	800d666 <_printf_i+0x102>
 800d632:	680e      	ldr	r6, [r1, #0]
 800d634:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d638:	602b      	str	r3, [r5, #0]
 800d63a:	bf18      	it	ne
 800d63c:	b236      	sxthne	r6, r6
 800d63e:	e7ef      	b.n	800d620 <_printf_i+0xbc>
 800d640:	682b      	ldr	r3, [r5, #0]
 800d642:	6820      	ldr	r0, [r4, #0]
 800d644:	1d19      	adds	r1, r3, #4
 800d646:	6029      	str	r1, [r5, #0]
 800d648:	0601      	lsls	r1, r0, #24
 800d64a:	d501      	bpl.n	800d650 <_printf_i+0xec>
 800d64c:	681e      	ldr	r6, [r3, #0]
 800d64e:	e002      	b.n	800d656 <_printf_i+0xf2>
 800d650:	0646      	lsls	r6, r0, #25
 800d652:	d5fb      	bpl.n	800d64c <_printf_i+0xe8>
 800d654:	881e      	ldrh	r6, [r3, #0]
 800d656:	2f6f      	cmp	r7, #111	; 0x6f
 800d658:	bf0c      	ite	eq
 800d65a:	2308      	moveq	r3, #8
 800d65c:	230a      	movne	r3, #10
 800d65e:	4852      	ldr	r0, [pc, #328]	; (800d7a8 <_printf_i+0x244>)
 800d660:	2100      	movs	r1, #0
 800d662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d666:	6865      	ldr	r5, [r4, #4]
 800d668:	2d00      	cmp	r5, #0
 800d66a:	bfa8      	it	ge
 800d66c:	6821      	ldrge	r1, [r4, #0]
 800d66e:	60a5      	str	r5, [r4, #8]
 800d670:	bfa4      	itt	ge
 800d672:	f021 0104 	bicge.w	r1, r1, #4
 800d676:	6021      	strge	r1, [r4, #0]
 800d678:	b90e      	cbnz	r6, 800d67e <_printf_i+0x11a>
 800d67a:	2d00      	cmp	r5, #0
 800d67c:	d04d      	beq.n	800d71a <_printf_i+0x1b6>
 800d67e:	4615      	mov	r5, r2
 800d680:	fbb6 f1f3 	udiv	r1, r6, r3
 800d684:	fb03 6711 	mls	r7, r3, r1, r6
 800d688:	5dc7      	ldrb	r7, [r0, r7]
 800d68a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d68e:	4637      	mov	r7, r6
 800d690:	42bb      	cmp	r3, r7
 800d692:	460e      	mov	r6, r1
 800d694:	d9f4      	bls.n	800d680 <_printf_i+0x11c>
 800d696:	2b08      	cmp	r3, #8
 800d698:	d10b      	bne.n	800d6b2 <_printf_i+0x14e>
 800d69a:	6823      	ldr	r3, [r4, #0]
 800d69c:	07de      	lsls	r6, r3, #31
 800d69e:	d508      	bpl.n	800d6b2 <_printf_i+0x14e>
 800d6a0:	6923      	ldr	r3, [r4, #16]
 800d6a2:	6861      	ldr	r1, [r4, #4]
 800d6a4:	4299      	cmp	r1, r3
 800d6a6:	bfde      	ittt	le
 800d6a8:	2330      	movle	r3, #48	; 0x30
 800d6aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6b2:	1b52      	subs	r2, r2, r5
 800d6b4:	6122      	str	r2, [r4, #16]
 800d6b6:	464b      	mov	r3, r9
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	4640      	mov	r0, r8
 800d6bc:	f8cd a000 	str.w	sl, [sp]
 800d6c0:	aa03      	add	r2, sp, #12
 800d6c2:	f7ff fedf 	bl	800d484 <_printf_common>
 800d6c6:	3001      	adds	r0, #1
 800d6c8:	d14c      	bne.n	800d764 <_printf_i+0x200>
 800d6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ce:	b004      	add	sp, #16
 800d6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6d4:	4834      	ldr	r0, [pc, #208]	; (800d7a8 <_printf_i+0x244>)
 800d6d6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d6da:	6829      	ldr	r1, [r5, #0]
 800d6dc:	6823      	ldr	r3, [r4, #0]
 800d6de:	f851 6b04 	ldr.w	r6, [r1], #4
 800d6e2:	6029      	str	r1, [r5, #0]
 800d6e4:	061d      	lsls	r5, r3, #24
 800d6e6:	d514      	bpl.n	800d712 <_printf_i+0x1ae>
 800d6e8:	07df      	lsls	r7, r3, #31
 800d6ea:	bf44      	itt	mi
 800d6ec:	f043 0320 	orrmi.w	r3, r3, #32
 800d6f0:	6023      	strmi	r3, [r4, #0]
 800d6f2:	b91e      	cbnz	r6, 800d6fc <_printf_i+0x198>
 800d6f4:	6823      	ldr	r3, [r4, #0]
 800d6f6:	f023 0320 	bic.w	r3, r3, #32
 800d6fa:	6023      	str	r3, [r4, #0]
 800d6fc:	2310      	movs	r3, #16
 800d6fe:	e7af      	b.n	800d660 <_printf_i+0xfc>
 800d700:	6823      	ldr	r3, [r4, #0]
 800d702:	f043 0320 	orr.w	r3, r3, #32
 800d706:	6023      	str	r3, [r4, #0]
 800d708:	2378      	movs	r3, #120	; 0x78
 800d70a:	4828      	ldr	r0, [pc, #160]	; (800d7ac <_printf_i+0x248>)
 800d70c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d710:	e7e3      	b.n	800d6da <_printf_i+0x176>
 800d712:	0659      	lsls	r1, r3, #25
 800d714:	bf48      	it	mi
 800d716:	b2b6      	uxthmi	r6, r6
 800d718:	e7e6      	b.n	800d6e8 <_printf_i+0x184>
 800d71a:	4615      	mov	r5, r2
 800d71c:	e7bb      	b.n	800d696 <_printf_i+0x132>
 800d71e:	682b      	ldr	r3, [r5, #0]
 800d720:	6826      	ldr	r6, [r4, #0]
 800d722:	1d18      	adds	r0, r3, #4
 800d724:	6961      	ldr	r1, [r4, #20]
 800d726:	6028      	str	r0, [r5, #0]
 800d728:	0635      	lsls	r5, r6, #24
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	d501      	bpl.n	800d732 <_printf_i+0x1ce>
 800d72e:	6019      	str	r1, [r3, #0]
 800d730:	e002      	b.n	800d738 <_printf_i+0x1d4>
 800d732:	0670      	lsls	r0, r6, #25
 800d734:	d5fb      	bpl.n	800d72e <_printf_i+0x1ca>
 800d736:	8019      	strh	r1, [r3, #0]
 800d738:	2300      	movs	r3, #0
 800d73a:	4615      	mov	r5, r2
 800d73c:	6123      	str	r3, [r4, #16]
 800d73e:	e7ba      	b.n	800d6b6 <_printf_i+0x152>
 800d740:	682b      	ldr	r3, [r5, #0]
 800d742:	2100      	movs	r1, #0
 800d744:	1d1a      	adds	r2, r3, #4
 800d746:	602a      	str	r2, [r5, #0]
 800d748:	681d      	ldr	r5, [r3, #0]
 800d74a:	6862      	ldr	r2, [r4, #4]
 800d74c:	4628      	mov	r0, r5
 800d74e:	f000 f82f 	bl	800d7b0 <memchr>
 800d752:	b108      	cbz	r0, 800d758 <_printf_i+0x1f4>
 800d754:	1b40      	subs	r0, r0, r5
 800d756:	6060      	str	r0, [r4, #4]
 800d758:	6863      	ldr	r3, [r4, #4]
 800d75a:	6123      	str	r3, [r4, #16]
 800d75c:	2300      	movs	r3, #0
 800d75e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d762:	e7a8      	b.n	800d6b6 <_printf_i+0x152>
 800d764:	462a      	mov	r2, r5
 800d766:	4649      	mov	r1, r9
 800d768:	4640      	mov	r0, r8
 800d76a:	6923      	ldr	r3, [r4, #16]
 800d76c:	47d0      	blx	sl
 800d76e:	3001      	adds	r0, #1
 800d770:	d0ab      	beq.n	800d6ca <_printf_i+0x166>
 800d772:	6823      	ldr	r3, [r4, #0]
 800d774:	079b      	lsls	r3, r3, #30
 800d776:	d413      	bmi.n	800d7a0 <_printf_i+0x23c>
 800d778:	68e0      	ldr	r0, [r4, #12]
 800d77a:	9b03      	ldr	r3, [sp, #12]
 800d77c:	4298      	cmp	r0, r3
 800d77e:	bfb8      	it	lt
 800d780:	4618      	movlt	r0, r3
 800d782:	e7a4      	b.n	800d6ce <_printf_i+0x16a>
 800d784:	2301      	movs	r3, #1
 800d786:	4632      	mov	r2, r6
 800d788:	4649      	mov	r1, r9
 800d78a:	4640      	mov	r0, r8
 800d78c:	47d0      	blx	sl
 800d78e:	3001      	adds	r0, #1
 800d790:	d09b      	beq.n	800d6ca <_printf_i+0x166>
 800d792:	3501      	adds	r5, #1
 800d794:	68e3      	ldr	r3, [r4, #12]
 800d796:	9903      	ldr	r1, [sp, #12]
 800d798:	1a5b      	subs	r3, r3, r1
 800d79a:	42ab      	cmp	r3, r5
 800d79c:	dcf2      	bgt.n	800d784 <_printf_i+0x220>
 800d79e:	e7eb      	b.n	800d778 <_printf_i+0x214>
 800d7a0:	2500      	movs	r5, #0
 800d7a2:	f104 0619 	add.w	r6, r4, #25
 800d7a6:	e7f5      	b.n	800d794 <_printf_i+0x230>
 800d7a8:	0800e245 	.word	0x0800e245
 800d7ac:	0800e256 	.word	0x0800e256

0800d7b0 <memchr>:
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	b510      	push	{r4, lr}
 800d7b4:	b2c9      	uxtb	r1, r1
 800d7b6:	4402      	add	r2, r0
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	d101      	bne.n	800d7c2 <memchr+0x12>
 800d7be:	2000      	movs	r0, #0
 800d7c0:	e003      	b.n	800d7ca <memchr+0x1a>
 800d7c2:	7804      	ldrb	r4, [r0, #0]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	428c      	cmp	r4, r1
 800d7c8:	d1f6      	bne.n	800d7b8 <memchr+0x8>
 800d7ca:	bd10      	pop	{r4, pc}

0800d7cc <memmove>:
 800d7cc:	4288      	cmp	r0, r1
 800d7ce:	b510      	push	{r4, lr}
 800d7d0:	eb01 0402 	add.w	r4, r1, r2
 800d7d4:	d902      	bls.n	800d7dc <memmove+0x10>
 800d7d6:	4284      	cmp	r4, r0
 800d7d8:	4623      	mov	r3, r4
 800d7da:	d807      	bhi.n	800d7ec <memmove+0x20>
 800d7dc:	1e43      	subs	r3, r0, #1
 800d7de:	42a1      	cmp	r1, r4
 800d7e0:	d008      	beq.n	800d7f4 <memmove+0x28>
 800d7e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7ea:	e7f8      	b.n	800d7de <memmove+0x12>
 800d7ec:	4601      	mov	r1, r0
 800d7ee:	4402      	add	r2, r0
 800d7f0:	428a      	cmp	r2, r1
 800d7f2:	d100      	bne.n	800d7f6 <memmove+0x2a>
 800d7f4:	bd10      	pop	{r4, pc}
 800d7f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7fe:	e7f7      	b.n	800d7f0 <memmove+0x24>

0800d800 <_free_r>:
 800d800:	b538      	push	{r3, r4, r5, lr}
 800d802:	4605      	mov	r5, r0
 800d804:	2900      	cmp	r1, #0
 800d806:	d040      	beq.n	800d88a <_free_r+0x8a>
 800d808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d80c:	1f0c      	subs	r4, r1, #4
 800d80e:	2b00      	cmp	r3, #0
 800d810:	bfb8      	it	lt
 800d812:	18e4      	addlt	r4, r4, r3
 800d814:	f000 f910 	bl	800da38 <__malloc_lock>
 800d818:	4a1c      	ldr	r2, [pc, #112]	; (800d88c <_free_r+0x8c>)
 800d81a:	6813      	ldr	r3, [r2, #0]
 800d81c:	b933      	cbnz	r3, 800d82c <_free_r+0x2c>
 800d81e:	6063      	str	r3, [r4, #4]
 800d820:	6014      	str	r4, [r2, #0]
 800d822:	4628      	mov	r0, r5
 800d824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d828:	f000 b90c 	b.w	800da44 <__malloc_unlock>
 800d82c:	42a3      	cmp	r3, r4
 800d82e:	d908      	bls.n	800d842 <_free_r+0x42>
 800d830:	6820      	ldr	r0, [r4, #0]
 800d832:	1821      	adds	r1, r4, r0
 800d834:	428b      	cmp	r3, r1
 800d836:	bf01      	itttt	eq
 800d838:	6819      	ldreq	r1, [r3, #0]
 800d83a:	685b      	ldreq	r3, [r3, #4]
 800d83c:	1809      	addeq	r1, r1, r0
 800d83e:	6021      	streq	r1, [r4, #0]
 800d840:	e7ed      	b.n	800d81e <_free_r+0x1e>
 800d842:	461a      	mov	r2, r3
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	b10b      	cbz	r3, 800d84c <_free_r+0x4c>
 800d848:	42a3      	cmp	r3, r4
 800d84a:	d9fa      	bls.n	800d842 <_free_r+0x42>
 800d84c:	6811      	ldr	r1, [r2, #0]
 800d84e:	1850      	adds	r0, r2, r1
 800d850:	42a0      	cmp	r0, r4
 800d852:	d10b      	bne.n	800d86c <_free_r+0x6c>
 800d854:	6820      	ldr	r0, [r4, #0]
 800d856:	4401      	add	r1, r0
 800d858:	1850      	adds	r0, r2, r1
 800d85a:	4283      	cmp	r3, r0
 800d85c:	6011      	str	r1, [r2, #0]
 800d85e:	d1e0      	bne.n	800d822 <_free_r+0x22>
 800d860:	6818      	ldr	r0, [r3, #0]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	4401      	add	r1, r0
 800d866:	6011      	str	r1, [r2, #0]
 800d868:	6053      	str	r3, [r2, #4]
 800d86a:	e7da      	b.n	800d822 <_free_r+0x22>
 800d86c:	d902      	bls.n	800d874 <_free_r+0x74>
 800d86e:	230c      	movs	r3, #12
 800d870:	602b      	str	r3, [r5, #0]
 800d872:	e7d6      	b.n	800d822 <_free_r+0x22>
 800d874:	6820      	ldr	r0, [r4, #0]
 800d876:	1821      	adds	r1, r4, r0
 800d878:	428b      	cmp	r3, r1
 800d87a:	bf01      	itttt	eq
 800d87c:	6819      	ldreq	r1, [r3, #0]
 800d87e:	685b      	ldreq	r3, [r3, #4]
 800d880:	1809      	addeq	r1, r1, r0
 800d882:	6021      	streq	r1, [r4, #0]
 800d884:	6063      	str	r3, [r4, #4]
 800d886:	6054      	str	r4, [r2, #4]
 800d888:	e7cb      	b.n	800d822 <_free_r+0x22>
 800d88a:	bd38      	pop	{r3, r4, r5, pc}
 800d88c:	20000ec4 	.word	0x20000ec4

0800d890 <sbrk_aligned>:
 800d890:	b570      	push	{r4, r5, r6, lr}
 800d892:	4e0e      	ldr	r6, [pc, #56]	; (800d8cc <sbrk_aligned+0x3c>)
 800d894:	460c      	mov	r4, r1
 800d896:	6831      	ldr	r1, [r6, #0]
 800d898:	4605      	mov	r5, r0
 800d89a:	b911      	cbnz	r1, 800d8a2 <sbrk_aligned+0x12>
 800d89c:	f000 f8bc 	bl	800da18 <_sbrk_r>
 800d8a0:	6030      	str	r0, [r6, #0]
 800d8a2:	4621      	mov	r1, r4
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	f000 f8b7 	bl	800da18 <_sbrk_r>
 800d8aa:	1c43      	adds	r3, r0, #1
 800d8ac:	d00a      	beq.n	800d8c4 <sbrk_aligned+0x34>
 800d8ae:	1cc4      	adds	r4, r0, #3
 800d8b0:	f024 0403 	bic.w	r4, r4, #3
 800d8b4:	42a0      	cmp	r0, r4
 800d8b6:	d007      	beq.n	800d8c8 <sbrk_aligned+0x38>
 800d8b8:	1a21      	subs	r1, r4, r0
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	f000 f8ac 	bl	800da18 <_sbrk_r>
 800d8c0:	3001      	adds	r0, #1
 800d8c2:	d101      	bne.n	800d8c8 <sbrk_aligned+0x38>
 800d8c4:	f04f 34ff 	mov.w	r4, #4294967295
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	bd70      	pop	{r4, r5, r6, pc}
 800d8cc:	20000ec8 	.word	0x20000ec8

0800d8d0 <_malloc_r>:
 800d8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d4:	1ccd      	adds	r5, r1, #3
 800d8d6:	f025 0503 	bic.w	r5, r5, #3
 800d8da:	3508      	adds	r5, #8
 800d8dc:	2d0c      	cmp	r5, #12
 800d8de:	bf38      	it	cc
 800d8e0:	250c      	movcc	r5, #12
 800d8e2:	2d00      	cmp	r5, #0
 800d8e4:	4607      	mov	r7, r0
 800d8e6:	db01      	blt.n	800d8ec <_malloc_r+0x1c>
 800d8e8:	42a9      	cmp	r1, r5
 800d8ea:	d905      	bls.n	800d8f8 <_malloc_r+0x28>
 800d8ec:	230c      	movs	r3, #12
 800d8ee:	2600      	movs	r6, #0
 800d8f0:	603b      	str	r3, [r7, #0]
 800d8f2:	4630      	mov	r0, r6
 800d8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f8:	4e2e      	ldr	r6, [pc, #184]	; (800d9b4 <_malloc_r+0xe4>)
 800d8fa:	f000 f89d 	bl	800da38 <__malloc_lock>
 800d8fe:	6833      	ldr	r3, [r6, #0]
 800d900:	461c      	mov	r4, r3
 800d902:	bb34      	cbnz	r4, 800d952 <_malloc_r+0x82>
 800d904:	4629      	mov	r1, r5
 800d906:	4638      	mov	r0, r7
 800d908:	f7ff ffc2 	bl	800d890 <sbrk_aligned>
 800d90c:	1c43      	adds	r3, r0, #1
 800d90e:	4604      	mov	r4, r0
 800d910:	d14d      	bne.n	800d9ae <_malloc_r+0xde>
 800d912:	6834      	ldr	r4, [r6, #0]
 800d914:	4626      	mov	r6, r4
 800d916:	2e00      	cmp	r6, #0
 800d918:	d140      	bne.n	800d99c <_malloc_r+0xcc>
 800d91a:	6823      	ldr	r3, [r4, #0]
 800d91c:	4631      	mov	r1, r6
 800d91e:	4638      	mov	r0, r7
 800d920:	eb04 0803 	add.w	r8, r4, r3
 800d924:	f000 f878 	bl	800da18 <_sbrk_r>
 800d928:	4580      	cmp	r8, r0
 800d92a:	d13a      	bne.n	800d9a2 <_malloc_r+0xd2>
 800d92c:	6821      	ldr	r1, [r4, #0]
 800d92e:	3503      	adds	r5, #3
 800d930:	1a6d      	subs	r5, r5, r1
 800d932:	f025 0503 	bic.w	r5, r5, #3
 800d936:	3508      	adds	r5, #8
 800d938:	2d0c      	cmp	r5, #12
 800d93a:	bf38      	it	cc
 800d93c:	250c      	movcc	r5, #12
 800d93e:	4638      	mov	r0, r7
 800d940:	4629      	mov	r1, r5
 800d942:	f7ff ffa5 	bl	800d890 <sbrk_aligned>
 800d946:	3001      	adds	r0, #1
 800d948:	d02b      	beq.n	800d9a2 <_malloc_r+0xd2>
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	442b      	add	r3, r5
 800d94e:	6023      	str	r3, [r4, #0]
 800d950:	e00e      	b.n	800d970 <_malloc_r+0xa0>
 800d952:	6822      	ldr	r2, [r4, #0]
 800d954:	1b52      	subs	r2, r2, r5
 800d956:	d41e      	bmi.n	800d996 <_malloc_r+0xc6>
 800d958:	2a0b      	cmp	r2, #11
 800d95a:	d916      	bls.n	800d98a <_malloc_r+0xba>
 800d95c:	1961      	adds	r1, r4, r5
 800d95e:	42a3      	cmp	r3, r4
 800d960:	6025      	str	r5, [r4, #0]
 800d962:	bf18      	it	ne
 800d964:	6059      	strne	r1, [r3, #4]
 800d966:	6863      	ldr	r3, [r4, #4]
 800d968:	bf08      	it	eq
 800d96a:	6031      	streq	r1, [r6, #0]
 800d96c:	5162      	str	r2, [r4, r5]
 800d96e:	604b      	str	r3, [r1, #4]
 800d970:	4638      	mov	r0, r7
 800d972:	f104 060b 	add.w	r6, r4, #11
 800d976:	f000 f865 	bl	800da44 <__malloc_unlock>
 800d97a:	f026 0607 	bic.w	r6, r6, #7
 800d97e:	1d23      	adds	r3, r4, #4
 800d980:	1af2      	subs	r2, r6, r3
 800d982:	d0b6      	beq.n	800d8f2 <_malloc_r+0x22>
 800d984:	1b9b      	subs	r3, r3, r6
 800d986:	50a3      	str	r3, [r4, r2]
 800d988:	e7b3      	b.n	800d8f2 <_malloc_r+0x22>
 800d98a:	6862      	ldr	r2, [r4, #4]
 800d98c:	42a3      	cmp	r3, r4
 800d98e:	bf0c      	ite	eq
 800d990:	6032      	streq	r2, [r6, #0]
 800d992:	605a      	strne	r2, [r3, #4]
 800d994:	e7ec      	b.n	800d970 <_malloc_r+0xa0>
 800d996:	4623      	mov	r3, r4
 800d998:	6864      	ldr	r4, [r4, #4]
 800d99a:	e7b2      	b.n	800d902 <_malloc_r+0x32>
 800d99c:	4634      	mov	r4, r6
 800d99e:	6876      	ldr	r6, [r6, #4]
 800d9a0:	e7b9      	b.n	800d916 <_malloc_r+0x46>
 800d9a2:	230c      	movs	r3, #12
 800d9a4:	4638      	mov	r0, r7
 800d9a6:	603b      	str	r3, [r7, #0]
 800d9a8:	f000 f84c 	bl	800da44 <__malloc_unlock>
 800d9ac:	e7a1      	b.n	800d8f2 <_malloc_r+0x22>
 800d9ae:	6025      	str	r5, [r4, #0]
 800d9b0:	e7de      	b.n	800d970 <_malloc_r+0xa0>
 800d9b2:	bf00      	nop
 800d9b4:	20000ec4 	.word	0x20000ec4

0800d9b8 <_realloc_r>:
 800d9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9bc:	4680      	mov	r8, r0
 800d9be:	4614      	mov	r4, r2
 800d9c0:	460e      	mov	r6, r1
 800d9c2:	b921      	cbnz	r1, 800d9ce <_realloc_r+0x16>
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ca:	f7ff bf81 	b.w	800d8d0 <_malloc_r>
 800d9ce:	b92a      	cbnz	r2, 800d9dc <_realloc_r+0x24>
 800d9d0:	f7ff ff16 	bl	800d800 <_free_r>
 800d9d4:	4625      	mov	r5, r4
 800d9d6:	4628      	mov	r0, r5
 800d9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9dc:	f000 f838 	bl	800da50 <_malloc_usable_size_r>
 800d9e0:	4284      	cmp	r4, r0
 800d9e2:	4607      	mov	r7, r0
 800d9e4:	d802      	bhi.n	800d9ec <_realloc_r+0x34>
 800d9e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9ea:	d812      	bhi.n	800da12 <_realloc_r+0x5a>
 800d9ec:	4621      	mov	r1, r4
 800d9ee:	4640      	mov	r0, r8
 800d9f0:	f7ff ff6e 	bl	800d8d0 <_malloc_r>
 800d9f4:	4605      	mov	r5, r0
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d0ed      	beq.n	800d9d6 <_realloc_r+0x1e>
 800d9fa:	42bc      	cmp	r4, r7
 800d9fc:	4622      	mov	r2, r4
 800d9fe:	4631      	mov	r1, r6
 800da00:	bf28      	it	cs
 800da02:	463a      	movcs	r2, r7
 800da04:	f7ff fbac 	bl	800d160 <memcpy>
 800da08:	4631      	mov	r1, r6
 800da0a:	4640      	mov	r0, r8
 800da0c:	f7ff fef8 	bl	800d800 <_free_r>
 800da10:	e7e1      	b.n	800d9d6 <_realloc_r+0x1e>
 800da12:	4635      	mov	r5, r6
 800da14:	e7df      	b.n	800d9d6 <_realloc_r+0x1e>
	...

0800da18 <_sbrk_r>:
 800da18:	b538      	push	{r3, r4, r5, lr}
 800da1a:	2300      	movs	r3, #0
 800da1c:	4d05      	ldr	r5, [pc, #20]	; (800da34 <_sbrk_r+0x1c>)
 800da1e:	4604      	mov	r4, r0
 800da20:	4608      	mov	r0, r1
 800da22:	602b      	str	r3, [r5, #0]
 800da24:	f7f6 ff58 	bl	80048d8 <_sbrk>
 800da28:	1c43      	adds	r3, r0, #1
 800da2a:	d102      	bne.n	800da32 <_sbrk_r+0x1a>
 800da2c:	682b      	ldr	r3, [r5, #0]
 800da2e:	b103      	cbz	r3, 800da32 <_sbrk_r+0x1a>
 800da30:	6023      	str	r3, [r4, #0]
 800da32:	bd38      	pop	{r3, r4, r5, pc}
 800da34:	20000ecc 	.word	0x20000ecc

0800da38 <__malloc_lock>:
 800da38:	4801      	ldr	r0, [pc, #4]	; (800da40 <__malloc_lock+0x8>)
 800da3a:	f000 b811 	b.w	800da60 <__retarget_lock_acquire_recursive>
 800da3e:	bf00      	nop
 800da40:	20000ed0 	.word	0x20000ed0

0800da44 <__malloc_unlock>:
 800da44:	4801      	ldr	r0, [pc, #4]	; (800da4c <__malloc_unlock+0x8>)
 800da46:	f000 b80c 	b.w	800da62 <__retarget_lock_release_recursive>
 800da4a:	bf00      	nop
 800da4c:	20000ed0 	.word	0x20000ed0

0800da50 <_malloc_usable_size_r>:
 800da50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da54:	1f18      	subs	r0, r3, #4
 800da56:	2b00      	cmp	r3, #0
 800da58:	bfbc      	itt	lt
 800da5a:	580b      	ldrlt	r3, [r1, r0]
 800da5c:	18c0      	addlt	r0, r0, r3
 800da5e:	4770      	bx	lr

0800da60 <__retarget_lock_acquire_recursive>:
 800da60:	4770      	bx	lr

0800da62 <__retarget_lock_release_recursive>:
 800da62:	4770      	bx	lr

0800da64 <_init>:
 800da64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da66:	bf00      	nop
 800da68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da6a:	bc08      	pop	{r3}
 800da6c:	469e      	mov	lr, r3
 800da6e:	4770      	bx	lr

0800da70 <_fini>:
 800da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da72:	bf00      	nop
 800da74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da76:	bc08      	pop	{r3}
 800da78:	469e      	mov	lr, r3
 800da7a:	4770      	bx	lr
